# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page - for testing connected device
# Home page

GET             /                                           @controllers.SecurityController.index

# -> Testovac√≠
GET             /test1                                      @controllers.WikyController.test1()
GET             /test2                                      @controllers.WikyController.test2()
GET             /test3                                      @controllers.WikyController.test3()
GET             /test4                                      @controllers.WikyController.test4(projectId)
GET             /test5                                      @controllers.WikyController.test5(projectId)
GET             /test6                                      @controllers.WikyController.test6()



#  WEB SOCET  //////////////////////////////////////////////////////////////////////////////
GET              /websocket/homer/:id                       @controllers.WebSocketController_Incoming.homer_connection(id: String)
GET              /websocket/mobile/:id                      @controllers.WebSocketController_Incoming.mobile_connection(id: String)

POST             /websocket/webSocketStats                  @controllers.WebSocketController_Incoming.getWebSocketStats()
POST             /websocket/sendTo/:id                      @controllers.WebSocketController_Incoming.sendTo(id: String)

#API - CoreClient ##############################################################################################################################################################

#Login page
POST            /coreClient/person/permission/login         @controllers.SecurityController.login()
POST            /coreClient/person/permission/logout        @controllers.SecurityController.logout

GET             /login/facebook                             @controllers.SecurityController.Facebook(returnLink)
GET             /login/twitter                              @controllers.SecurityController.Twitter(returnLink)
GET             /login/github                               @controllers.SecurityController.GitHub(returnLink)
GET             /login/vkontakte                            @controllers.SecurityController.Vkontakte(returnLink)

GET             /login/person                               @controllers.SecurityController.getPersonByToken()

GET             /login/facebook/*url                        @controllers.SecurityController.GET_facebook_oauth(url)
GET             /login/github/*url                          @controllers.SecurityController.GET_github_oauth(url)

#Permission

PUT            /secure/permission/person/add                @controllers.PermissionController.add_Permission_Person(person_id,permission_id)
PUT            /secure/permission/person/remove             @controllers.PermissionController.remove_Permission_Person(person_id,permission_id)
GET            /secure/permission                           @controllers.PermissionController.get_Permission_All()

GET            /secure/role/permission/add                  @controllers.PermissionController.add_Permission_to_Role(permission_id,role_id)
GET            /secure/role/permission                      @controllers.PermissionController.get_Permission_in_Group(role_id)
GET            /secure/role/permission/remove               @controllers.PermissionController.remove_Permission_from_Role(permission_id,role_id)

POST           /secure/role                                 @controllers.PermissionController.new_Role()
DELETE         /secure/role                                 @controllers.PermissionController.delete_Role(role_id)

PUT            /secure/role/person/add                      @controllers.PermissionController.add_Role_Person(person_id,role_id)
PUT            /secure/role/person/remove                   @controllers.PermissionController.remove_Role_Person(person_id,role_id)
GET            /secure/role/all                             @controllers.PermissionController.get_Role_All()

GET            /secure/person/system_acces                  @controllers.PermissionController.get_System_Acces(person_id)



### PERSON ############ PERSON ############### PERSON ################ PERSON ################# PERSON ############ PERSON #####################################################
################################################################################################################################################################################

#Peron CRUD
POST           /coreClient/person/developer                @controllers.PersonController.developerRegistration()
POST           /coreClient/person/person                   @controllers.PersonController.registred_Person()
PUT            /coreClient/person/person                   @controllers.PersonController.edit_Person_Information()
GET            /coreClient/person/person/:id               @controllers.PersonController.getPerson(id: String)

DELETE         /coreClient/person/person/:id               @controllers.PersonController.deletePerson(id: String)

GET            /emailPersonAuthentication/                 @controllers.PersonController.email_Person_authentitaction(mail,authToken)




### PERMISSION ############ PERMISSION ############### PERMISSION ################ PERMISSION ################# PERMISSION #####################################################
################################################################################################################################################################################


### OVERFLOW ############ OVERFLOW ############### OVERFLOW ################ OVERFLOW ################# OVERFLOW ###############################################################
################################################################################################################################################################################

POST           /overflow/post                              @controllers.OverFlowController.newPost()
GET            /overflow/post/:id                          @controllers.OverFlowController.getPost(id: String)
DELETE         /overflow/post/:id                          @controllers.OverFlowController.deletePost(id: String)
PUT            /overflow/post/:id                          @controllers.OverFlowController.editPost(id: String)
POST           /overflow/postFilter                        @controllers.OverFlowController.getPostByFilter()
GET            /overflow/linkedAnswers/:id                 @controllers.OverFlowController.getPostLinkedAnswers(id: String)

GET           /overflow/post/hashTags/:id                  @controllers.OverFlowController.hashTagsListOnPost(id: String)
GET           /overflow/post/comments/:id                  @controllers.OverFlowController.commentsListOnPost(id: String)
GET           /overflow/post/answers/:id                   @controllers.OverFlowController.answereListOnPost(id: String)
GET           /overflow/post/textOfPost/:id                @controllers.OverFlowController.textOfPost(id: String)

POST           /overflow/typeOfPost                        @controllers.OverFlowController.newTypeOfPost()
GET            /overflow/typeOfPost                        @controllers.OverFlowController.getTypeOfPost()

POST           /overflow/typeOfConfirm                     @controllers.OverFlowController.newTypeOfConfirms()
GET            /overflow/typeOfConfirm                     @controllers.OverFlowController.getTypeOfConfirms()
PUT            /overflow/typeOfConfirm/:conf/:pst          @controllers.OverFlowController.putTypeOfConfirmToPost(conf: String, pst: String)

POST           /overflow/comment                           @controllers.OverFlowController.addComment()
PUT            /overflow/comment/:id                       @controllers.OverFlowController.updateComment(id: String)
DELETE         /overflow/comment/:id                       @controllers.OverFlowController.deletePost(id: String)

POST           /overflow/answer                            @controllers.OverFlowController.addAnswer()
PUT            /overflow/answer/:id                        @controllers.OverFlowController.updateComment(id: String)
DELETE         /overflow/answer/:id                        @controllers.OverFlowController.deletePost(id: String)

PUT            /overflow/likePlus/:id                      @controllers.OverFlowController.likePlus(id: String)
PUT            /overflow/likeMinus/:id                     @controllers.OverFlowController.likeMinus(id: String)
POST           /overflow/link                              @controllers.OverFlowController.linkWithPreviousAnswer()
DELETE         /overflow/link/:id                          @controllers.OverFlowController.unlinkWithPreviousAnswer(id: String)
PUT            /overflow/removeLink                        @controllers.OverFlowController.removeHashTag()
POST           /overflow/hashTag                           @controllers.OverFlowController.addHashTag()
PUT            /overflow/removeHashTag                     @controllers.OverFlowController.removeHashTag()





### PROJECT ############ PROJECT ############### PROJECT ################ PROJECT ################# PROJECT ####################################################################
################################################################################################################################################################################
#Project
POST           /project/project                            @controllers.ProgramingPackageController.postNewProject()
PUT            /project/project/:id                        @controllers.ProgramingPackageController.updateProject(id: String)
GET            /project/project/:id                        @controllers.ProgramingPackageController.getProject(id: String)
GET            /project/project                            @controllers.ProgramingPackageController.getProjectsByUserAccount()
DELETE         /project/project/:id                        @controllers.ProgramingPackageController.deleteProject(id: String)
PUT            /project/project/shareProject/:id           @controllers.ProgramingPackageController.shareProjectWithUsers(id: String)
PUT            /project/project/unshareProject/:id         @controllers.ProgramingPackageController.unshareProjectWithUsers(id: String)
GET            /project/project/b_programs/:id             @controllers.ProgramingPackageController.getAll_b_Programs(id: String)
GET            /project/project/c_programs/:id             @controllers.ProgramingPackageController.getAll_c_Programs(id: String)
GET            /project/project/m_projects/:id             @controllers.ProgramingPackageController.getAll_m_Projects(id: String)

GET            /project/project/homerList/:id              @controllers.ProgramingPackageController.getProgramhomerList(id: String)
GET            /project/project/owners/:id                 @controllers.ProgramingPackageController.getProjectOwners(id: String)

#Homer
POST           /project/homer                              @controllers.ProgramingPackageController.newHomer()
DELETE         /project/homer/:id                          @controllers.ProgramingPackageController.removeHomer(id: String)
GET            /project/homer/:id                          @controllers.ProgramingPackageController.getHomer(id: String)
GET            /project/homer                              @controllers.ProgramingPackageController.getAllHomers()
GET            /project/homer/getAllConnectedHomers/:id    @controllers.ProgramingPackageController.getConnectedHomers(id: String)


#Project - connection
PUT            /project/connectHomerWithProject            @controllers.ProgramingPackageController.connectHomerWithProject()
PUT            /project/disconnectHomerWithProject          @controllers.ProgramingPackageController.disconnectHomerWithProject()


#Program
POST           /project/b_program                          @controllers.ProgramingPackageController.postNewBProgram()
GET            /project/b_program/:id                      @controllers.ProgramingPackageController.getProgram(id: String)
PUT            /project/b_program/:id                           @controllers.ProgramingPackageController.editProgram(id: String)
PUT            /project/b_program/update/:id                    @controllers.ProgramingPackageController.update_b_program(id: String)
DELETE         /project/b_program/:id                           @controllers.ProgramingPackageController.remove_b_Program(id: String)
GET            /project/b_programInJson/:id                     @controllers.ProgramingPackageController.getProgramInString(id: String)
PUT            /project/b_program/upload/:id/:ver               @controllers.ProgramingPackageController.uploadProgramToHomer_Immediately(id: String, ver: String)
PUT            /project/b_program/uploadToCloud/:id/:ver        @controllers.ProgramingPackageController.uploadProgramToCloud(id: String, ver: String)

GET            /project/listOfUploadedHomers/:id                @controllers.ProgramingPackageController.listOfUploadedHomers(id: String)
GET            /project/listOfHomersWaitingForUpload/:id        @controllers.ProgramingPackageController.listOfHomersWaitingForUpload(id: String)
GET            /project/boards/:id                              @controllers.ProgramingPackageController.getProjectsBoard(id: String)

#Blocks
POST           /project/blockoBlock                             @controllers.ProgramingPackageController.newBlock()
POST           /project/blockoBlock/:id                         @controllers.ProgramingPackageController.updateOfBlock(id: String)
PUT            /project/blockoBlock/:id                         @controllers.ProgramingPackageController.editBlock(id: String)
GET            /project/blockoBlock/:id                         @controllers.ProgramingPackageController.getBlockBlock(id: String)
GET            /project/blockoBlock/versions/:id                @controllers.ProgramingPackageController.getBlockVersions(id: String)


GET            /project/blockoBlock/allPrevVersions/:id         @controllers.ProgramingPackageController.allPrevVersions(id: String)
DELETE         /project/blockoBlock/version/:id                 @controllers.ProgramingPackageController.deleteBlockVersion(id: String)
DELETE         /project/blockoBlock/block/id                    @controllers.ProgramingPackageController.deleteBlock(id: String)

POST           /project/typeOfBlock                             @controllers.ProgramingPackageController.newTypeOfBlock()
GET            /project/typeOfBlock/filter                      @controllers.ProgramingPackageController.getByCategory()
PUT            /project/typeOfBlock/:id                         @controllers.ProgramingPackageController.editTypeOfBlock(id: String)
GET            /project/typeOfBlock                             @controllers.ProgramingPackageController.getAllTypeOfBlocks()
DELETE         /project/typeOfBlock/:id                         @controllers.ProgramingPackageController.deleteTypeOfBlock(id: String)







### COMPILATION & LIBRARIES ############ COMPILATION & LIBRARIES ############### COMPILATION & LIBRARIES ################ COMPILATION & LIBRARIES ##############################
################################################################################################################################################################################

#C:Program
POST            /compilation/c_program/:project_id                          @controllers.CompilationLibrariesController.create_C_Program(project_id)
GET             /compilation/c_program/:c_program_id                          @controllers.CompilationLibrariesController.get_C_Program(c_program_id)
GET             /compilation/c_program/project/:project_id                  @controllers.CompilationLibrariesController.get_C_Program_All_from_Project(project_id)

PUT             /compilation/c_program/edit/:c_program_id                     @controllers.CompilationLibrariesController.edit_C_Program_Description(c_program_id)
PUT             /compilation/c_program/update/:c_program_id                   @controllers.CompilationLibrariesController.update_C_Program(c_program_id)

DELETE          /compilation/c_program/c_program/:c_program_id                @controllers.CompilationLibrariesController.delete_C_Program(c_program_id)
DELETE          /compilation/c_program/version/:c_program_id/:version_id                  @controllers.CompilationLibrariesController.delete_C_Program_Version(c_program_id, version_id)

GET             /compilation/c_program/eclipse                                              @controllers.CompilationLibrariesController.generateProjectForEclipse()
POST            /compilation/c_program/upload/:c_program_id/:board_id                       @controllers.CompilationLibrariesController.uploadCompilationToBoard(c_program_id, board_id)
POST            /compilation/c_program/binary/:board_id                                     @controllers.CompilationLibrariesController.uploadBinaryFileToBoard(board_id)

GET             /compilation/project/board/:project_id                                      @controllers.CompilationLibrariesController.get_Boards_from_Project(project_id)

#Processor
POST            /compilation/processor                                                      @controllers.CompilationLibrariesController.new_Processor()
GET             /compilation/processor/:processor_id                                        @controllers.CompilationLibrariesController.get_Processor(processor_id)
GET             /compilation/processor                                                      @controllers.CompilationLibrariesController.get_Processor_All()
PUT             /compilation/processor/:processor_id                                        @controllers.CompilationLibrariesController.update_Processor(processor_id)
DELETE          /compilation/processor/:processor_id                                        @controllers.CompilationLibrariesController.delete_Processor(processor_id)

PUT             /compilation/processor/library/:processor_id/:library_id                    @controllers.CompilationLibrariesController.connectProcessorWithLibrary(processor_id, library_id)
PUT             /compilation/processor/libraryGroup/:processor_id/:library_id               @controllers.CompilationLibrariesController.connectProcessorWithLibraryGroup(processor_id, library_id)
DELETE          /compilation/processor/library/:processor_id/:library_id                    @controllers.CompilationLibrariesController.disconnectProcessorWithLibrary(processor_id, library_id)
DELETE          /compilation/processor/libraryGroup/:processor_id/:library_id               @controllers.CompilationLibrariesController.disconnectProcessorWithLibraryGroup(processor_id, library_id)

GET            /compilation/processor/libraryGroups/:processor_id                           @controllers.CompilationLibrariesController.getProcessorLibraryGroups(processor_id)
GET            /compilation/processor/singleLibrary/:processor_id                           @controllers.CompilationLibrariesController.getProcessorSingleLibraries(processor_id)

#Board
POST            /compilation/board                                          @controllers.CompilationLibrariesController.new_Board()
PUT             /compilation/board/userDescription/:type_of_board_id        @controllers.CompilationLibrariesController.edit_Board_User_Description(type_of_board_id)
PUT             /compilation/board/filter                                   @controllers.CompilationLibrariesController.get_Board_Filter()
GET             /compilation/board/:board_id                                @controllers.CompilationLibrariesController.get_Board(board_id)
DELETE          /compilation/board/deactivateBoard/:board_id                @controllers.CompilationLibrariesController.deactivate_Board(board_id)
PUT             /compilation/board/connect/:board_id/:project_id            @controllers.CompilationLibrariesController.connect_Board_with_Project(board_id, project_id)
PUT             /compilation/board/disconnect/:board_id/:project_id         @controllers.CompilationLibrariesController.disconnect_Board_from_Project(board_id, project_id)
GET             /compilation/board/projects/:board_id                       @controllers.CompilationLibrariesController.getBoardProjects(board_id)


#Producer
POST            /compilation/producer                           @controllers.CompilationLibrariesController.new_Producer()
PUT             /compilation/producer                           @controllers.CompilationLibrariesController.edit_Producer(producer_id)
GET             /compilation/producer/all                       @controllers.CompilationLibrariesController.get_Producers()
GET             /compilation/producer                           @controllers.CompilationLibrariesController.get_Producer(producer_id)
GET             /compilation/producer/description               @controllers.CompilationLibrariesController.get_Producer_Description(producer_id)
GET             /compilation/producer/typeOfBoards              @controllers.CompilationLibrariesController.get_Producer_TypeOfBoards(producer_id)

#TypeOfBoard
POST            /compilation/typeOfBoard                        @controllers.CompilationLibrariesController.new_TypeOfBoard()
PUT             /compilation/typeOfBoard                        @controllers.CompilationLibrariesController.edit_TypeOfBoard(type_of_board_id)
DELETE          /compilation/typeOfBoard                        @controllers.CompilationLibrariesController.delete_TypeOfBoard(type_of_board_id)
GET             /compilation/typeOfBoard/all                    @controllers.CompilationLibrariesController.get_TypeOfBoard_all()
GET             /compilation/typeOfBoard                        @controllers.CompilationLibrariesController.get_TypeOfBoard(type_of_board_id)
GET             /compilation/typeOfBoard/description            @controllers.CompilationLibrariesController.get_TypeOfBoard_Description(type_of_board_id)
GET             /compilation/typeOfBoard/boards                 @controllers.CompilationLibrariesController.getTypeOfBoardAllBoards(type_of_board_id)

#LibraryGroups
POST            /compilation/libraryGroup                                           @controllers.CompilationLibrariesController.new_LibraryGroup()
GET             /compilation/libraryGroup/:libraryGroup_id                          @controllers.CompilationLibrariesController.get_LibraryGroup(libraryGroup_id)
DELETE          /compilation/libraryGroup/:libraryGroup_id                          @controllers.CompilationLibrariesController.delete_LibraryGroup(libraryGroup_id)
GET             /compilation/libraryGroup/filter                                    @controllers.CompilationLibrariesController.get_LibraryGroup_Filter()
PUT             /compilation/libraryGroup/:libraryGroup_id                          @controllers.CompilationLibrariesController.editLibraryGroup(libraryGroup_id)
GET             /compilation/libraryGroup/generalDescription/:libraryGroup_id       @controllers.CompilationLibrariesController.get_LibraryGroup_Description(libraryGroup_id)
GET             /compilation/libraryGroup/processors/:libraryGroup_id               @controllers.CompilationLibrariesController.get_LibraryGroup_Processors(libraryGroup_id)
GET             /compilation/libraryGroup/libraries/:libraryGroup_id/:version_id    @controllers.CompilationLibrariesController.get_LibraryGroup_Libraries(libraryGroup_id, version_id)
POST            /compilation/libraryGroup/version/:version_id                       @controllers.CompilationLibrariesController.new_LibraryGroup_Version(version_id)
GET             /compilation/libraryGroup/versions/:version_id                      @controllers.CompilationLibrariesController.get_LibraryGroup_Version(version_id)
POST            /compilation/libraryGroup/upload/:libraryGroup_id/:version_id       @controllers.CompilationLibrariesController.upload_Library_To_LibraryGroup(libraryGroup_id, version_id)

#Single Library
POST            /compilation/library                            @controllers.CompilationLibrariesController.new_SingleLibrary()
POST            /compilation/library/version/:library_id         @controllers.CompilationLibrariesController.new_SingleLibrary_Version(library_id)
GET             /compilation/library/versions/:library_id        @controllers.CompilationLibrariesController.get_SingleLibrary_Versions(library_id)
GET             /compilation/library/filter                     @controllers.CompilationLibrariesController.get_SingleLibrary_Filter()
GET             /compilation/library/:library_id                 @controllers.CompilationLibrariesController.get_SingleLibrary(library_id)

PUT             /compilation/library:library_id                 @controllers.CompilationLibrariesController.edit_SingleLibrary(library_id)
DELETE          /compilation/library:library_id                 @controllers.CompilationLibrariesController.delete_SingleLibrary(library_id)
POST            /compilation/library/upload:library_id/:version_id      @controllers.CompilationLibrariesController.upload_SingleLibrary_Version(library_id, version_id)

#File
GET             /file/listOfFiles/:id                           @controllers.CompilationLibrariesController.get_LibraryGroup_Version_Libraries(id: String)
GET             /file/fileRecord/:id                            @controllers.CompilationLibrariesController.fileRecord(id: String)


### GRIDS ############ GRIDS ############### GRIDS ################ GRIDS ######################################################################################################
################################################################################################################################################################################

#M Project
POST            /grid/m_project                            @controllers.GridController.new_M_Project(project_id)
GET             /grid/m_project/person                     @controllers.GridController.get_M_Projects_ByLoggedPerson()
GET             /grid/m_project/:m_project_id              @controllers.GridController.get_M_Project(m_project_id)
PUT             /grid/m_project/:m_project_id              @controllers.GridController.edit_M_Project(m_project_id)
DELETE          /grid/m_project/:m_project_id              @controllers.GridController.remove_M_Project(m_project_id)

GET             /grid/m_project/project/:project_id        @controllers.GridController.get_M_Projects_from_GlobalProject(project_id)


#M Program
POST            /grid/m_program                            @controllers.GridController.new_M_Program()
GET             /grid/m_program/app/token/:qr_token        @controllers.GridController.get_M_Program_byQR_Token_forMobile(qr_token)
GET             /grid/m_program/app/m_programs             @controllers.GridController.get_M_Program_all_forMobile()


GET             /grid/m_program/:m_progrm_id               @controllers.GridController.get_M_Program(m_progrm_id)
PUT             /grid/m_program/:m_progrm_id               @controllers.GridController.edit_M_Program(m_progrm_id)
DELETE          /grid/m_program/:m_progrm_id               @controllers.GridController.remove_M_Program(m_progrm_id)




#M Screen Type
POST            /grid/screen_type                          @controllers.GridController.new_Screen_Size_Type()
GET             /grid/screen_type/all                      @controllers.GridController.get_Screen_Size_Type_Combination()
GET             /grid/screen_type/:screen_size_type_id     @controllers.GridController.get_Screen_Size_Type(screen_size_type_id)
PUT             /grid/screen_type/:screen_size_type_id     @controllers.GridController.edit_Screen_Size_Type(screen_size_type_id)
DELETE          /grid/screen_type/:screen_size_type_id     @controllers.GridController.remove_Screen_Size_Type(screen_size_type_id)




### TOOLS ############ TOOLS ############### TOOLS ################ TOOLS ######################################################################################################
################################################################################################################################################################################

#SWAGGER API
GET            /api-docs                                   @utilities.swagger.ApiHelpController.getResources

#CORS
OPTIONS        /*all                                       @controllers.SecurityController.optionLink(all)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                controllers.Assets.at(path="/public", file)

