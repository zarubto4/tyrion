# Verze 1.06.6.3 #


TYRION-278 POST

Feature: Obnova hesla
  Pokud uživatel zapomene heslo, na frontendu vyplní svůj email a klikne na tlačítko pro obnovení hesla. Pomocí metody: 
	POST {{url_Tyriona}}/coreClient/mail_person_password_recovery 
  si zažádá o zaslaní emailu s linkem na změnu hesla, metoda vyžaduje JSON s obsahem:
	{"mail":"user@mail.com"} 
  Metoda pokaždé vrací code = 200. Pokud je email uživatele nalezen v databázi, vygeneruje se password_recovery_token a přijde mu email s adresou na frontend ve tvaru: 
	{{url_Becki}}/passwordRestart&token="password_recovery_token" 
  Na této adrese si uživatel vytvoří nové heslo. Adresu je možné změnit, pokud bude potřeba, stačí říct, teď je vzatá z configu Tyriona. Z frontendu přijde request: 
	PUT {{url_Tyriona}}/coreClient/person_password_recovery 
  který bude obsahovat JSON s obsahem:
	{"mail"				:	"user@mail.com",
	 "password_recovery_token"	:	"c2cf05c0-75a8-4c7c-9100-1c1bc520f0d0"
	 "password"			:	"new_password"}
  Token je platný 24 hodin, když uživatel rozklikne link po 24h, vrátí se odpověď code = 400 a uživatel si musí zažádat o nový email s linkem.
  Pokud je token platný, změna hesla proběhne a uživatel je všude, kde může být přihlášený, odhlášen. 
  Dále pokud uživatel klikne na tlačítko pro zaslání emailu vícekrát, tzn. že password_recovery_token je již vytvořený, budou mu chodit emaily s tímto tokenem,
  ale jen 15 minut od vytvoření tohoto tokenu. Jakmile je token starší a uživatel znovu zažádá o email, vygenerue se nový token a starý se smaže.

	Lexa Tylš
  


### Oprava Bugů ###

 * fixed [TYRION-278](http://youtrack.byzance.cz/youtrack/issue/TYRION-278)
 * fixed [TYRION-271](http://youtrack.byzance.cz/youtrack/issue/TYRION-271)
 * fixed [TYRION-277](http://youtrack.byzance.cz/youtrack/issue/TYRION-277)
 * fixed [TYRION-274](http://youtrack.byzance.cz/youtrack/issue/TYRION-274)
 * fixed [TYRION-272](http://youtrack.byzance.cz/youtrack/issue/TYRION-272)
 * fixed [TYRION-118](http://youtrack.byzance.cz/youtrack/issue/TYRION-118)
 * fixed [TYRION-128](http://youtrack.byzance.cz/youtrack/issue/TYRION-128)
 * fixed [TYRION-280](http://youtrack.byzance.cz/youtrack/issue/TYRION-280)
 * fixed [TYRION-279](http://youtrack.byzance.cz/youtrack/issue/TYRION-279)
 * fixed [TYRION-185](http://youtrack.byzance.cz/youtrack/issue/TYRION-185)
 * fixed [TYRION-187](http://youtrack.byzance.cz/youtrack/issue/TYRION-187)
 * fixed [TYRION-201](http://youtrack.byzance.cz/youtrack/issue/TYRION-201)
 * fixed [TYRION-257](http://youtrack.byzance.cz/youtrack/issue/TYRION-257)
 * fixed [TYRION-276](http://youtrack.byzance.cz/youtrack/issue/TYRION-276)
 * fixed [TYRION-273](http://youtrack.byzance.cz/youtrack/issue/TYRION-273)
 * fixed [TYRION-220](http://youtrack.byzance.cz/youtrack/issue/TYRION-220)
 * fixed [TYRION-217](http://youtrack.byzance.cz/youtrack/issue/TYRION-217)
 * fixed [TYRION-300](http://youtrack.byzance.cz/youtrack/issue/TYRION-300)


### TODO ###

  * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
  * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
  * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
  * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
  * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
  * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona
  * TODO 13 Důležité je dodělat ORM dokumentaci ve SWAGGERU pro kompilaci!
  * TODO 14 AzureStorageLink a azurePackageLink přesunout pod Version_object!!! Už je to neudržitelný!!!
  * TODO 16 Mazání souborů na Azure
  * TODO 15 Verzování nasadit i na M_Program!
  * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
  * TODO 17 Link je také v kodu http://youtrack.byzance.cz/youtrack/issue/TYRION-263
  * Propojení uživatelských účtu s wordpressem
  * Připojit místo vykompilované verze vlastní binárku a umožnit plošné aktualizování vlastní binárkou
  * Radek - ukoly: Možnost napsat plugin pro aktualizaci přes USB a plugin do Eclipsu / intellij pro možnost nahrávat na konkrétní zařízení



http://youtrack.byzance.cz/youtrack/issue/TYRION-271




# Verze 1.06.6 #
####  20.6.2016 ####

**Změny General:**

Nová verze přináší podporu informací z kompilátoru o bločkách (které vyseparuje kompilátor) pro využití v blocku.
To co vrátí kompilátor ja nabídnuto pro převzetí do blocka skrze výběr firmwaru, který lze na hardware nahrát. Bude pospáno níže.

Bylo opraveno a částečně implementována změna objektů verzí. Často se stávalo že ke kokrétní verzi Třeba C-Programu bylo nutné
přidat další doplňující infomrmace - například zda je verze už zkompilovana, nebo k ní má Tyrion archivovaný kompilační soubor.
Proto byla vytvořena struktura, která je pro vývojáře Tyrionu od teď závazná. Doplňující je také změna poskytnutí dat o souboru.
Kdy bylo nunté vzhledem ke kompilátoru a knihovnám informovat o názvu souboru ještě před tím, než ho frontend stáhne.

 * file_name -  chápu že není zdokumentované jak se soubor bude jmenovat jedinný problém je že nelze podle Azure použít podtržítko

    **Pole verzí**
        "program_versions": [


            {
              "version_object": {   // Původní objekt byl nezměněn - jen byl zanořen
                "id": "1",
                "version_name": "První Verze",
                "version_description": "Novy program",
                "date_of_create": 1466082597558,
                "files": [            // Změna vrácení id soubor - přidává se i název souboru a to pro podporu do budnoucna
                  {
                    "id": "1",
                    "file_name": "c-program"
                  },
                  {
                    "file_name" : "comp.bin",
                    "id" : "2"
                  }
                ]
              },

              // Dodatečné informace podle nutnosti k danému objektu

              "successfully_compiled": false,    <- V případě že kompilační server potvrdil že je v kodu chyba
              "compilable": true,                <- V případě že kompilační server nebyl třeba online atd( prostě není potvrzeno že nelze kod uspešně zkompilovat)
                                                    Dokud není zkomilovano a zamitnotu je tu true
              "compilation_in_progress": "true", <- V případě že compilace trvá déle než (hodně sekund) tak se ukazuje stav true. False není - pokud je false nedává
                                                    smysl ti to zasílat a proto to v Json není.
                                                    Výjmečně musí být boolean hodnota ve "stringu" a to z důvodů nemožnosti vložit do booleanu null a tím vynutit
                                                    vynechání null objketů v Json
              "virtual_input_output": null,
              "compilation_restored": false,
              "runing_on_board": null
            },
            {
            ..... další version_object
            }
          ],



### Podpora kompilace Readme dokumentace než bude dopsána podrobněji do WIKI ###

 * Vytvoříš C_program nad Projektem
  [Swagger New C_program](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/create_C_Program)

    Pokud tam žádná verze verze ještě není - automaticky to skočí do okna k editaci kodu. Možnost tlačítko save
    a výzva k pojmenování první verze pokud uživatel klikne na uložit. (Výzva k pojmenování a popisu)

 * Vytvoříš verzi nad C_program
   [Swagger New Version](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/new_C_Program_Version)

 * Pokud uživatel přijde znovu, otevře si C_program tak tam má možnost editovat kod (verzi). Pokud uloží - je
   nutné ho vyzvat udělat novou verzi s novým číslem a popisem. Pro možnost kontinuálního ukládání navrhuji mít ještě při potvrzení
   uložení další tlačítko "uložit a předchozí verzi zahodit" nebo něco takového.

    Uživatel má před uložením možnost průběžně si vše kompilovat na API, kde je nutné přiložit  "type_of_board_id" : "1",
    [Swagger Compile Code](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/compile_C_Program_code)


                    {
                       "type_of_board_id" : "1",
                       "code" : "#include \"mbed.h\"\n#include \"inc_blink.h\"\n#include \"Ser/Ser.h\"\n \nSer s;\nBlink b;\n \nint main() {\n    s.write();\n    b.start();\n}\n",
                       "user_files" : [
                            {
                                     "file_name":"soubor dva",
                                     "code" : "\n // komentar \n"
                            },
                            {
                                    "file_name":"Uzivatelská třída 2 - tvoří složky",
                                     "code" : "\n // komentar 2 \n"
                            }
                        ],
                       "external_libraries":[
                          {
                             "library_name":"Uživatelův název SER",
                             "files" : [
                                      {
                                          "file_name" :   "Ser/Ser.cpp",
                                          "content" : "#include \"mbed.h\"\n#include \"Ser.h\"\n\nSerial pc(D1, D0); // tx, rx\n \nvoid Ser::write() {\n    pc.printf(\"Serial World!\\n\");\n}\n"
                                      },
                                      {
                                          "file_name" :   "Ser/Ser.h",
                                          "content" : "\nclass Ser\n{\npublic:\n\tvoid write();\t\n};"
                                      }
                                ]
                          },
                           {
                             "library_name":"Uživatelův název Blink",
                             "files" : [
                                      {
                                          "file_name" :   "inc_blink.cpp",
                                          "content" : "#include \"mbed.h\"\r\n#include \"inc_blink.h\"\r\n\r\nDigitalOut myled(LED1);\r\n \r\nvoid Blink::start() {\r\n    while(1) {\r\n        myled = 1;\r\n        wait(0.1);\r\n        myled = 0;\r\n        wait(0.1);\r\n    }\r\n}\r\n"
                                      },
                                      {
                                          "file_name" :   "inc_blink.h",
                                          "content" : "\nclass Blink\n{\npublic:\n\tvoid start();\t\n};"
                                      }
                                ]
                          }
                       ]
                    }

 * Pokud uživatel uložil kod jako novou verzi
   [Swagger Compile Version](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/compile_C_Program_version)
   server jí uloží a zkompiluje pokud nemá vhodnou cach předchozích kompilací (což je zatím spekulativně fungující fičura) proto vždy dojde k tomu že jí server pošle ke kompilaci.
   Po uložení (odpověď na uložení) máš informaci že se server pustil do snahy verzi kompilovat.
        "successfully_compiled": false,    <- V případě že kompilační server potvrdil že je v kodu chyba a false do té doby dokud není potvrzen opak
        "compilable": true,                <- V případě že kompilační server nebyl třeba online atd( prostě není potvrzeno že nelze kod uspešně zkompilovat)
                                                          Dokud není zkomilovano a zamitnotu je tu true
        "compilation_in_progress": "true", <- V případě že compilace trvá déle než (hodně sekund) tak se ukazuje stav true.


### Nahrátí Bocko programu do Homer serveru ###

 Pak následuje nahrání do blocko programu - s implementací hardwaru a dalších firuč.

 * Máš projekt - v něm C_Programy a verze c_Programu
 * Máš vytvořený HW (Desky) - Alespoň jedna deska musí být TypeOfBoard kde connectible_to_internet = true
  (Tento TypeOfBoard ti mimochodem defaultně připravuju při spuštění)
 * Ostatní desky si třeba vytvoř na TypeOfBoard ("Bezdrát", "Drát") a nějaký desky k tomu
 * Vytvoří si blocko program,
 * Pak verzi do kterého můžeš připojit hardware.

 *  PS: Abych ti usnadnil implementaci HW do blocko programu tak jsem ti vytvořil API
      http://swagger.byzance.cz/#!/B_Program/board_all_details_for_blocko
        - Máš seznam HW který mužeš imlementovat
        - C_Programy které můžeš nahrát na HW (Určíš takzvané páry - Desku a verzi C_prgramu) Jen je už na tobě ohlídat si aby si vybral C_progrma s typem desky
          že ho spojuješ s deskou se stejným typem desky

        * Vyžaduje to určení Master desky (náš Yoda) - respektive TypeOfBoard kde je connectible_to_internetv = true!
        * Vybereš jaký program C_program (verzi) chceš nahrát na master desku - nebu mužeš nechat tu, která je momentálně na HW nahraná.
        * Vybereš další zařízení do sítě HW prvků.

        **Verze blocko programu může vypadat takto**
        {
          "version_name": "verze 1.01",
          "version_description": "Verze 1",

           "main_board" : {
             "board_id" : "AAAAAAAA",
             "c_program_version_id" : "61"
           },

          "boards" : [
            {
                "board_id" : "EEEEEE_1",
                "c_program_version_id" : "562"
            },
            {
                "board_id" : "EEEEEE_2",
                "c_program_version_id" : "562"
            }
          ],
          "program": "{\"blocks\":{\"b1\":{\"type\":\"digitalInput\",\"visualType\":\"pushButton\",\"hwId\":\"tg_btn1in\",\"config\":{\"hwId\":\"tg_btn1in\"},\"editor\":{\"x\":270,\"y\":100},\"outputs\":{\"output\":[{\"block\":\"b4\",\"connector\":\"input\"}]}},\"b4\":{\"type\":\"digitalOutput\",\"visualType\":\"light\",\"hwId\":\"hw_034BB5C9\",\"config\":{\"hwId\":\"hw_034BB5C9\"},\"editor\":{\"x\":920,\"y\":110},\"outputs\":{}},\"b9\":{\"type\":\"digitalOutput\",\"visualType\":\"light\",\"hwId\":\"hw_65BC43F0\",\"config\":{\"hwId\":\"hw_65BC43F0\"},\"editor\":{\"x\":920,\"y\":210},\"outputs\":{}},\"b11\":{\"type\":\"digitalInput\",\"visualType\":\"switch\",\"hwId\":\"tg_btn2in\",\"config\":{\"hwId\":\"tg_btn2in\"},\"editor\":{\"x\":280,\"y\":190},\"outputs\":{\"output\":[{\"block\":\"b9\",\"connector\":\"input\"}]}}}}"
        }










### Oprava Bugů ###

 * fixed [TYRION-256](http://youtrack.byzance.cz/youtrack/issue/TYRION-256)
 * fixed [TYRION-249](http://youtrack.byzance.cz/youtrack/issue/TYRION-249)
 * fixed [TYRION-248](http://youtrack.byzance.cz/youtrack/issue/TYRION-248)
 * fixed [TYRION-247](http://youtrack.byzance.cz/youtrack/issue/TYRION-247)
 * fixed [TYRION-231](http://youtrack.byzance.cz/youtrack/issue/TYRION-231)
 * fixed [TYRION-229](http://youtrack.byzance.cz/youtrack/issue/TYRION-229)
 * fixed [TYRION-228](http://youtrack.byzance.cz/youtrack/issue/TYRION-228)
 * fixed [TYRION-227](http://youtrack.byzance.cz/youtrack/issue/TYRION-227)
 * fixed [TYRION-226](http://youtrack.byzance.cz/youtrack/issue/TYRION-226)
 * fixed [TYRION-199](http://youtrack.byzance.cz/youtrack/issue/TYRION-199)
 * fixed [TYRION-190](http://youtrack.byzance.cz/youtrack/issue/TYRION-190)
 * fixed [TYRION-262](http://youtrack.byzance.cz/youtrack/issue/TYRION-262)
 * fixed [TYRION-246](http://youtrack.byzance.cz/youtrack/issue/TYRION-246)
 * fixed [TYRION-251](http://youtrack.byzance.cz/youtrack/issue/TYRION-251)
 * fixed [TYRION-250](http://youtrack.byzance.cz/youtrack/issue/TYRION-250)
 * fixed [TYRION-255](http://youtrack.byzance.cz/youtrack/issue/TYRION-255)
 * fixed [TYRION-200](http://youtrack.byzance.cz/youtrack/issue/TYRION-200)
 * fixed [TYRION-254](http://youtrack.byzance.cz/youtrack/issue/TYRION-254)
 * fixed [TYRION-253](http://youtrack.byzance.cz/youtrack/issue/TYRION-253)

 * Obsolate [TYRION-64](http://youtrack.byzance.cz/youtrack/issue/TYRION-64)




### TODO ###

  * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
  * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
  * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
  * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
  * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
  * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona
  * TODO 13 Důležité je dodělat ORM dokumentaci ve SWAGGERU pro kompilaci!
  * TODO 14 AzureStorageLink a azurePackageLink přesunout pod Version_object!!! Už je to neudržitelný!!!
  * TODO 16 Mazání souborů na Azure
  * TODO 15 Verzování nasadit i na M_Program!
  * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
  * TODO 17 Link je také v kodu http://youtrack.byzance.cz/youtrack/issue/TYRION-263


  a) Takže je potřeba zprostředkovat z kompilace vytvořené virtuální bločky do blocka
  b) V blocku dát možnost importovat hardware a verzi hardwaru (firmwaru)  - vědět co na něm běží a eventuelně nabídnout co na něm může běžet.

  1) Přibyly nové API, které umožnují připojit k blocko programu (ke specifické verzi) konkrétní hardware.
     (Ze seznamu hardwaru, který je registrován k projektu). Je nad tím provedena operace vyhledání vyrtuálních bločků hardwaru z kompilátoru tak aby si je uživatel mohl propojit společně s s blockem.

        PS:  Jsou tam neřešitelné stavy kolie verzí (tak se ještě vymyslí nějaké donucovací prostředky, které zamězí v aktualizaci bez updatu navazující části)

        Becki obdrží informace o desce (hardwaru) a její virtuální bločky.
         Objekt B_Pair je zastřešující objekt, který je vázán k verzi Blocko programu a združuje hardware a jeho verzi C_programu. Když uživatel třeba jumpne zpátky na nižší verzi blocko programu, tyrion downgradne i hardware.


-----

# Verze 1.06.5 #
####  26.5.2016 ####

**Změny General:**

1) Pokud je systém ve vývojářském modu (podrobnější logování a další detaily jako je výběr destinačních serverů na Azure atd.) je systémová barva v modré.
V případě produkčního nasazení je v červené.

2) Přibyla rozpracovaná funkce Diff na provnávání API - Existují knihovny v javasriptu, které dokáží porovnat dva textové
soubory a zvýraznit změny, bohužel javasriptu nevládnu a tak je to zatím bez zvýraznění

-----

####  Becki -> Websocket ####
Byla zprovozněna funkce Websocketu pro Becki:

 * Přihlašovací link je na adrese {url}/websocket/becki/{token} <- Token je stejný, jaký obdržíte po přihlášení uživatele.
 * Počet přihlášení uživatele je neomezený (jen ne nutné se připojovat pokaždé s jiným tokenem) - Uživatel tak může být
   přihlášen na několika počítačích. K tomuto jsem se rozhodl především kvuli možnosti kolize a co dělat když se uživatel
   někde neodhlásí a přihlásí jinde. (A další nestandartní stavy)
   **TODO**(Předpokládám, že by pak bylo vhodné propojit becki instance mezi sebou aby frontend mohl vzájemně synchronizovat všechno co potřebuje)
 * Pokud chcete odzkoušet stream dat mezi blockem v Becki a blokem v Homerovi (zatím jediná věc, která na Websocketu má běžet)
   má to několik prerekvizit.
 * PS: Stvá se občas, že někam ještě zašlu nedefinovaný JSON příkaz
 * TODO: Celý websocket až se ustálý, se musí důkladně zdokumentovat - zejména lidsky vysvětlit jak funguje.

 * Prerekvizity:
    * 1) Přihlášený Cloud Blocko server (zle vizuálně zkontrolovat na první stránce Tyriona (tyrion.byzance.cz) nebo (localhost:9000)
     Blocko server si lze vytvořit na lokalu a pak se s ním připojit na websocket adresu {url}/websocket/blocko_server/:identificator (Kde identifikator je název serveru) Alfa.
     (Zatím vždy využívejte server Alfa prosím ("Velké A!") V kodu není dodělaný rozcestník (není priorita) a vždy se defaultně vybere Alfa.


    * 2) Blocko Program nahraný na Cloud serveru ( v případě že je správně nahraný se zobrazí jako připojený homer v sekci Websocket connection *Connected Homers (PC/RPI..)* )
     Pokud začínáte od nuly:
        * 1) Vytvořit si projekt    http://swagger.byzance.cz/#!/Project/postNewProject
        * 2) Vytvořit blocko program http://swagger.byzance.cz/#!/B_Program/new_b_Program
        * 3) Vytvořit novou verzi s kodem Blocko programu
        * 4) Nahrát blocko program do cloudu (na jeho verzi) http://swagger.byzance.cz/#!/B_Program/upload_b_Program_ToCloud
                Proběhne úspěšné nahrátí do blocko Serveru (Alfa)
                V případě odpojení a připojení Blocko serveru se Tyrion dotáže, co na něm běží a eventuelně opět na Blocko server
                nahraje příslušnou instanci Blocko Programu. Což si lze ověřit prohlédnutím aktuálně připojených websocketů,
                nebo si vypsat B Program http://swagger.byzance.cz/#!/B_Program/get_b_Program


            **Vizualizace Odpovědi v jakém stavu je blocko program:**

                {
                  "id": "1",
                  "name": "Program 1",
                    .
                    .
                    .
                    .
                  "program_state": {
                    "uploaded": true,
                    "m_project_id": null,
                    "version_id": "21",         <<<<< Toto id bude odesíláno v žádosti o poskytnutí stream z blocko serveru
                    "where": "cloud",
                    "cloud": {
                      "program_cloud": {
                        "id": "22",
                        "running_from": 1464462335768
                      },
                      "server_name": "Alfa"
                    }
                  }
                  .
                  .
                  .
                  "update_permission": true
                }

  * Žádost o zasílání "všeho" z blocko Serveru na becki" (Tento Json odesílá Becki Tyrionovi)

        Žádost
                  {
                    "messageType"    : "subscribe_instance",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "version_id"     : "21"        <<<<< Viz horní Json
                  }

        Možnosti odpovědi
                  1) Bude ti zasíláno vše (instance je funční, připojená  - prostě ideální stav)
                  {
                    "messageType"    : "subscribe_instance",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "status"         :  "success"
                  }

                  2) Nebo nastal problém a v "error" je uvedeno proč - Je 9 error stavů, kde se to mohlo pokazit
                  {
                    "messageType"    : "subscribe_instance",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "status"         : "error"
                    "error"          : "text problemu"
                  }

  * Cokoliv co obsahuje messegaChannel "becki" bude z blocka přeposláno přímo do becky a naopak

         Z blocko serveru na Becki

                  {
                    "messageType"    : "cokoliv",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "instanceId"     : "6f894916-fc8c-48f0-a4cb-40a859d712e5",
                    "cokoliv"        : "fuuuuu"
                  }

         Z becki na Blocko server
                  {
                    "messageType"    : "cokoliv",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "cokoliv"        : "fuuuuu"
                  }

   * Co bylo (musí se) přidáno za příkazy na blocko servery (zasílá Tyrion)

          Žádost o odebírání "potřebného do becki" (Je to naprosto shodné jako s odběrem Grid,
          ale je tu jen jiný channel)
                    {
                      "messageType"     :"subscribeChannel",
                      "messageId"       :"SOME ID",
                      "messageChannel"  :"becki",
                      "instanceId"      :"SOME ID"
                    }

          Zrušení odběru
                    {
                      "messageType"     :"unSubscribeChannel",
                      "messageId"       :"SOME ID",
                      "messageChannel"  :"becki",
                      "instanceId"      :"SOME ID"
                    }

-----

### Compilační server ###

Již v předchozích verzích byla implementována kompilace programů, teď s podporou odpovědí a otesováním.
Stále není definováno, jak vracet, zda vracet a kam vracet, jaké vyrtuální bločky jsou vytvořeny nad hardwarem.  (David na tom pracuje)

Prerekvizity tvoří:
   * Připojený kompilační server na websocketu - Lze zkontrolovat z přehledu Tyriona.

     PS: K produkčnímu serveru je trvale připojen Davidům kompilační server ubuntu1. Lze však libovolně připojovat další.
    Tyrion si 2 a více serverů rovnoměrně zatěžuje.

  * Vytvořit si hlavní projekt http://swagger.byzance.cz/#!/Project/postNewProject
  * Vytvořit si C_Program http://swagger.byzance.cz/#!/C_Program/create_C_Program

    C_program vnímám jako firmware našeho hardwaru z pohledu uživatele. Verze jsou na uživatelovi. (Verze s podporou diody, verze s podporou teploměru atd.)
    (verze si uživatel řídí sám, to znamená že pokud verzi updatuje tak se netvoří nová - ale jen se přepíšou původní hodnoty) Vím že je to trochu krkolomné. :( Návrhy?

  * Vytvořit si Verzi nad C_programem http://swagger.byzance.cz/#!/C_Program/new_C_Program_Version

            Ta obsahuje JSON

                 {
                     "version_name" : "První Verze Programu",
                     "version_description" : "Novy program"
                 }

  * Update Verze už s kodem.
     * **code** Obsah main okna - klasická c++ kod
     * **user_files** je pole uživatelských "záložek nebo oken" kde si muže pohodlně rozdělovat kod.
       Ukládám to záměrně takto, aby to šlo na becki znovu zobrazit.
     * **type_of_board_id** pro kompilátor je nutné znát hardwarové podklady (procesor atd..) proto je nunté určit pro kteoru desku se program mompiluje. (Server na začátku vytvoří jednu defaultní NUCLEO_F411RE)
     * **external_libraries**  Externí knihovny individuálně importovaných knihoven k hardwaru.
       **PS Je tam velmi důležité rozlišit jak se vnořují složky Ser/Ser.cpp!**


                {
                   "code" : "#include \"mbed.h\"\n#include \"inc_blink.h\"\n#include \"Ser/Ser.h\"\n \nSer s;\nBlink b;\n \nint main() {\n    s.write();\n    b.start();\n}\n",
                   "type_of_board_id" : "1",
                   "user_files" : [
                        {
                                 "file_name":"soubor dva",
                                 "code" : "\n // komentar tady je super c++ kod \n"
                        },
                        {
                                "file_name":"Uzivatelská třída 2 - tvoří složky",
                                 "code" : "\n // komentar 2 \n"
                        }
                    ],
                   "external_libraries":[
                      {
                         "library_name":"Uživatelův název SER",
                         "files" : [
                                  {
                                      "file_name" :   "Ser/Ser.cpp",
                                      "content" : "#include \"mbed.h\"\n#include \"Ser.h\"\n\nSerial pc(D1, D0); // tx, rx\n \nvoid Ser::write() {\n    pc.printf(\"Serial World!\\n\");\n}\n"
                                  },
                                  {
                                      "file_name" :   "Ser/Ser.h",
                                      "content" : "\nclass Ser\n{\npublic:\n\tvoid write();\t\n};"
                                  }
                            ]
                      },
                       {
                         "library_name":"Uživatelův název Blink",
                         "files" : [
                                  {
                                      "file_name" :   "inc_blink.cpp",
                                      "content" : "#include \"mbed.h\"\r\n#include \"inc_blink.h\"\r\n\r\nDigitalOut myled(LED1);\r\n \r\nvoid Blink::start() {\r\n    while(1) {\r\n        myled = 1;\r\n        wait(0.1);\r\n        myled = 0;\r\n        wait(0.1);\r\n    }\r\n}\r\n"
                                  },
                                  {
                                      "file_name" :   "inc_blink.h",
                                      "content" : "\nclass Blink\n{\npublic:\n\tvoid start();\t\n};"
                                  }
                            ]
                      }
                   ]
                }

  * Kompilace:
    * Je možná nad verzí C_programu nebo samostatně (třeba pokusné okno playground)

    Komentář:  Workflow kompilace je o tom nedříve napsat kód, zkompilovat ho a pokud je kompilace úspěšná,
    nahrát jí na hardware. Tyrion má buffery na kompilace a nějaký fičury navíc, ale to asi zatím není důležité.
    Spíše je to připravené pro budoucnost.

    Zkompilovat kod:

        POST  {{url}}/compilation/c_program/version/compile
        POST  {{url}}/compilation/c_program/version/compile/{version_id} (je vyžadováno aby byla verze uložena)

        body: Zasílá se stejný JSON jako při updatu

        PS: Zatím není vyřešeno jak zachytit zkompilovaný kod v "playground" a nahrát ho na HW. (Ale chtěl bych to taktéž,
        takový playground i s HW třeba na prezentaci )

   Odpověď je buď
        {
          "state": "ok",
          "code": 200,
          "message": "když tu něco je, asi zobraz uživateli"
        }
    nebo (To je co vrací kompilátor) - Problém je že nevím co vrací (dokumentace není), prostě ti to přepošlu
          Ale jde z toho vyseparovat spoustu zajímavých věcí. Tady byl třeba problém že odsazení na další řádek
          " /n "  neobsahovalo lomítko.
        [
          {
            "filename": "e8d34460-8ec2-49e3-bbac-045490082b0e.cpp",
            "line": 18,
            "column": 2,
            "type": "error",
            "text": "'n' does not name a type",
            "codeWhitespace": "  ",
            "code": "n // komentar 2 ",
            "adjustedColumn": 0,
            "startIndex": 0,
            "endIndex": 101
          }
        ]

    Nahrát kompilaci na HW:

        POST  {{url}}/compilation/c_program/version/uploud/{version_id} (je vyžadováno, aby byla verze zkompilována)
        (Tady mám představu dvou tlačítek "Zkompiluj" a když je to úspěšné "Nahraj na HW".
        Pro odzkoušení je na konci metody vynechán řádek pro nahrátí přímo na HW který není připojen momentálně a je to becki vracena ok odpověď.

        body:
             {
                 "board_id" : ["1", "2"]
             }






----


### Oprava Bugů ###

 * fixed [TYRION-243](http://youtrack.byzance.cz/youtrack/issue/TYRION-243)
 * fixed [TYRION-242](http://youtrack.byzance.cz/youtrack/issue/TYRION-242)
 * fixed [TYRION-237](http://youtrack.byzance.cz/youtrack/issue/TYRION-237)
 * fixed [TYRION-118](http://youtrack.byzance.cz/youtrack/issue/TYRION-118)
 * obsolate [TYRION-190](http://youtrack.byzance.cz/youtrack/issue/TYRION-190)
 * fixed [TYRION-222](http://youtrack.byzance.cz/youtrack/issue/TYRION-222)

 Nazelezné bugy:
  1) U vrácení verze při updatu se vrací duplicitně stejná dvě id
  2) Při smazání verze dojde i ke smazání C_programu

-----

### TODO ###

  * TODO 13 Důležité je dodělat ORM dokumentaci ve SWAGGERU pro kompilaci!
  * TODO 14 AzureStorageLink a azurePackageLink přesunout pod Version_object!!! Už je to neudržitelný!!!
  * TODO 16 Mazání souborů na Azure
  * TODO 15 Verzování nasadit i na M_Program!
  * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
  * TODO 12 Tomáš Z.: Dodělat možnost obnovení hesla
  * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
  * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
  * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
  * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
  * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
  * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona



-----

# Verze 1.06.4 #
####  29.4.2016 ####

-----

 * Doplnění funkce připojování Blocko (homer) serverů - podpora vytváření nstancí atd..
    - 4 NOVÉ API [(External Server)](http://swagger.byzance.cz/#/External_Server) pro vytváření objektů zastupující připojené servery

 * Podpora pro kompilační servery (ty budou vždy naše) - ale je už od začátku pamatováno na škálování takových serverů a rovnoměrné zatížení
    - 4 NOVÉ API [(External Server)](http://swagger.byzance.cz/#/External_Server) pro vytváření objektů zastupující připojené servery

 * Podpora přihlášení Becki pomocí tokenu - možnost více přihlášení jednou osobou (vyřešené routování)
     - čeká se na požadavky z Blocko serveru co kam přeposílat
 * Oprava přihlášení - po přihlášení (zaslání hesla a emailu) je vrácen pouze token a je vyžadován další request na který jsou vráceny všechny původní informace
 * Nově implementovaný návrh filtru a stránkvání velkých seznamů
 * Doplnění dokumentace na wiki
 * Opravy v ProgramingPackageController - zejména logování chyb - změna u všech metod


-----

### TODO ###

 * TODO Dodělat všude!!!

        @Entity
        @ApiModel( value =
                "<h3>Permissions:</h3>" +
                "<span style=\"color: green\">"    + M_Project.create_permission_docs +  "</span>" +
                "<br><span style=\"color: blue\">" + M_Project.read_permission_docs +    "</span>" +
                "<br>"
        )
        public class M_Project extends Model {

 * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
 * TODO 12 Tomáš Z.: Dodělat možnost obnovení hesla
 * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
 * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
 * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
 * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
 * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
 * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona

-----

### Vyřešené TODO ###
 * Dokumentace pro Filtr get Homer Filter parametr a stránkování stránkování (Tomáš Z.)
 * Dodělání filtr návrhového vzoru a stránkování (univerzální a kopírovatelné řešení napříč projektem + dokumentace )
 * Odpojení M_Programu a Blocko_programu
-----

### Oprava Bugů ###

 * fixed [TYRION-203](http://youtrack.byzance.cz/youtrack/issue/TYRION-203)
 * fixed [TYRION-235](http://youtrack.byzance.cz/youtrack/issue/TYRION-235)
 * fixed [TYRION-236](http://youtrack.byzance.cz/youtrack/issue/TYRION-236)
 * fixed [TYRION-239](http://youtrack.byzance.cz/youtrack/issue/TYRION-239)
 * fixed [TYRION-238](http://youtrack.byzance.cz/youtrack/issue/TYRION-238)
 * fixed [TYRION-198](http://youtrack.byzance.cz/youtrack/issue/TYRION-198)
 * fixed [TYRION-230](http://youtrack.byzance.cz/youtrack/issue/TYRION-230)
 * fixed [TYRION-228](http://youtrack.byzance.cz/youtrack/issue/TYRION-228)
 * fixed [TYRION-232](http://youtrack.byzance.cz/youtrack/issue/TYRION-232)
 * fixed [TYRION-231](http://youtrack.byzance.cz/youtrack/issue/TYRION-232) -> Vázané issue [HOMER-3](http://youtrack.byzance.cz/youtrack/issue/HOMER-3)
 * fixed [TYRION-227](http://youtrack.byzance.cz/youtrack/issue/TYRION-227)
 * Obsolate [TYRION-233](http://youtrack.byzance.cz/youtrack/issue/TYRION-233)
 * Neřešitelné [TYRION-219](http://youtrack.byzance.cz/youtrack/issue/TYRION-219)
 * Zamítnuto [TYRION-216](http://youtrack.byzance.cz/youtrack/issue/TYRION-216)
 * Zamítnuto [TYRION-234](http://youtrack.byzance.cz/youtrack/issue/TYRION-234)
 * fixed [TYRION-142](http://youtrack.byzance.cz/youtrack/issue/TYRION-142) <-> [TYRION-155](http://youtrack.byzance.cz/youtrack/issue/TYRION-155)




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Verze 1.06.2 #
####  19.4.2016 ####

-----

### Oprávnění ###

 * Dolaďování oprávnění nad objekty - a evidence všech oprávnění do databáze přes ENUM statické klíče nad objektem
 * Odstranění části nevhodně použitých anotací pro Swagger "Permission"
 * Navržení vzoru jak dokumentovat statické klíče
 * Definování a sjednocení vzhledu a umístění proměných na všech DB modelech


-----

### Oprava Bugů ###

 * fixed [TYRION-183](http://youtrack.byzance.cz/youtrack/issue/TYRION-183)
 * fixed [TYRION-206](http://youtrack.byzance.cz/youtrack/issue/TYRION-206)
 * fixed [TYRION-207](http://youtrack.byzance.cz/youtrack/issue/TYRION-207) Netestováno!!
 * fixed [TYRION-205](http://youtrack.byzance.cz/youtrack/issue/TYRION-205)
 * fixed [TYRION-204](http://youtrack.byzance.cz/youtrack/issue/TYRION-204)
 * fixed [TYRION-217](http://youtrack.byzance.cz/youtrack/issue/TYRION-217)
 * fixed [TYRION-217](http://youtrack.byzance.cz/youtrack/issue/TYRION-217)
 * fixed [TYRION-211](http://youtrack.byzance.cz/youtrack/issue/TYRION-211)
 * fixed [TYRION-212](http://youtrack.byzance.cz/youtrack/issue/TYRION-212)
 * fixed [TYRION-196](http://youtrack.byzance.cz/youtrack/issue/TYRION-196)
 * fixed [TYRION-173](http://youtrack.byzance.cz/youtrack/issue/TYRION-173)
 * fixed [TYRION-203](http://youtrack.byzance.cz/youtrack/issue/TYRION-203)
 * fixed [TYRION-203](http://youtrack.byzance.cz/youtrack/issue/TYRION-209)
 * fixed [TYRION-210](http://youtrack.byzance.cz/youtrack/issue/TYRION-210)
 * fixed [TYRION-201](http://youtrack.byzance.cz/youtrack/issue/TYRION-201)
 * fixed [TYRION-200](http://youtrack.byzance.cz/youtrack/issue/TYRION-200)
 * fixed [TYRION-191](http://youtrack.byzance.cz/youtrack/issue/TYRION-191)
 * fixed [TYRION-186](http://youtrack.byzance.cz/youtrack/issue/TYRION-186) Feature (List all users)
 * fixed [TYRION-192](http://youtrack.byzance.cz/youtrack/issue/TYRION-192)
 * fixed [TYRION-210](http://youtrack.byzance.cz/youtrack/issue/TYRION-210)
 * fixed [TYRION-194](http://youtrack.byzance.cz/youtrack/issue/TYRION-194)
 * fixed [TYRION-195](http://youtrack.byzance.cz/youtrack/issue/TYRION-195)
 * fixed [TYRION-113](http://youtrack.byzance.cz/youtrack/issue/TYRION-113)
 * fixed [TYRION-114](http://youtrack.byzance.cz/youtrack/issue/TYRION-114)
 * fixed [TYRION-116](http://youtrack.byzance.cz/youtrack/issue/TYRION-116)
 * fixed [TYRION-185](http://youtrack.byzance.cz/youtrack/issue/TYRION-185)
 * fixed [TYRION-187](http://youtrack.byzance.cz/youtrack/issue/TYRION-187)
 * fixed [TYRION-199](http://youtrack.byzance.cz/youtrack/issue/TYRION-199)
 * fixed [TYRION-197](http://youtrack.byzance.cz/youtrack/issue/TYRION-197)

### TODO do další verze ###

 * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
 * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
 * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
 * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
 * TODO 7 Tomáš Z.: Dodělat disconnect http://youtrack.byzance.cz/youtrack/issue/TYRION-169
 * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
 * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona
 * TODO 10 [TYRION-186](http://youtrack.byzance.cz/youtrack/issue/TYRION-186)
 * TODO 11 Dodělat na všech filtrech stránkování (vhodné by bylo vymyslet univerzální a kopírovatelné řešení napříč projektem)




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Verze 1.06.1 #
####  17.4.2016 ####

### Tyrion a nový DashBoard ###
 * Nasazení designu pro zobrazení a ovládání základních elementů serveru. Slouží k zobrazení informací a pro vývojáře navázané na Tyrion.
    * Správa zařízení připojených přes WebSocket
    * Možnost Reportování serverem zachycených chyb na Youtrack.
    * Kvalitní verzované Readme s podporou formátování



Rádi bychom vydali i integrovanou a verzovanou API dokumentaci, kde by šlo porovnávat na kterých obejktech došlo ke změně - ale to je pro nedostatek skillu ohledně vykreslování a javascriptu ze strany týmu Tyrion odloženo na dobu
neurčitou. Každopádně každý nápad jak posunout Tyriona kupředu jsou vítány.

-----

### Oprávnění ###
 * Bylo implementováno (z větší části) oprávnění pro tvorbu a úpravu objektů. Během implementace nové verze do Becki by bylo vhodně dát zpětnou vazbu a představy o potřebách dokumentace. Směrodatná (vývojová - pro Tyrion tým) je
   [docu](https://wiki.byzance.cz/wiki/doku.php?id=tyrion_permission). Logika je řešena na úrovni objektu a tak není potřeba cokoliv programovat do Controlleru - pouze požádat o ověření samotný objekt.

-----

### Přidání systému Loggy pro logování chyb
 * Změna konfigurace Logbacku
 * Zapnutí logování SQL příkazů

-----


### Práva nových notifikací ###
(připraveno pro implementaci na straně frontend)

 * Proběhla implementace ukládání notifikací v případě, že uživatel nebyl zastižen k zaslání. Cílem bylo vytvořit API,
  na které se frontend po svém obnovení dotáže pro seznam notifikací v době nepřítomnosti uživatele. Vracím seznam maximálně 25
  notifikací. Pokud jich je více - stránkuji. Každá notifikace za měsíc vyexpiruje (Systém jí smaže). Takže uživatel se může
  podívat až měsíc dozadu.

 * Mezi řádky. Redhat má jen 2/7 produktů otevřené komunitě (linux a Jboss) a jako opensource. :D U ostatních je to těžce komerční zpropadená korporace :D
  a z výroční zprávy akcionářům vyplývá, že na produktech, které jsou otevřené vydělává jen 37% peněz. (Rok předtím to bylo 44%)  :D

 * V případě že notifikaci doručím přihlášenému uživateli jí stejně uložím do systému jako historii.

 * Objekt je zdokumentován ve Swaggeru. Přibyl parameter "read" značící, zda si ho uživatel už přečetl. Je to poměrně jednoduché.
  V případě prvního zaslání nepřečtené notifikace je parameter read = false. A v případě znovu zavolání je už označen jako read = true.
  Je to uděláno úplně stejně jako na Azure - že po F5 prohlížeče je notifikace chápána jako přečtená.

 * Některé notifikace mají v parametru "confirmation_required". Což znamená, že Tyrion požaduje jejich potvrzení!
  Například informování o odstávce. O vypršelé kreditní kartě atd. V případě že uživatel neodkliknul potvrzení (Api pro potvrzení)
  tak mu Tyrion danou zpávu zašle znovu při dalším přihlášení dokud to nepotvrdí. :D ( Big brother is watching you! ) :D


 * Při přihlášení uživatele zároveň přibyly 3 parametry, které lze vykreslit do šablony.
    * První je počet nových událostí (notifikací) "unread_notification"
    * Druhý je počet nepřečtených zpráv "unread_message". Vize zpráv je pro komunitu a jejich projekty. Nebo pro připisování poznámek
      k úpravám kódu atd. pokud na projektu pracuje více uživatelů. Vize zatím nic na Tyrionovi není implementováno.
    * Tickety technické podpory "unread_ticket" - právě probíhá implementace do Tyriona skrze zendesk (nástroj třetí strany na technickou podporu)

  * Notifikace se také zasílají všem uživatelům, kterých se to týká. (sdílený projekt, homer.. komunitní projekt, připsání
  nového komentáře atd.

  * #### úprava linku u získání SEE ####

        GET  /notification/:identificator  -------> GET  /notification/connection/:identificator

  * Přidání API pro získání posledních notifikací ( obsahuje i to, co se jako notifikace nemusí uživateli odesílat)
      například changelog jeho portfoli.  Pokud se zavolá první api - vrátí to seznam od poslední po první s omezením
      na 25 prvků. Pokud chce ít uživatel hlouběji v notifikacích na konec url se připojí číslo ze seznamu stránek
      uvedených v JSON.

        GET             /notification/list
        GET             /notification/list/{page_number}
        DELETE          /notification/{notification_id}
        PUT             /notification/confirm/{notification_id}

-----

### EVIDENCE PŘIHLÁŠENÍ ###
(připraveno pro implementaci na straně frontend)

      GET      /coreClient/connections
         - Vrátí seznam všech přihlášení, kde je stále platný token - uživatel má možnost ho deaktivovat.

      DELETE   /coreClient/connection/:connection_id
         - API pro jeho trvalou deaktivaci (možnost deaktivovat i mobilní zařízení)
         - Je ale nutné Tomášovi specifikovat,jak by měl asi rozlišovat jednotlivá spojení????? Radku?


-----

### Oprava Bugů ###

 * fixed [TYRION-183](http://youtrack.byzance.cz/youtrack/issue/TYRION-183)
 * fixed [TYRION-181](http://youtrack.byzance.cz/youtrack/issue/TYRION-181)
 * fixed [TYRION-193](http://youtrack.byzance.cz/youtrack/issue/TYRION-193)
 * fixed [TYRION-189](http://youtrack.byzance.cz/youtrack/issue/TYRION-189)

------
