
# Verze 1.06.6.4 #

## Nové API: ##
 * Pro získání objektů c_program, b_program, typeOfBlock a blockoBlock pomocí filtru byly vytvořeny následující API:

		PUT  {{url_Tyriona}}/compilation/c_program/list/{page_number}
		PUT  {{url_Tyriona}}/project/b_program/list/{page_number}
		PUT  {{url_Tyriona}}/project/blockoBlock/list/{page_number}
		PUT  {{url_Tyriona}}/project/typeOfBlock/list/{page_number}

 * Metody vyžadují JSON, který je buď prázdný (vyjma typeOfBlock), chceme-li získat nefiltrované objekty nebo obsahuje "project_id", chceme-li filtrovat podle daného projektu. Žádná další kritéria zatím nejsou implementována. Všechny API vrací pouze list max. 25 objektů, po stránkách page_number. Vrací také pouze ty výsledky, které se týkají přihlášeného uživatele, proto není třeba kontrolovat oprávnění. Jediná výjimka je u objektu typeOfBlock, kde JSON v request obsahuje položku:

		"private_type":"true_or_false"

 * kde vrací buď veřejné typy bločků, když "false" nebo soukromé, když "true".
 * API vrací JSON v takovém tvaru:

		{
			"content": [{}],
			"from": 0,
			"to": 0,
			"total": 0,
			"pages": [0]
		}

 * Pokud není nic nalezeno vrátí prázdný list content. Obdobně jako u jiných filtrů. Podrobnější dokumentace ve swaggeru.

-----

## Notifikace vyžadující potvrzení ##
 * Kvůli notifikacím vyžadující potvrzení je nutné po přihlášení uživatele zavolat API:

		GET  {{url_Tyriona}}/notification/unconfirmed

 * Metoda vrátí code 200 a pokud jsou notifikace, které by měl uživatel potvrdit, znovu je odešle.
 * Tyto notifikace obsahují link do Tyriona, kterým se notifikace potvrdí.

-----

## Link na Becki [TYRION-325](http://youtrack.byzance.cz/youtrack/issue/TYRION-325) ##
 * Všechny linky, které vytvoří Tyrion a odkazují na Becki, budou používat lomítka namísto path values. Takže např. link:

		{{url_Becki}}/passwordRestart&token="password_recovery_token"

 * se změní na:

		{{url_Becki}}/passwordRestart/{password_recovery_token}


-----

## Velké změny FLOW uživatele Becki ##
V předchozích verzích byl nejvyšším objektem u uživatele **Project**, nyní se odsouvá pod objekt **Produkt**. Jde o to, že na začátku si uživatel vybrete jaký chce tarif - zda free, Alfu, nebo placený (různé balíčky). Po vybrání tarifu pokud je zdarma se okamžitě vrátí objekt *Product*, pokud tarif vyžaduje nějakou formu zaplacení vrátí se url_link  an GOPay bránu. (Další komentář k platbě v samostatném bodu této dokumetnace). Po zaplacení se uživatel z platební brány přesměruje opět na Becki (/payment/success nebo /payment/fail). Pak má uživatel možnost vytvářet objekty *Project* pod objektem *Product* (U tvorby Projektu je tedy vyžadováno nově product_id). To je v koste vše.

Tyrion má už implementované samostatné strhávání pěnez z účtu každý měsíc podle toho kdy se uživatel registroval. Vytváří faktury a další (toto patří do nové sekce Finacial v Becki)


   * ### Objekt *Product* ###
	
	* Pokud uživatel nemá žádný *Product* nebo **Project** (protože nemusí být vlastník produkt ale jen spolupracovník na projektu)
	
			(API -  GET: {{url}}/project/project  - vrátí všechny projekty uživatele do kterých má přístup  )
	
			(API -  GET: {{url}}/product/tarifs/user_applicable  - vrátí všechny tarify pod kterými může uživatel vytvářet nové projekty )
	
	
		* a) Zobrazí se mu nabídka tarifů, které si může vybrat a zaregistrovat. 	
		
				API- GET: {{url}}/product/tarifs/for_registration - vrátí seznam všech Tarifů)
			
		* b) Zobrazí se mu jeho projekty (nebo jen tlačítko přidat první - viz náhled vc chodbě)
		
				(API -  GET: {{url}}/project/project  - vrátí všechny projekty uživatele do kterých má přístup  )
	
	* Může vytvářet další nové 
	
		* a) Personal  (na základě API  **GET {{url}}/product/tarifs/for_registration ** kde v Json "company_details_required" : false není potřeba uvádět company_xxxxx hodnoty)
		
			* Request
			
					{
				
					  "tariff_type" : "alpha",
					  "product_individual_name" : "Pepkova Alfa",
					  "payment_mode": "free",
					  "currency_type" : "CZK",
					  "city": "Prague",
					  "country": "Czech Republic",
					  "street_number" : "17",
					  "street": "Karlovo Náměstí",
					  "zip_code": "120 00"
 
					}
				
			
			* Result

					{
					  "id": 22,
					  "product_individual_name": "Pepkova Alfa",
					  "paid_until_the_day": 1485730800000,
					  "remaining_credit": 0,
					  "currency": "CZK",
					  "invoices": [],
					  "payment_details": {
					    "id": 22,
					    "company_account": false,
					    "street": "Karlovo Náměstí",
					    "street_number": "17",
					    "city": "Prague",
					    "zip_code": "120 00",
					    "country": "Czech Republic",
					    "edit_permission": true
					  },
					  "product_type": "Alpha - Temporal limitation",
					  "payment_mode": "Free Account",
					  "payment_method": "Not set yet"
					}

	
		* b) Enterprise (Kde se mění pouze detaily a obsah v objektu **Payment_Details**) 
			
			* Request
				
					{

					  "tariff_type" : "business",
					  "product_individual_name" : "Můj Tier 1",
					  "currency_type" : "CZK",
  
					  "city": "Prague",
					  "country": "Czech Republic",
					  "street_number" : "17",
					  "street": "Karlovo Náměstí",
					  "zip_code": "120 00",
    
					  "registration_no" : "4898956465465", 
					  "vat_number" : "CZ12345678" ,
					  "company_name" : "Seznam s.r.o" ,
  
					  "company_authorized_email" : "seznam@seznamsdfsdf.cz",
					  "company_authorized_phone" : "78978979879899",
					  "company_web" : "www.google.com",
					  "company_invoice_email" : "seznam@seznamdsfsdf.com",
    
					  "payment_mode" : "monthly", 
					   "payment_method" : "credit_card"    
					}
				
			* Result
				
					{
					  "gw_url": "https://gw.sandbox.gopay.com/gw/v3/36a8ae8711ad117115045d212004be7e"
					}
			
			
	
	### Objekt Tariff ### 
	
	Pokud nemá uživatel **Product** ani **Project** zobrazí se na úvodní straně Tariff. Json obejkt obrasuje jednak tariffs a  zadruhé packages, Packages jsou dodatečné balíčky, které lze přikupovat k hlavním tarifům. (Ale momentálně je Tyrion nepodporuje v platební bráně - proto navhruji je zatím ignorovat  a tvářit se že tam nejsou.).
	
	Pole <Individuals_Tariff> tariffs je tvořen objekty, jež tvoří nabídku jendotlivých tarifů pro uživatele. Pro Becki tým jsme to udělali, tak, ževám může být úplně jedno co za pole tarifů přijde a co obsahují. Prostě je zobrazíte a do tlačítka pro uživatele (Vybírám si tento tarif) identifikátorem daného objektu pak tarif zaregistrujete. Může vám  být jedno jak vypadá, kolik toho obsahuje atd.. (Jednodušeji to už nejde :P ) Výhodou tohoto řešení je, že mužu vracet různé tarify s různými cenami podle toho z jaké země je uživatel :D :D Němci to budou mít hold dražší :D 
	
			API- GET:  {{url}}/product/tarifs/for_registration - Vrat tarify pro registraci 

	Vypadají takto:

			{
			  "tariffs": [
			    {
			      "tariff_name": "ALPHA",			(Jméno tarifu pro uživaatele)
			      "identificator": "alpha",			(Identifikátor tarifu který mi zašlete pro registraci)
			      "company_details_required": false,	(pokud true tak je nutné v obejtku Payment_Details uvést values s prefixem comapny_ (jako je danové číslo atd...))
			      "required_payment_mode": false,		(Slouží do budoucna - asi třeba ke zobrazení obrázku kreditní karty?)
			      "price": {
			        "CZK": 0,				(Můžete přepínat mezi CZK, EUR - přibudou další měny - jde o to že takhle sami řídíme zaokrouhlování  0.99€ 29Kč 1.49$ atd,,)
			        "EUR": 0
			      },
			      "labels": [				(Podle obrázku na stěně vidíte co tarif obsahuje. Nemusíte tedy řešit co jen to for cyklem zobrazíte :D - Tyrion tam pak nacpe informace typu (Maximáně 10 IoT), (Neomezený IoT) at.... )
			        {
			          "label": "adsfsdfasdf",
			          "description": "sdfasd lkjsadflkjhjklsdfsadf"
			        },
			        {
			          "label": "label 2",
			          "description": "sdfasd lkjsadflkjhjklsdfsadf"
			        },
			        {
			          "label": "label 3",
			          "description": "sdfasd lkjsadflkjhjklsdfsadf"
			        }
			      ]
			    },.. (+++ další tarify).... 
			
			
		

   * ### Objekt *Invoice_item* ###
 	Je objekt popisující fakturu - Ta může nabívat několik stavů. To je vesměs zatím jedno jakých. (V budoucnu asi bibude nějaký MARK ze strany Tyriona na barevné zvýraznění )
	
	Json obsahuje dvě zajímavé hodnoty mimo ostatních co mají ve swaggru dokumentaci: 
	
	* pdf_link  - Je přítom jen jestli faktura existuje a lze jí stáhnout. Je to celá URL! A slouží ke stažení souboru uživatli do PC (JE to PDF btw). 
	
	* require_payment - boolean  - (true) tak to zančí že není zaplacená a vyžaduje zaplacení, jde o to že Tyrion sám strhává peníze. Pokud se mu to nepodaří pošle uživateli email s žádostí o zaplacení. (Tyrion si řeší důvody sám) Po kliku na link z Emailu se mu uživateli zobrazí stránka s finančním přehledem. (Fakturami - kde by nezaplacená faktura měla být vidět (asi je to chronologicky seřazené, takže je nahoře)) - Ještě mu pošu při přihlášení notifikaci aby to taky nepřehlédnul!!! :D 
	* API pro zaplacení  se dá zavolat nad fakturou pokud **require_payment = true**.

			API- GET:  {{url}}/product/invoice/pay/:invoice_id   -> vrátí GoPayURL k otevření goPay platební brány! 


### Oprava Bugů ###
 * fixed [TYRION-332](http://youtrack.byzance.cz/youtrack/issue/TYRION-332)
 * fixed [TYRION-105](http://youtrack.byzance.cz/youtrack/issue/TYRION-105)
 * fixed [TYRION-307](http://youtrack.byzance.cz/youtrack/issue/TYRION-307)
 * fixed [TYRION-105](http://youtrack.byzance.cz/youtrack/issue/TYRION-105)
 * fixed [TYRION-326](http://youtrack.byzance.cz/youtrack/issue/TYRION-326)
 * fixed [TYRION-327](http://youtrack.byzance.cz/youtrack/issue/TYRION-327)
 * fixed [TYRION-314](http://youtrack.byzance.cz/youtrack/issue/TYRION-314)
 * fixed [TYRION-252](http://youtrack.byzance.cz/youtrack/issue/TYRION-252)
 * fixed [TYRION-284](http://youtrack.byzance.cz/youtrack/issue/TYRION-284)
 * fixed [TYRION-336](http://youtrack.byzance.cz/youtrack/issue/TYRION-336) 
 * fixed [TYRION-337](http://youtrack.byzance.cz/youtrack/issue/TYRION-337)
 * fixed [TYRION-338](http://youtrack.byzance.cz/youtrack/issue/TYRION-338) 
 * fixed [TYRION-342](http://youtrack.byzance.cz/youtrack/issue/TYRION-342)
 * fixed [TYRION-339](http://youtrack.byzance.cz/youtrack/issue/TYRION-339)
 * fixed [TYRION-343](http://youtrack.byzance.cz/youtrack/issue/TYRION-343)
 * fixed [TYRION-330](http://youtrack.byzance.cz/youtrack/issue/TYRION-330)
 * fixed [TYRION-286](http://youtrack.byzance.cz/youtrack/issue/TYRION-286)


### Změny nad Objekty ###
	
	Detaily lze dohledat v DIFF toolu. Zde je soupis toho co vám změní funkcionalitu - ostatní je doplňování, zpřesňování, nebo orpava gramatiky v dokumentaci 

	* **Project** 
	Díky tomu, že uživatelé teď přidávají další uživatele do projektu pomocí emailu a to né hned automaticky ale až po potvrzení druhou stranou (a to díky notifikacím) je upravený seznam participujících - tak aby bylo vidět jméno, email a id a stav (v Textové podobě -aby jste nad tím nemuseli dělat žádné operace)
		
		* odstraněno pole participans_id
		* nahrazeno polem participants (List **[Project_participant]** )
			"participans" : [
						{
						  "full_name" : "Pepa Novák,"
						  "user_mail" : "novak@pepa.ck"
						  "user_id"   : "122"
						  "state"     : "Project Owner"	
						},
						{
						  "full_name" : "Jonathan Kudlanka"
						  "user_mail" : "novak@pepa.ck"
						  "user_id"   : "122"
						  "state"     : "Project Memeber"	
						}
						{
						  "full_name" : ""
						  "user_mail" : "karel@got.cz"
						  "user_id"   : ""
						  "state"     : "WPending approval"	
						}		
					]
					
			
	* **Board**
	Přidány parametry 
		* up_to_date - zda je zařízení v nejposlednější verzi 
		* status - úprava objektu 
		
	* **TypeOfBoard
	Přidány parametry
		* processor_name (aby se nemusel načítat celý objekt - ale sloužilo to jen k prokliku)
		* producer_name (aby se nemusel načítat celý objekt - ale sloužilo to jen k prokliku)
	
	* **C_program
	Přidány parametry
	 	* producer_name (aby se nemusel načítat celý objekt - ale sloužilo to jen k prokliku)
		
	* **Project**
	Přidány parametry
	 	* product_id (aby se nemusel načítat celý objekt - ale sloužilo to jen k prokliku)
		* product_individual_name ((aby se nemusel načítat celý objekt - ale sloužilo to jen k prokliku))     
		 
	* **Actualization_procedure** 
	Přidány parametry
		*  state_fraction - String = "13/78"
		*  state_percentage - Integer 55 
		
	* **C_Program_Update_Plan**
	Přidán parametr 
		* Objekt Server_detail
		* Objekt Board_detail 	
		
	* **Notification** 
	Změněn název labelu 
		* read -> was_read
	
	* **Cloud_Homer_Server**
	Přidány parametry	
		* is_private -> zda je privátní pouze daného zákazníka
			
	  	 
### Změny nad API ###

 * Odstraněna API  **GET:**  {url}/file/fileRecord/{file_record_id}  
 * Přidání HTTP state u **PUT** {url}/compilation/c_program/version/compile/{version_id}
 	* 200 - Compilace úspěšná
	* 422 - Compilace neúspěšná  - důvody v Json
	* 478 - Alrernativa k 500 (ale že je chyba na serveru externí strany)
	
 * Odstraněna API (Zakryta pro přístup pro Becki a nyní povolena jen a pouez Frontendu Tyriona)
 * Upravena API **POST** {{url}}/project/project - Vyžaduji o parametr navíc product_id (které vracím při získání dostupných produktů)
 * Upravenen objekt který vracím -> Notification_List "unread_total" = 12 (celkem nepřečtených zpráv)
 

## Strom Objektů pro přehled ### 

		User
			- Notifikace
			- Detaily uživatele
		Produkt
			- Projekt
				- C_Program (Firmware)
					-Verze
				- B_Program (Blocko)
					-Verze
					- Intance
				- M_Project (Grid)
					- Verze
						- M_Program (App)
							- Verze
					- Type_of_Screen 
				- Blocks (Skupiyn Bločků)
					Block (Blok)
						-Verze
				
				- Actualization Procedures (Aktualizační prcedury)
					- Procedure
						- Task (HW + Frimware a State)
				Board
			
				Logs
				
				
			-Knihovny
				- Knihovna
					- Verze 
			-Finamce
				- Faktury
				- Firmení detaily
				- Platební detaily
				







# Verze 1.06.6.3 #
####  18.6.2016 ####
-----

1.
Cílem této verze bylo vyřešit všechny problémy, které trápí vývojáře Becki a nastavit po meetingu nové standardy vývoje. Jde především o zapisování změn, hotový a použitelný changelog a difftool přístupný mezi posledními dvěma verzemi. Slouží jak vývojářům Becki, Tyrionu, tak navázaných (GRID aplikací). Tomáš si podle něj také kontroluje co všechno se mohlo posrat.

2.
Podle tracku [TYRION-261](http://youtrack.byzance.cz/youtrack/issue/TYRION-261) bylo doimplementováno, jak odhlásit příjímaný stream z instanci Homer serveru. Což vede k tomu, že až teď jde teoreticky odebírat více instancí najendou. Jedinným rozdílem příkazu odebírání "subscribe" je "unsubscribe"
		
3.
Doplnění Dokumentace a popisu k novým Api jež slouží k zobrazení aktualizací HW. 

4.
Byl vyřešen problém s možným bezpečnostním rizikem připojení na websocket prozrazením adresy. [TYRION-260](http://youtrack.byzance.cz/youtrack/issue/TYRION-260)
Pro připojení je nutné nejdříve požádat s vaším authTokenem na zabezpečené API o token, jenž složí jako proméná do URL pro přihlášení.
Tento token je jednorázový a nelze se s ním připojit dvakrát. Má také životnost oscilující kolem 5 vteřin (je tam bráno v úvahu zatížení serveru)
[SWAGGER API](http://swagger.byzance.cz/#!/Access/get_Websocket_token)

5.
[TYRION-303](http://youtrack.byzance.cz/youtrack/issue/TYRION-303)
Přechod Notifikací na WebScoket - (Před implementací je prerekvizita funkčního notifikačního centra postaveného na WebSocketu). Tímto Backend uzavírá všechny předchozí bugy spojené s notifikačním centrem Přes SSE za zastaralé a dále nepodporované. A nadále předpokládá využívání Websocketu)


6.
Notifikace

 * Pro odběr notifikací je nutné se přihlásit k odběru Websocketu pomocí vyžádání si tokenu pro přihlášení (viz předchozí bod 4.)

 * Požádat Tyrion o zasílání notifikací - Z důvodu podpory více přihlášení jednoho uživatele se přihlášení provede jen na tom spojení přihlášeného uživatele, které si o to požádá!

		 {
		 	"messageChannel" : "becki",
			"messageType"    : "subscribe_notification",
			"messageId"      : " some random message nuber for response"
		 }


 * Odhlášení probíhá obdobně


		{
			"messageChannel" : "becki",
			"messageType"    : "unsubscribe_notification",
			"messageId"      : " some random message nuber for response"
		}


 * Po té Becki začne dostávat stream notifkací. Ty josu postaveny na paternu skládání zpráv z jednotlivých objektů v JSON. Dokumentace je na http://documentation.byzance.cz v sekci REST-API -  v případě dotazů bude dokumentace doplněna


7.
Parametr OPTION
Každý objekt byl v Tyrionovi pečlivě definován a zmizel tak parametr Option, kde se vyskytuje je to bráno tak, že to tak má být. Doporučujeme do začátku rychlou zprávu přes Yammer (Dotaz jestli se vám něco nezdá, než hned to reportovat)


8.
Doplnění podpory aktualizačních Tasků
Pokud uživatel  updatuje (dá příkaz k nahrátí blocka s Hardwarem a na něm spárovaná verze C_Programu), nebo nahraje sám C_program verzi na hardware, nebo pošle svojí vlastní binárků. Vytvoří se takzvaná *Aktualizační procedura* -> Actualization_procedure.

Ta  obsahuje mimo jiné

   * "id" - zatím nesloužící k ničemu

   * "state": (Mezi něž patří následujících 5  možností successful_complete až in_progress)

	* 'successful_complete'  -> State where all inner procedures was absolutely successful
	* 'complete' -> State where all inner procedures was successfully OR overwritten with newer version
	* 'complete_with_error' -> State like \"complete\" but some update plans had Error
	* 'canceled' -> State where user canceled procedure, but remember that some update plans might be already made (had some state)
	* 'in_progress -> State where procedure is in progress

   * "date_of_create"  -> datum zahájení procedury
   * "date_of_finish"  -> datum ukončení procedury - pozor, pokud procedura nebyla ukončena - je obsah null!!!!


   * "b_program_actualization" : je objekt umožnující propojení pod jakou Instancí Blocka (Verze B_Programu a samotného B_programu) - Frontend má k dispozici jména verze i programu a jejich id (To aby jste mohli uživatelovi zprostředkovat link na stránku verze nebo programu)

   * "updates" : Je pole jednotlivých tasků aktualizační procedury - na každý jeden kus křemíku je jeden objekt definující co je to za HW (Jeho ID) a co se na něj nahrává. Buď Binární soubor, kteýr nahrál sám uživatel, nebo zkompilovaná verze C_Programu (Resepktive verze) Je tedy nutné uživatelovi ukázat buď "jméno souboru" (není asi nutný odkaz, protože soubor je bin a tedy naprosto nečitelný) Nebo objekt "c_program_detail" - Jež obsahuje název C_programu a název verze a jejich ID aby frontend mohl vytvořit linky!


# ChangeLog #

-------

## Změny nad Api ##
V rámci dobrých vztahů mezi FrontEndem a Beckendem jsme si dovolili vás upozornit k jakým změnám došlo v API (Ostatní je pouze dokumentace!)

1. Došlo k opravě gramatiky na mnoha místech a opravě souborů, které nemění v žádném případě funkčnost kodu. Ty co mění jsou dále sepsány.

1. POST /grid/m_program/{m_project_id}
    "M_Project.create_permission":"true"  ---->  "M_Project.update_permission":"true",

2. PUT  /project/homer/filter/{page_number}
    Odpověď z chybného objektu Swagger_LibraryGroup_List na Homer_List

3. POST /compilation/library/upload/{version_id}
    Definování pro swagger, že příjmaný tělo http je "multipart/form-data"

4. PUT  /project/b_program/update/{b_program_id}
    Oprava špatně pojmenovaného souboru (Backend se snaží překrávat dlouhé dokumentační názvy tříd / objektů)
    Odpověď z chybného objektu Swagger_B_Program_Version ---> B_Program_Version


 * uploadBinaryFileToBoard)  [TYRION-301](http://youtrack.byzance.cz/youtrack/issue/TYRION-301
Jednak opraveno ale taktéž při opravě bylo vyřazeno chybně vyžadované tělo s ID zařízení, PLAY neumí přijmout soubor i Json naráz. Vyžadován momentálně pouze soubor a v URL uvedené jedno ID souboru. (PS fungovat by to mělo jako před tím, jen ten vyžadující Json tam bylo chybnou dokumentací navíc) (Tato API je taktéž výlučná - čistě pro vývojáře individuálně - masivní nahrávání bin souboru bude provedeno jinou procedurou než tato API a přibude v budoucnu)


 * Uprava C_program version [TYRION-309](http://youtrack.byzance.cz/youtrack/issue/TYRION-309)
U C_programu při ukládání nové verze byla v Json položka  "code" : "něco.." dále user_files..  ale při GET Version to bylo zabalené v user_code což nedávalo smysl a komplikovalo vám to kod (nechápu že nebylo hlášeno jako bug! - opraveno tak aby jak PUT JSON i GET JSON aby obě hodnoty korespondovaly a byly jednotné!
Value code byla přejmenována na main (Aby korespondovala se strukturou progrmaování v céčku)

		{
		 ...
		 ...
		 "main" : ..
		 "user_files" : ...
		 "external_libraries" : ...
		 }


## Feature: Obnova hesla ##

* Pokud uživatel zapomene heslo, na frontendu bude sekce pro obnovu hesla, vyplní svůj email a klikne na tlačítko pro obnovení hesla. Pomocí metody:

		POST {{url_Tyriona}}/coreClient/mail_person_password_recovery

* si zažádá o zaslaní emailu s linkem na změnu hesla, metoda vyžaduje JSON s obsahem:

		{"mail":"user@mail.com"}

 * Metoda pokaždé vrací code = 200. Pokud je email uživatele nalezen v databázi, vygeneruje se password_recovery_token a přijde mu email s adresou na frontend ve tvaru:

		{{url_Becki}}/passwordRestart/{password_recovery_token}

 * Na této adrese si uživatel vytvoří nové heslo. Adresu je možné změnit, pokud bude potřeba, stačí říct, teď je vzatá z configu Tyriona. Z frontendu přijde request:

		PUT {{url_Tyriona}}/coreClient/person_password_recovery

 * který bude obsahovat JSON s obsahem:

		{
			"mail"				:	"user@mail.com",
			"password_recovery_token"	:	"c2cf05c0-75a8-4c7c-9100-1c1bc520f0d0",
			"password"			:	"new_password"
		}


 * Token je platný 24 hodin, když uživatel rozklikne link po 24h, vrátí se odpověď code = 400 a uživatel si musí zažádat o nový email s linkem.
  Pokud je token platný, změna hesla proběhne a uživatel je všude, kde může být přihlášený, odhlášen. 
  Dále pokud uživatel klikne na tlačítko pro zaslání emailu vícekrát, tzn. že password_recovery_token je již vytvořený, budou mu chodit emaily s tímto tokenem,
  ale jen 15 minut od vytvoření tohoto tokenu. Jakmile je token starší a uživatel znovu zažádá o email, vygenerue se nový token a starý se smaže.

 * Uživatel poté dostane email, kde je mu zděleno, že obnova hesla byla úspěšná.  (Autor Lexa Tylš)


	Lexa Tylš

## Změna: Přidání uživatele do projektu ##

  API:

		PUT  {{url_Tyriona}}/project/project/shareProject/:project_id

  nyní vyžaduje v JSONu list emailů namísto id, JSON bude vypadat takto:

		{
			"persons_mail" : ["user@mail.com","example@mail.cz"]
		}

  Pokud email není zaregistrován, pošle se na něj email, ve kterém bude pozvánka do projektu a k registraci. Pokud se uživatel zaregistruje, bude automaticky přidán do projektu a nebude vyžadována autentifikace emailu.
  Pokud uživatel je zaregistrovaný, nejprve mu přijde notifikace, že ho jiný určitý uživatel pozval do daného projektu a v notifikaci budou dvě možnosti, jestli chce uživatel vstoupit do projektu nebo ne, které budou obsahovat link na následující operace.
  Když klikne na "Ano" zavolá se operace:

		PUT  {{url_Tyriona}}/project/project/addParticipant/:ivitation_id/:decision

  kde decision = true, pokud klikne "Ne", zavolá se ta samá operace, ale decision = false.

## Změna: Input Validation ##
  Zrušeny následující API: 

		GET  {{url_Tyriona}}/coreClient/person/valid/nicknamewe/:nick_name
		GET  {{url_Tyriona}}/coreClient/person/valid/mail/:mail

  namísto nich bude univerzální API:

		POST {{url_Tyriona}}/coreClient/person/validate_entity

  která vyžaduje JSON:

		{
			"key" : "mail_or_nick_name"
			"value" : "example@mail.com"
		}

  key může prozatím být jen "mail" nebo "nick_name".
  Operace vrátí JSON:

		{
			"valid" : "true_or_false"
			"message" : "for_example: Email is used"
		}



### Oprava Bugů ###

 * fixed [TYRION-185](http://youtrack.byzance.cz/youtrack/issue/TYRION-185)
 * fixed [TYRION-258](http://youtrack.byzance.cz/youtrack/issue/TYRION-258)
 * Uzavřeno [TYRION-70](http://youtrack.byzance.cz/youtrack/issue/TYRION-70)
 * fixed [TYRION-257](http://youtrack.byzance.cz/youtrack/issue/TYRION-257)
 * fixed [TYRION-257](http://youtrack.byzance.cz/youtrack/issue/TYRION-280)
 * fixed [TYRION-299](http://youtrack.byzance.cz/youtrack/issue/TYRION-299)
 * fixed [TYRION-278](http://youtrack.byzance.cz/youtrack/issue/TYRION-278)
 * fixed [TYRION-271](http://youtrack.byzance.cz/youtrack/issue/TYRION-271)
 * fixed [TYRION-277](http://youtrack.byzance.cz/youtrack/issue/TYRION-277)
 * fixed [TYRION-274](http://youtrack.byzance.cz/youtrack/issue/TYRION-274)
 * fixed [TYRION-272](http://youtrack.byzance.cz/youtrack/issue/TYRION-272)
 * fixed [TYRION-118](http://youtrack.byzance.cz/youtrack/issue/TYRION-118)
 * fixed [TYRION-128](http://youtrack.byzance.cz/youtrack/issue/TYRION-128)
 * fixed [TYRION-280](http://youtrack.byzance.cz/youtrack/issue/TYRION-280)
 * fixed [TYRION-279](http://youtrack.byzance.cz/youtrack/issue/TYRION-279)
 * fixed [TYRION-185](http://youtrack.byzance.cz/youtrack/issue/TYRION-185)
 * fixed [TYRION-187](http://youtrack.byzance.cz/youtrack/issue/TYRION-187)
 * fixed [TYRION-201](http://youtrack.byzance.cz/youtrack/issue/TYRION-201)
 * fixed [TYRION-257](http://youtrack.byzance.cz/youtrack/issue/TYRION-257)
 * fixed [TYRION-276](http://youtrack.byzance.cz/youtrack/issue/TYRION-276)
 * fixed [TYRION-273](http://youtrack.byzance.cz/youtrack/issue/TYRION-273)
 * fixed [TYRION-220](http://youtrack.byzance.cz/youtrack/issue/TYRION-220)
 * fixed [TYRION-217](http://youtrack.byzance.cz/youtrack/issue/TYRION-217)
 * fixed [TYRION-300](http://youtrack.byzance.cz/youtrack/issue/TYRION-300)
 * fixed [TYRION-105](http://youtrack.byzance.cz/youtrack/issue/TYRION-105)


### TODO ###

  * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
  * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
  * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
  * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
  * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
  * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona
  * TODO 15 Verzování nasadit i na M_Program!
  * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
  * TODO 17 Link je také v kodu http://youtrack.byzance.cz/youtrack/issue/TYRION-263
  * Propojení uživatelských účtu s wordpressem
  * Připojit místo vykompilované verze vlastní binárku a umožnit plošné aktualizování vlastní binárkou
  * Radek - ukoly: Možnost napsat plugin pro aktualizaci přes USB a plugin do Eclipsu / intellij pro možnost nahrávat na konkrétní zařízení
  * http://youtrack.byzance.cz/youtrack/issue/TYRION-271??


-----


# Verze 1.06.6 #
####  20.6.2016 ####

**Změny General:**

Nová verze přináší podporu informací z kompilátoru o bločkách (které vyseparuje kompilátor) pro využití v blocku.
To co vrátí kompilátor ja nabídnuto pro převzetí do blocka skrze výběr firmwaru, který lze na hardware nahrát. Bude pospáno níže.

Bylo opraveno a částečně implementována změna objektů verzí. Často se stávalo že ke kokrétní verzi Třeba C-Programu bylo nutné
přidat další doplňující infomrmace - například zda je verze už zkompilovana, nebo k ní má Tyrion archivovaný kompilační soubor.
Proto byla vytvořena struktura, která je pro vývojáře Tyrionu od teď závazná. Doplňující je také změna poskytnutí dat o souboru.
Kdy bylo nunté vzhledem ke kompilátoru a knihovnám informovat o názvu souboru ještě před tím, než ho frontend stáhne.

 * file_name -  chápu že není zdokumentované jak se soubor bude jmenovat jedinný problém je že nelze podle Azure použít podtržítko

    **Pole verzí**
        "program_versions": [


            {
              "version_object": {   // Původní objekt byl nezměněn - jen byl zanořen
                "id": "1",
                "version_name": "První Verze",
                "version_description": "Novy program",
                "date_of_create": 1466082597558,
                "files": [            // Změna vrácení id soubor - přidává se i název souboru a to pro podporu do budnoucna
                  {
                    "id": "1",
                    "file_name": "c-program"
                  },
                  {
                    "file_name" : "comp.bin",
                    "id" : "2"
                  }
                ]
              },

              // Dodatečné informace podle nutnosti k danému objektu

              "successfully_compiled": false,    <- V případě že kompilační server potvrdil že je v kodu chyba
              "compilable": true,                <- V případě že kompilační server nebyl třeba online atd( prostě není potvrzeno že nelze kod uspešně zkompilovat)
                                                    Dokud není zkomilovano a zamitnotu je tu true
              "compilation_in_progress": "true", <- V případě že compilace trvá déle než (hodně sekund) tak se ukazuje stav true. False není - pokud je false nedává
                                                    smysl ti to zasílat a proto to v Json není.
                                                    Výjmečně musí být boolean hodnota ve "stringu" a to z důvodů nemožnosti vložit do booleanu null a tím vynutit
                                                    vynechání null objketů v Json
              "virtual_input_output": null,
              "compilation_restored": false,
              "runing_on_board": null
            },
            {
            ..... další version_object
            }
          ],



### Podpora kompilace Readme dokumentace než bude dopsána podrobněji do WIKI ###

 * Vytvoříš C_program nad Projektem
  [Swagger New C_program](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/create_C_Program)

    Pokud tam žádná verze verze ještě není - automaticky to skočí do okna k editaci kodu. Možnost tlačítko save
    a výzva k pojmenování první verze pokud uživatel klikne na uložit. (Výzva k pojmenování a popisu)

 * Vytvoříš verzi nad C_program
   [Swagger New Version](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/new_C_Program_Version)

 * Pokud uživatel přijde znovu, otevře si C_program tak tam má možnost editovat kod (verzi). Pokud uloží - je
   nutné ho vyzvat udělat novou verzi s novým číslem a popisem. Pro možnost kontinuálního ukládání navrhuji mít ještě při potvrzení
   uložení další tlačítko "uložit a předchozí verzi zahodit" nebo něco takového.

    Uživatel má před uložením možnost průběžně si vše kompilovat na API, kde je nutné přiložit  "type_of_board_id" : "1",
    [Swagger Compile Code](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/compile_C_Program_code)


                    {
                       "type_of_board_id" : "1",
                       "code" : "#include \"mbed.h\"\n#include \"inc_blink.h\"\n#include \"Ser/Ser.h\"\n \nSer s;\nBlink b;\n \nint main() {\n    s.write();\n    b.start();\n}\n",
                       "user_files" : [
                            {
                                     "file_name":"soubor dva",
                                     "code" : "\n // komentar \n"
                            },
                            {
                                    "file_name":"Uzivatelská třída 2 - tvoří složky",
                                     "code" : "\n // komentar 2 \n"
                            }
                        ],
                       "external_libraries":[
                          {
                             "library_name":"Uživatelův název SER",
                             "files" : [
                                      {
                                          "file_name" :   "Ser/Ser.cpp",
                                          "content" : "#include \"mbed.h\"\n#include \"Ser.h\"\n\nSerial pc(D1, D0); // tx, rx\n \nvoid Ser::write() {\n    pc.printf(\"Serial World!\\n\");\n}\n"
                                      },
                                      {
                                          "file_name" :   "Ser/Ser.h",
                                          "content" : "\nclass Ser\n{\npublic:\n\tvoid write();\t\n};"
                                      }
                                ]
                          },
                           {
                             "library_name":"Uživatelův název Blink",
                             "files" : [
                                      {
                                          "file_name" :   "inc_blink.cpp",
                                          "content" : "#include \"mbed.h\"\r\n#include \"inc_blink.h\"\r\n\r\nDigitalOut myled(LED1);\r\n \r\nvoid Blink::start() {\r\n    while(1) {\r\n        myled = 1;\r\n        wait(0.1);\r\n        myled = 0;\r\n        wait(0.1);\r\n    }\r\n}\r\n"
                                      },
                                      {
                                          "file_name" :   "inc_blink.h",
                                          "content" : "\nclass Blink\n{\npublic:\n\tvoid start();\t\n};"
                                      }
                                ]
                          }
                       ]
                    }

 * Pokud uživatel uložil kod jako novou verzi
   [Swagger Compile Version](http://swagger.byzance.cz/?url=http://localhost:9000/api-docs#!/C_Program/compile_C_Program_version)
   server jí uloží a zkompiluje pokud nemá vhodnou cach předchozích kompilací (což je zatím spekulativně fungující fičura) proto vždy dojde k tomu že jí server pošle ke kompilaci.
   Po uložení (odpověď na uložení) máš informaci že se server pustil do snahy verzi kompilovat.
        "successfully_compiled": false,    <- V případě že kompilační server potvrdil že je v kodu chyba a false do té doby dokud není potvrzen opak
        "compilable": true,                <- V případě že kompilační server nebyl třeba online atd( prostě není potvrzeno že nelze kod uspešně zkompilovat)
                                                          Dokud není zkomilovano a zamitnotu je tu true
        "compilation_in_progress": "true", <- V případě že compilace trvá déle než (hodně sekund) tak se ukazuje stav true.


### Nahrátí Bocko programu do Homer serveru ###

 Pak následuje nahrání do blocko programu - s implementací hardwaru a dalších firuč.

 * Máš projekt - v něm C_Programy a verze c_Programu
 * Máš vytvořený HW (Desky) - Alespoň jedna deska musí být TypeOfBoard kde connectible_to_internet = true
  (Tento TypeOfBoard ti mimochodem defaultně připravuju při spuštění)
 * Ostatní desky si třeba vytvoř na TypeOfBoard ("Bezdrát", "Drát") a nějaký desky k tomu
 * Vytvoří si blocko program,
 * Pak verzi do kterého můžeš připojit hardware.

 *  PS: Abych ti usnadnil implementaci HW do blocko programu tak jsem ti vytvořil API
      http://swagger.byzance.cz/#!/B_Program/board_all_details_for_blocko
        - Máš seznam HW který mužeš imlementovat
        - C_Programy které můžeš nahrát na HW (Určíš takzvané páry - Desku a verzi C_prgramu) Jen je už na tobě ohlídat si aby si vybral C_progrma s typem desky
          že ho spojuješ s deskou se stejným typem desky

        * Vyžaduje to určení Master desky (náš Yoda) - respektive TypeOfBoard kde je connectible_to_internetv = true!
        * Vybereš jaký program C_program (verzi) chceš nahrát na master desku - nebu mužeš nechat tu, která je momentálně na HW nahraná.
        * Vybereš další zařízení do sítě HW prvků.

        **Verze blocko programu může vypadat takto**
        {
          "version_name": "verze 1.01",
          "version_description": "Verze 1",

           "main_board" : {
             "board_id" : "AAAAAAAA",
             "c_program_version_id" : "61"
           },

          "boards" : [
            {
                "board_id" : "EEEEEE_1",
                "c_program_version_id" : "562"
            },
            {
                "board_id" : "EEEEEE_2",
                "c_program_version_id" : "562"
            }
          ],
          "program": "{\"blocks\":{\"b1\":{\"type\":\"digitalInput\",\"visualType\":\"pushButton\",\"hwId\":\"tg_btn1in\",\"config\":{\"hwId\":\"tg_btn1in\"},\"editor\":{\"x\":270,\"y\":100},\"outputs\":{\"output\":[{\"block\":\"b4\",\"connector\":\"input\"}]}},\"b4\":{\"type\":\"digitalOutput\",\"visualType\":\"light\",\"hwId\":\"hw_034BB5C9\",\"config\":{\"hwId\":\"hw_034BB5C9\"},\"editor\":{\"x\":920,\"y\":110},\"outputs\":{}},\"b9\":{\"type\":\"digitalOutput\",\"visualType\":\"light\",\"hwId\":\"hw_65BC43F0\",\"config\":{\"hwId\":\"hw_65BC43F0\"},\"editor\":{\"x\":920,\"y\":210},\"outputs\":{}},\"b11\":{\"type\":\"digitalInput\",\"visualType\":\"switch\",\"hwId\":\"tg_btn2in\",\"config\":{\"hwId\":\"tg_btn2in\"},\"editor\":{\"x\":280,\"y\":190},\"outputs\":{\"output\":[{\"block\":\"b9\",\"connector\":\"input\"}]}}}}"
        }










### Oprava Bugů ###

 * fixed [TYRION-256](http://youtrack.byzance.cz/youtrack/issue/TYRION-256)
 * fixed [TYRION-249](http://youtrack.byzance.cz/youtrack/issue/TYRION-249)
 * fixed [TYRION-248](http://youtrack.byzance.cz/youtrack/issue/TYRION-248)
 * fixed [TYRION-247](http://youtrack.byzance.cz/youtrack/issue/TYRION-247)
 * fixed [TYRION-231](http://youtrack.byzance.cz/youtrack/issue/TYRION-231)
 * fixed [TYRION-229](http://youtrack.byzance.cz/youtrack/issue/TYRION-229)
 * fixed [TYRION-228](http://youtrack.byzance.cz/youtrack/issue/TYRION-228)
 * fixed [TYRION-227](http://youtrack.byzance.cz/youtrack/issue/TYRION-227)
 * fixed [TYRION-226](http://youtrack.byzance.cz/youtrack/issue/TYRION-226)
 * fixed [TYRION-199](http://youtrack.byzance.cz/youtrack/issue/TYRION-199)
 * fixed [TYRION-190](http://youtrack.byzance.cz/youtrack/issue/TYRION-190)
 * fixed [TYRION-262](http://youtrack.byzance.cz/youtrack/issue/TYRION-262)
 * fixed [TYRION-246](http://youtrack.byzance.cz/youtrack/issue/TYRION-246)
 * fixed [TYRION-251](http://youtrack.byzance.cz/youtrack/issue/TYRION-251)
 * fixed [TYRION-250](http://youtrack.byzance.cz/youtrack/issue/TYRION-250)
 * fixed [TYRION-255](http://youtrack.byzance.cz/youtrack/issue/TYRION-255)
 * fixed [TYRION-200](http://youtrack.byzance.cz/youtrack/issue/TYRION-200)
 * fixed [TYRION-254](http://youtrack.byzance.cz/youtrack/issue/TYRION-254)
 * fixed [TYRION-253](http://youtrack.byzance.cz/youtrack/issue/TYRION-253)

 * Obsolate [TYRION-64](http://youtrack.byzance.cz/youtrack/issue/TYRION-64)




### TODO ###

  * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
  * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
  * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
  * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
  * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
  * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona
  * TODO 13 Důležité je dodělat ORM dokumentaci ve SWAGGERU pro kompilaci!
  * TODO 14 AzureStorageLink a azurePackageLink přesunout pod Version_object!!! Už je to neudržitelný!!!
  * TODO 16 Mazání souborů na Azure
  * TODO 15 Verzování nasadit i na M_Program!
  * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
  * TODO 17 Link je také v kodu http://youtrack.byzance.cz/youtrack/issue/TYRION-263


  a) Takže je potřeba zprostředkovat z kompilace vytvořené virtuální bločky do blocka
  b) V blocku dát možnost importovat hardware a verzi hardwaru (firmwaru)  - vědět co na něm běží a eventuelně nabídnout co na něm může běžet.

  1) Přibyly nové API, které umožnují připojit k blocko programu (ke specifické verzi) konkrétní hardware.
     (Ze seznamu hardwaru, který je registrován k projektu). Je nad tím provedena operace vyhledání vyrtuálních bločků hardwaru z kompilátoru tak aby si je uživatel mohl propojit společně s s blockem.

        PS:  Jsou tam neřešitelné stavy kolie verzí (tak se ještě vymyslí nějaké donucovací prostředky, které zamězí v aktualizaci bez updatu navazující části)

        Becki obdrží informace o desce (hardwaru) a její virtuální bločky.
         Objekt B_Pair je zastřešující objekt, který je vázán k verzi Blocko programu a združuje hardware a jeho verzi C_programu. Když uživatel třeba jumpne zpátky na nižší verzi blocko programu, tyrion downgradne i hardware.


-----

# Verze 1.06.5 #
####  26.5.2016 ####

**Změny General:**

1) Pokud je systém ve vývojářském modu (podrobnější logování a další detaily jako je výběr destinačních serverů na Azure atd.) je systémová barva v modré.
V případě produkčního nasazení je v červené.

2) Přibyla rozpracovaná funkce Diff na provnávání API - Existují knihovny v javasriptu, které dokáží porovnat dva textové
soubory a zvýraznit změny, bohužel javasriptu nevládnu a tak je to zatím bez zvýraznění

-----

####  Becki -> Websocket ####
Byla zprovozněna funkce Websocketu pro Becki:

 * Přihlašovací link je na adrese {url}/websocket/becki/{token} <- Token je stejný, jaký obdržíte po přihlášení uživatele.
 * Počet přihlášení uživatele je neomezený (jen ne nutné se připojovat pokaždé s jiným tokenem) - Uživatel tak může být
   přihlášen na několika počítačích. K tomuto jsem se rozhodl především kvuli možnosti kolize a co dělat když se uživatel
   někde neodhlásí a přihlásí jinde. (A další nestandartní stavy)
   **TODO**(Předpokládám, že by pak bylo vhodné propojit becki instance mezi sebou aby frontend mohl vzájemně synchronizovat všechno co potřebuje)
 * Pokud chcete odzkoušet stream dat mezi blockem v Becki a blokem v Homerovi (zatím jediná věc, která na Websocketu má běžet)
   má to několik prerekvizit.
 * PS: Stvá se občas, že někam ještě zašlu nedefinovaný JSON příkaz
 * TODO: Celý websocket až se ustálý, se musí důkladně zdokumentovat - zejména lidsky vysvětlit jak funguje.

 * Prerekvizity:
    * 1) Přihlášený Cloud Blocko server (zle vizuálně zkontrolovat na první stránce Tyriona (tyrion.byzance.cz) nebo (localhost:9000)
     Blocko server si lze vytvořit na lokalu a pak se s ním připojit na websocket adresu {url}/websocket/blocko_server/:identificator (Kde identifikator je název serveru) Alfa.
     (Zatím vždy využívejte server Alfa prosím ("Velké A!") V kodu není dodělaný rozcestník (není priorita) a vždy se defaultně vybere Alfa.


    * 2) Blocko Program nahraný na Cloud serveru ( v případě že je správně nahraný se zobrazí jako připojený homer v sekci Websocket connection *Connected Homers (PC/RPI..)* )
     Pokud začínáte od nuly:
        * 1) Vytvořit si projekt    http://swagger.byzance.cz/#!/Project/postNewProject
        * 2) Vytvořit blocko program http://swagger.byzance.cz/#!/B_Program/new_b_Program
        * 3) Vytvořit novou verzi s kodem Blocko programu
        * 4) Nahrát blocko program do cloudu (na jeho verzi) http://swagger.byzance.cz/#!/B_Program/upload_b_Program_ToCloud
                Proběhne úspěšné nahrátí do blocko Serveru (Alfa)
                V případě odpojení a připojení Blocko serveru se Tyrion dotáže, co na něm běží a eventuelně opět na Blocko server
                nahraje příslušnou instanci Blocko Programu. Což si lze ověřit prohlédnutím aktuálně připojených websocketů,
                nebo si vypsat B Program http://swagger.byzance.cz/#!/B_Program/get_b_Program


            **Vizualizace Odpovědi v jakém stavu je blocko program:**

                {
                  "id": "1",
                  "name": "Program 1",
                    .
                    .
                    .
                    .
                  "program_state": {
                    "uploaded": true,
                    "m_project_id": null,
                    "version_id": "21",         <<<<< Toto id bude odesíláno v žádosti o poskytnutí stream z blocko serveru
                    "where": "cloud",
                    "cloud": {
                      "program_cloud": {
                        "id": "22",
                        "running_from": 1464462335768
                      },
                      "server_name": "Alfa"
                    }
                  }
                  .
                  .
                  .
                  "update_permission": true
                }

  * Žádost o zasílání "všeho" z blocko Serveru na becki" (Tento Json odesílá Becki Tyrionovi)

        Žádost
                  {
                    "messageType"    : "subscribe_instance",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "version_id"     : "21"        <<<<< Viz horní Json
                  }

        Možnosti odpovědi
                  1) Bude ti zasíláno vše (instance je funční, připojená  - prostě ideální stav)
                  {
                    "messageType"    : "subscribe_instance",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "status"         :  "success"
                  }

                  2) Nebo nastal problém a v "error" je uvedeno proč - Je 9 error stavů, kde se to mohlo pokazit
                  {
                    "messageType"    : "subscribe_instance",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "status"         : "error"
                    "error"          : "text problemu"
                  }

  * Cokoliv co obsahuje messegaChannel "becki" bude z blocka přeposláno přímo do becky a naopak

         Z blocko serveru na Becki

                  {
                    "messageType"    : "cokoliv",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "instanceId"     : "6f894916-fc8c-48f0-a4cb-40a859d712e5",
                    "cokoliv"        : "fuuuuu"
                  }

         Z becki na Blocko server
                  {
                    "messageType"    : "cokoliv",
                    "messageId"      : "SOME ID",
                    "messageChannel" : "becki",
                    "cokoliv"        : "fuuuuu"
                  }

   * Co bylo (musí se) přidáno za příkazy na blocko servery (zasílá Tyrion)

          Žádost o odebírání "potřebného do becki" (Je to naprosto shodné jako s odběrem Grid,
          ale je tu jen jiný channel)
                    {
                      "messageType"     :"subscribeChannel",
                      "messageId"       :"SOME ID",
                      "messageChannel"  :"becki",
                      "instanceId"      :"SOME ID"
                    }

          Zrušení odběru
                    {
                      "messageType"     :"unSubscribeChannel",
                      "messageId"       :"SOME ID",
                      "messageChannel"  :"becki",
                      "instanceId"      :"SOME ID"
                    }

-----

### Compilační server ###

Již v předchozích verzích byla implementována kompilace programů, teď s podporou odpovědí a otesováním.
Stále není definováno, jak vracet, zda vracet a kam vracet, jaké vyrtuální bločky jsou vytvořeny nad hardwarem.  (David na tom pracuje)

Prerekvizity tvoří:
   * Připojený kompilační server na websocketu - Lze zkontrolovat z přehledu Tyriona.

     PS: K produkčnímu serveru je trvale připojen Davidům kompilační server ubuntu1. Lze však libovolně připojovat další.
    Tyrion si 2 a více serverů rovnoměrně zatěžuje.

  * Vytvořit si hlavní projekt http://swagger.byzance.cz/#!/Project/postNewProject
  * Vytvořit si C_Program http://swagger.byzance.cz/#!/C_Program/create_C_Program

    C_program vnímám jako firmware našeho hardwaru z pohledu uživatele. Verze jsou na uživatelovi. (Verze s podporou diody, verze s podporou teploměru atd.)
    (verze si uživatel řídí sám, to znamená že pokud verzi updatuje tak se netvoří nová - ale jen se přepíšou původní hodnoty) Vím že je to trochu krkolomné. :( Návrhy?

  * Vytvořit si Verzi nad C_programem http://swagger.byzance.cz/#!/C_Program/new_C_Program_Version

            Ta obsahuje JSON

                 {
                     "version_name" : "První Verze Programu",
                     "version_description" : "Novy program"
                 }

  * Update Verze už s kodem.
     * **code** Obsah main okna - klasická c++ kod
     * **user_files** je pole uživatelských "záložek nebo oken" kde si muže pohodlně rozdělovat kod.
       Ukládám to záměrně takto, aby to šlo na becki znovu zobrazit.
     * **type_of_board_id** pro kompilátor je nutné znát hardwarové podklady (procesor atd..) proto je nunté určit pro kteoru desku se program mompiluje. (Server na začátku vytvoří jednu defaultní NUCLEO_F411RE)
     * **external_libraries**  Externí knihovny individuálně importovaných knihoven k hardwaru.
       **PS Je tam velmi důležité rozlišit jak se vnořují složky Ser/Ser.cpp!**


                {
                   "code" : "#include \"mbed.h\"\n#include \"inc_blink.h\"\n#include \"Ser/Ser.h\"\n \nSer s;\nBlink b;\n \nint main() {\n    s.write();\n    b.start();\n}\n",
                   "type_of_board_id" : "1",
                   "user_files" : [
                        {
                                 "file_name":"soubor dva",
                                 "code" : "\n // komentar tady je super c++ kod \n"
                        },
                        {
                                "file_name":"Uzivatelská třída 2 - tvoří složky",
                                 "code" : "\n // komentar 2 \n"
                        }
                    ],
                   "external_libraries":[
                      {
                         "library_name":"Uživatelův název SER",
                         "files" : [
                                  {
                                      "file_name" :   "Ser/Ser.cpp",
                                      "content" : "#include \"mbed.h\"\n#include \"Ser.h\"\n\nSerial pc(D1, D0); // tx, rx\n \nvoid Ser::write() {\n    pc.printf(\"Serial World!\\n\");\n}\n"
                                  },
                                  {
                                      "file_name" :   "Ser/Ser.h",
                                      "content" : "\nclass Ser\n{\npublic:\n\tvoid write();\t\n};"
                                  }
                            ]
                      },
                       {
                         "library_name":"Uživatelův název Blink",
                         "files" : [
                                  {
                                      "file_name" :   "inc_blink.cpp",
                                      "content" : "#include \"mbed.h\"\r\n#include \"inc_blink.h\"\r\n\r\nDigitalOut myled(LED1);\r\n \r\nvoid Blink::start() {\r\n    while(1) {\r\n        myled = 1;\r\n        wait(0.1);\r\n        myled = 0;\r\n        wait(0.1);\r\n    }\r\n}\r\n"
                                  },
                                  {
                                      "file_name" :   "inc_blink.h",
                                      "content" : "\nclass Blink\n{\npublic:\n\tvoid start();\t\n};"
                                  }
                            ]
                      }
                   ]
                }

  * Kompilace:
    * Je možná nad verzí C_programu nebo samostatně (třeba pokusné okno playground)

    Komentář:  Workflow kompilace je o tom nedříve napsat kód, zkompilovat ho a pokud je kompilace úspěšná,
    nahrát jí na hardware. Tyrion má buffery na kompilace a nějaký fičury navíc, ale to asi zatím není důležité.
    Spíše je to připravené pro budoucnost.

    Zkompilovat kod:

        POST  {{url}}/compilation/c_program/version/compile
        POST  {{url}}/compilation/c_program/version/compile/{version_id} (je vyžadováno aby byla verze uložena)

        body: Zasílá se stejný JSON jako při updatu

        PS: Zatím není vyřešeno jak zachytit zkompilovaný kod v "playground" a nahrát ho na HW. (Ale chtěl bych to taktéž,
        takový playground i s HW třeba na prezentaci )

   Odpověď je buď
        {
          "state": "ok",
          "code": 200,
          "message": "když tu něco je, asi zobraz uživateli"
        }
    nebo (To je co vrací kompilátor) - Problém je že nevím co vrací (dokumentace není), prostě ti to přepošlu
          Ale jde z toho vyseparovat spoustu zajímavých věcí. Tady byl třeba problém že odsazení na další řádek
          " /n "  neobsahovalo lomítko.
        [
          {
            "filename": "e8d34460-8ec2-49e3-bbac-045490082b0e.cpp",
            "line": 18,
            "column": 2,
            "type": "error",
            "text": "'n' does not name a type",
            "codeWhitespace": "  ",
            "code": "n // komentar 2 ",
            "adjustedColumn": 0,
            "startIndex": 0,
            "endIndex": 101
          }
        ]

    Nahrát kompilaci na HW:

        POST  {{url}}/compilation/c_program/version/uploud/{version_id} (je vyžadováno, aby byla verze zkompilována)
        (Tady mám představu dvou tlačítek "Zkompiluj" a když je to úspěšné "Nahraj na HW".
        Pro odzkoušení je na konci metody vynechán řádek pro nahrátí přímo na HW který není připojen momentálně a je to becki vracena ok odpověď.

        body:
             {
                 "board_id" : ["1", "2"]
             }






----


### Oprava Bugů ###

 * fixed [TYRION-243](http://youtrack.byzance.cz/youtrack/issue/TYRION-243)
 * fixed [TYRION-242](http://youtrack.byzance.cz/youtrack/issue/TYRION-242)
 * fixed [TYRION-237](http://youtrack.byzance.cz/youtrack/issue/TYRION-237)
 * fixed [TYRION-118](http://youtrack.byzance.cz/youtrack/issue/TYRION-118)
 * obsolate [TYRION-190](http://youtrack.byzance.cz/youtrack/issue/TYRION-190)
 * fixed [TYRION-222](http://youtrack.byzance.cz/youtrack/issue/TYRION-222)

 Nazelezné bugy:
  1) U vrácení verze při updatu se vrací duplicitně stejná dvě id
  2) Při smazání verze dojde i ke smazání C_programu

-----

### TODO ###

  * TODO 13 Důležité je dodělat ORM dokumentaci ve SWAGGERU pro kompilaci!
  * TODO 14 AzureStorageLink a azurePackageLink přesunout pod Version_object!!! Už je to neudržitelný!!!
  * TODO 16 Mazání souborů na Azure
  * TODO 15 Verzování nasadit i na M_Program!
  * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
  * TODO 12 Tomáš Z.: Dodělat možnost obnovení hesla
  * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
  * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
  * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
  * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
  * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
  * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona



-----

# Verze 1.06.4 #
####  29.4.2016 ####

-----

 * Doplnění funkce připojování Blocko (homer) serverů - podpora vytváření nstancí atd..
    - 4 NOVÉ API [(External Server)](http://swagger.byzance.cz/#/External_Server) pro vytváření objektů zastupující připojené servery

 * Podpora pro kompilační servery (ty budou vždy naše) - ale je už od začátku pamatováno na škálování takových serverů a rovnoměrné zatížení
    - 4 NOVÉ API [(External Server)](http://swagger.byzance.cz/#/External_Server) pro vytváření objektů zastupující připojené servery

 * Podpora přihlášení Becki pomocí tokenu - možnost více přihlášení jednou osobou (vyřešené routování)
     - čeká se na požadavky z Blocko serveru co kam přeposílat
 * Oprava přihlášení - po přihlášení (zaslání hesla a emailu) je vrácen pouze token a je vyžadován další request na který jsou vráceny všechny původní informace
 * Nově implementovaný návrh filtru a stránkvání velkých seznamů
 * Doplnění dokumentace na wiki
 * Opravy v ProgramingPackageController - zejména logování chyb - změna u všech metod


-----

### TODO ###

 * TODO Dodělat všude!!!

        @Entity
        @ApiModel( value =
                "<h3>Permissions:</h3>" +
                "<span style=\"color: green\">"    + M_Project.create_permission_docs +  "</span>" +
                "<br><span style=\"color: blue\">" + M_Project.read_permission_docs +    "</span>" +
                "<br>"
        )
        public class M_Project extends Model {

 * TODO Swagger Dokumentace na objektu B_Program_State a B_Program!!!!!!!!!!!!
 * TODO 12 Tomáš Z.: Dodělat možnost obnovení hesla
 * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
 * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
 * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
 * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
 * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
 * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona

-----

### Vyřešené TODO ###
 * Dokumentace pro Filtr get Homer Filter parametr a stránkování stránkování (Tomáš Z.)
 * Dodělání filtr návrhového vzoru a stránkování (univerzální a kopírovatelné řešení napříč projektem + dokumentace )
 * Odpojení M_Programu a Blocko_programu
-----

### Oprava Bugů ###

 * fixed [TYRION-203](http://youtrack.byzance.cz/youtrack/issue/TYRION-203)
 * fixed [TYRION-235](http://youtrack.byzance.cz/youtrack/issue/TYRION-235)
 * fixed [TYRION-236](http://youtrack.byzance.cz/youtrack/issue/TYRION-236)
 * fixed [TYRION-239](http://youtrack.byzance.cz/youtrack/issue/TYRION-239)
 * fixed [TYRION-238](http://youtrack.byzance.cz/youtrack/issue/TYRION-238)
 * fixed [TYRION-198](http://youtrack.byzance.cz/youtrack/issue/TYRION-198)
 * fixed [TYRION-230](http://youtrack.byzance.cz/youtrack/issue/TYRION-230)
 * fixed [TYRION-228](http://youtrack.byzance.cz/youtrack/issue/TYRION-228)
 * fixed [TYRION-232](http://youtrack.byzance.cz/youtrack/issue/TYRION-232)
 * fixed [TYRION-231](http://youtrack.byzance.cz/youtrack/issue/TYRION-232) -> Vázané issue [HOMER-3](http://youtrack.byzance.cz/youtrack/issue/HOMER-3)
 * fixed [TYRION-227](http://youtrack.byzance.cz/youtrack/issue/TYRION-227)
 * Obsolate [TYRION-233](http://youtrack.byzance.cz/youtrack/issue/TYRION-233)
 * Neřešitelné [TYRION-219](http://youtrack.byzance.cz/youtrack/issue/TYRION-219)
 * Zamítnuto [TYRION-216](http://youtrack.byzance.cz/youtrack/issue/TYRION-216)
 * Zamítnuto [TYRION-234](http://youtrack.byzance.cz/youtrack/issue/TYRION-234)
 * fixed [TYRION-142](http://youtrack.byzance.cz/youtrack/issue/TYRION-142) <-> [TYRION-155](http://youtrack.byzance.cz/youtrack/issue/TYRION-155)




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Verze 1.06.2 #
####  19.4.2016 ####

-----

### Oprávnění ###

 * Dolaďování oprávnění nad objekty - a evidence všech oprávnění do databáze přes ENUM statické klíče nad objektem
 * Odstranění části nevhodně použitých anotací pro Swagger "Permission"
 * Navržení vzoru jak dokumentovat statické klíče
 * Definování a sjednocení vzhledu a umístění proměných na všech DB modelech


-----

### Oprava Bugů ###

 * fixed [TYRION-183](http://youtrack.byzance.cz/youtrack/issue/TYRION-183)
 * fixed [TYRION-206](http://youtrack.byzance.cz/youtrack/issue/TYRION-206)
 * fixed [TYRION-207](http://youtrack.byzance.cz/youtrack/issue/TYRION-207) Netestováno!!
 * fixed [TYRION-205](http://youtrack.byzance.cz/youtrack/issue/TYRION-205)
 * fixed [TYRION-204](http://youtrack.byzance.cz/youtrack/issue/TYRION-204)
 * fixed [TYRION-217](http://youtrack.byzance.cz/youtrack/issue/TYRION-217)
 * fixed [TYRION-217](http://youtrack.byzance.cz/youtrack/issue/TYRION-217)
 * fixed [TYRION-211](http://youtrack.byzance.cz/youtrack/issue/TYRION-211)
 * fixed [TYRION-212](http://youtrack.byzance.cz/youtrack/issue/TYRION-212)
 * fixed [TYRION-196](http://youtrack.byzance.cz/youtrack/issue/TYRION-196)
 * fixed [TYRION-173](http://youtrack.byzance.cz/youtrack/issue/TYRION-173)
 * fixed [TYRION-203](http://youtrack.byzance.cz/youtrack/issue/TYRION-203)
 * fixed [TYRION-203](http://youtrack.byzance.cz/youtrack/issue/TYRION-209)
 * fixed [TYRION-210](http://youtrack.byzance.cz/youtrack/issue/TYRION-210)
 * fixed [TYRION-201](http://youtrack.byzance.cz/youtrack/issue/TYRION-201)
 * fixed [TYRION-200](http://youtrack.byzance.cz/youtrack/issue/TYRION-200)
 * fixed [TYRION-191](http://youtrack.byzance.cz/youtrack/issue/TYRION-191)
 * fixed [TYRION-186](http://youtrack.byzance.cz/youtrack/issue/TYRION-186) Feature (List all users)
 * fixed [TYRION-192](http://youtrack.byzance.cz/youtrack/issue/TYRION-192)
 * fixed [TYRION-210](http://youtrack.byzance.cz/youtrack/issue/TYRION-210)
 * fixed [TYRION-194](http://youtrack.byzance.cz/youtrack/issue/TYRION-194)
 * fixed [TYRION-195](http://youtrack.byzance.cz/youtrack/issue/TYRION-195)
 * fixed [TYRION-113](http://youtrack.byzance.cz/youtrack/issue/TYRION-113)
 * fixed [TYRION-114](http://youtrack.byzance.cz/youtrack/issue/TYRION-114)
 * fixed [TYRION-116](http://youtrack.byzance.cz/youtrack/issue/TYRION-116)
 * fixed [TYRION-185](http://youtrack.byzance.cz/youtrack/issue/TYRION-185)
 * fixed [TYRION-187](http://youtrack.byzance.cz/youtrack/issue/TYRION-187)
 * fixed [TYRION-199](http://youtrack.byzance.cz/youtrack/issue/TYRION-199)
 * fixed [TYRION-197](http://youtrack.byzance.cz/youtrack/issue/TYRION-197)

### TODO do další verze ###

 * TODO 3 Tomáš Z.: Zdokumentovat všechny Models pro Swagger
 * TODO 4 Tomáš Z.: Přidat cyklické odmazávání BLOB v Azure, na které už neexistuje databázová vazba (Nějaká fičura co se zapne každý den ve 3 ráno a provede sekvenci kam
      každý vývojář může přidávat metody které se provedou... (Mazání prošlých tokenů, mazání prošlých nedokončených ověření přes sociální sítě atd... Viz todo 5)
 * TODO 5 Tomáš Z.: Přidat cyklické odmazávání Vygenerovaných nezrealizovaných spojení na sociální sítě (Linkded Account)
 * TODO 6 Tomáš Z.: Pokud se uživatel přihlásí přes facebook, k jeho účtu bude přidělen plovoucí token. Pokud se přihlásí znova a znova..
      budou se vtvářet další a další připojení. Je žádoucí mazat předchozí spojení pokud poznám, že je to ze stejného prohlížeče?
      PS: Vyžaduje to tak půl dne (+ ideálně přepsat třídu s přihlášení přes facebook a odzkoušet github..
 * TODO 7 Tomáš Z.: Dodělat disconnect http://youtrack.byzance.cz/youtrack/issue/TYRION-169
 * TODO 8 ALL-Tyrion: Bude potřeba dodělat řešení pro prodlužování platnosti tokenu (Buď nějak magicky na Tyrionovi nebo ze strany frontendu) Asi to dodělá Tomáš.
 * TODO 9 Přidat a vykreslit všechny objekty na dashboard Tyriona
 * TODO 10 [TYRION-186](http://youtrack.byzance.cz/youtrack/issue/TYRION-186)
 * TODO 11 Dodělat na všech filtrech stránkování (vhodné by bylo vymyslet univerzální a kopírovatelné řešení napříč projektem)




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Verze 1.06.1 #
####  17.4.2016 ####

### Tyrion a nový DashBoard ###
 * Nasazení designu pro zobrazení a ovládání základních elementů serveru. Slouží k zobrazení informací a pro vývojáře navázané na Tyrion.
    * Správa zařízení připojených přes WebSocket
    * Možnost Reportování serverem zachycených chyb na Youtrack.
    * Kvalitní verzované Readme s podporou formátování



Rádi bychom vydali i integrovanou a verzovanou API dokumentaci, kde by šlo porovnávat na kterých obejktech došlo ke změně - ale to je pro nedostatek skillu ohledně vykreslování a javascriptu ze strany týmu Tyrion odloženo na dobu
neurčitou. Každopádně každý nápad jak posunout Tyriona kupředu jsou vítány.

-----

### Oprávnění ###
 * Bylo implementováno (z větší části) oprávnění pro tvorbu a úpravu objektů. Během implementace nové verze do Becki by bylo vhodně dát zpětnou vazbu a představy o potřebách dokumentace. Směrodatná (vývojová - pro Tyrion tým) je
   [docu](https://wiki.byzance.cz/wiki/doku.php?id=tyrion_permission). Logika je řešena na úrovni objektu a tak není potřeba cokoliv programovat do Controlleru - pouze požádat o ověření samotný objekt.

-----

### Přidání systému Loggy pro logování chyb
 * Změna konfigurace Logbacku
 * Zapnutí logování SQL příkazů

-----


### Práva nových notifikací ###
(připraveno pro implementaci na straně frontend)

 * Proběhla implementace ukládání notifikací v případě, že uživatel nebyl zastižen k zaslání. Cílem bylo vytvořit API,
  na které se frontend po svém obnovení dotáže pro seznam notifikací v době nepřítomnosti uživatele. Vracím seznam maximálně 25
  notifikací. Pokud jich je více - stránkuji. Každá notifikace za měsíc vyexpiruje (Systém jí smaže). Takže uživatel se může
  podívat až měsíc dozadu.

 * Mezi řádky. Redhat má jen 2/7 produktů otevřené komunitě (linux a Jboss) a jako opensource. :D U ostatních je to těžce komerční zpropadená korporace :D
  a z výroční zprávy akcionářům vyplývá, že na produktech, které jsou otevřené vydělává jen 37% peněz. (Rok předtím to bylo 44%)  :D

 * V případě že notifikaci doručím přihlášenému uživateli jí stejně uložím do systému jako historii.

 * Objekt je zdokumentován ve Swaggeru. Přibyl parameter "read" značící, zda si ho uživatel už přečetl. Je to poměrně jednoduché.
  V případě prvního zaslání nepřečtené notifikace je parameter read = false. A v případě znovu zavolání je už označen jako read = true.
  Je to uděláno úplně stejně jako na Azure - že po F5 prohlížeče je notifikace chápána jako přečtená.

 * Některé notifikace mají v parametru "confirmation_required". Což znamená, že Tyrion požaduje jejich potvrzení!
  Například informování o odstávce. O vypršelé kreditní kartě atd. V případě že uživatel neodkliknul potvrzení (Api pro potvrzení)
  tak mu Tyrion danou zpávu zašle znovu při dalším přihlášení dokud to nepotvrdí. :D ( Big brother is watching you! ) :D


 * Při přihlášení uživatele zároveň přibyly 3 parametry, které lze vykreslit do šablony.
    * První je počet nových událostí (notifikací) "unread_notification"
    * Druhý je počet nepřečtených zpráv "unread_message". Vize zpráv je pro komunitu a jejich projekty. Nebo pro připisování poznámek
      k úpravám kódu atd. pokud na projektu pracuje více uživatelů. Vize zatím nic na Tyrionovi není implementováno.
    * Tickety technické podpory "unread_ticket" - právě probíhá implementace do Tyriona skrze zendesk (nástroj třetí strany na technickou podporu)

  * Notifikace se také zasílají všem uživatelům, kterých se to týká. (sdílený projekt, homer.. komunitní projekt, připsání
  nového komentáře atd.

  * #### úprava linku u získání SEE ####

        GET  /notification/:identificator  -------> GET  /notification/connection/:identificator

  * Přidání API pro získání posledních notifikací ( obsahuje i to, co se jako notifikace nemusí uživateli odesílat)
      například changelog jeho portfoli.  Pokud se zavolá první api - vrátí to seznam od poslední po první s omezením
      na 25 prvků. Pokud chce ít uživatel hlouběji v notifikacích na konec url se připojí číslo ze seznamu stránek
      uvedených v JSON.

        GET             /notification/list
        GET             /notification/list/{page_number}
        DELETE          /notification/{notification_id}
        PUT             /notification/confirm/{notification_id}

-----

### EVIDENCE PŘIHLÁŠENÍ ###
(připraveno pro implementaci na straně frontend)

      GET      /coreClient/connections
         - Vrátí seznam všech přihlášení, kde je stále platný token - uživatel má možnost ho deaktivovat.

      DELETE   /coreClient/connection/:connection_id
         - API pro jeho trvalou deaktivaci (možnost deaktivovat i mobilní zařízení)
         - Je ale nutné Tomášovi specifikovat,jak by měl asi rozlišovat jednotlivá spojení????? Radku?


-----

### Oprava Bugů ###

 * fixed [TYRION-183](http://youtrack.byzance.cz/youtrack/issue/TYRION-183)
 * fixed [TYRION-181](http://youtrack.byzance.cz/youtrack/issue/TYRION-181)
 * fixed [TYRION-193](http://youtrack.byzance.cz/youtrack/issue/TYRION-193)
 * fixed [TYRION-189](http://youtrack.byzance.cz/youtrack/issue/TYRION-189)

------
