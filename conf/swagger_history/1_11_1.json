{
  "swagger" : "2.0",
  "info" : {
    "description" : "Aggregate API for communicating with the server Tyrion. Please carefully check each version. Some APIs require special permissions. Some are designed for only certain types of mobile devices. For more information write to Tyrion Team tyrion@byzance.cz",
    "version" : "1.11.1",
    "title" : "Tyrion Api",
    "contact" : {
      "name" : "Tyrion Team leader:: alexandr.tyls@byzance.cz, \n\n tyrion@byzance.cz, support@byzance.cz"
    },
    "license" : {
      "name" : "Terms Of Service",
      "url" : "http://google.com"
    }
  },
  "host" : "localhost:9000",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Not Documented API - InProgress or Stuck"
  }, {
    "name" : "C_Program"
  }, {
    "name" : "Actualization"
  }, {
    "name" : "Processor"
  }, {
    "name" : "Producer"
  }, {
    "name" : "Type-Of-Board"
  }, {
    "name" : "Bootloader"
  }, {
    "name" : "Board"
  }, {
    "name" : "Blocko"
  }, {
    "name" : "B_Program"
  }, {
    "name" : "Price & Invoice & Tariffs"
  }, {
    "name" : "Access"
  }, {
    "name" : "WebSocket"
  }, {
    "name" : "Board_Registration"
  }, {
    "name" : "Person"
  }, {
    "name" : "Instance"
  }, {
    "name" : "Type-of-Block"
  }, {
    "name" : "Blocko-Block"
  }, {
    "name" : "M_Program"
  }, {
    "name" : "APP-Api"
  }, {
    "name" : "Type-of-Widget"
  }, {
    "name" : "Grid-Widget"
  }, {
    "name" : "Role"
  }, {
    "name" : "Permission"
  }, {
    "name" : "Notifications"
  }, {
    "name" : "Library"
  }, {
    "name" : "Project"
  }, {
    "name" : "External Server"
  }, {
    "name" : "Social-Facebook"
  }, {
    "name" : "Social-GitHub"
  } ],
  "paths" : {
    "/c_program/version/compile/{version_id}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "compile C_program Version",
        "description" : "Compile specific version of C_program - before compilation - you have to update (save) version code",
        "operationId" : "compile_C_Program_version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Compilation successful",
            "schema" : {
              "$ref" : "#/definitions/Compilation_Ok"
            }
          },
          "422" : {
            "description" : "Compilation unsuccessful",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Compilation_Build_Error"
              }
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "478" : {
            "description" : "External server side Error",
            "schema" : {
              "$ref" : "#/definitions/ExternalServerSideError"
            }
          },
          "477" : {
            "description" : "External server is offline",
            "schema" : {
              "$ref" : "#/definitions/Server Offline"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "C_program.Version.read_permission" : "read: If user have \"Object\".read_permission = true, you can read / get version on this Object - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "C_program_read"
        }
      }
    },
    "/c_program/version/compile" : {
      "post" : {
        "tags" : [ "C_Program" ],
        "summary" : "compile C_program with Code",
        "description" : "Compile code",
        "operationId" : "compile_C_Program_code",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_Update"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Compilation successful",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Compilation_Server_CompilationResult"
            }
          },
          "477" : {
            "description" : "External server is offline",
            "schema" : {
              "$ref" : "#/definitions/Server Offline"
            }
          },
          "422" : {
            "description" : "Compilation unsuccessful",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Compilation_Build_Error"
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "478" : {
            "description" : "External server side Error",
            "schema" : {
              "$ref" : "#/definitions/ExternalServerSideError"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/c_program/version/upload" : {
      "put" : {
        "tags" : [ "C_Program", "Actualization" ],
        "summary" : "update Embedded Hardware with C_program compilation",
        "description" : "Upload compilation to list of hardware. Compilation is on Version oc C_program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show \"future\" message to the user!",
        "operationId" : "uploadCompilationToBoard",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/List of Boards"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Board.update_permission" : "true",
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/processor/{processor_id}" : {
      "get" : {
        "tags" : [ "Processor" ],
        "summary" : "get Processor",
        "description" : "If you get Processor by query processor_id.",
        "operationId" : "processor_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processor_id",
          "in" : "path",
          "description" : "processor_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Processor"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "Processor" ],
        "summary" : "update Processor",
        "description" : "If you want update Processor.id by query = processor_id . Send required json values and server respond with update object",
        "operationId" : "processor_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processor_id",
          "in" : "path",
          "description" : "processor_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Processor_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Processor"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Processor_edit"
        }
      }
    },
    "/processor" : {
      "get" : {
        "tags" : [ "Processor" ],
        "summary" : "get all Processors",
        "description" : "If you want get Processor by query processor_id.",
        "operationId" : "processor_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Processor"
              }
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/producer/all" : {
      "get" : {
        "tags" : [ "Producer" ],
        "summary" : "get all Producers",
        "description" : "if you want get list of Producers. Its list of companies owned physical boards and we used that for filtering",
        "operationId" : "producer_getAll",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Producer"
              }
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/producer/{producer_id}" : {
      "get" : {
        "tags" : [ "Producer" ],
        "summary" : "get Producer",
        "description" : "if you want get Producer. Its company owned physical boards and we used that for filtering",
        "operationId" : "producer_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "producer_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Producer"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/typeOfBoard" : {
      "post" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "create TypeOfBoard",
        "description" : "The TypeOfBoard is category for IoT. Like Raspberry2, Arduino-Uno etc. \n\nWe using that for compilation, sorting libraries, filtres and more..",
        "operationId" : "typeOfBoard_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBoard_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBoard"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "TypeOfBoard_create"
        }
      }
    },
    "/typeOfBoard/{type_of_board_id}" : {
      "get" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "get TypeOfBoard",
        "description" : "if you want get TypeOfBoard object by query = type_of_board_id",
        "operationId" : "typeOfBoard_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBoard"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "edit TypeOfBoard",
        "description" : "if you want edit base TypeOfBoard information",
        "operationId" : "typeOfBoard_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBoard_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBoard"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "TypeOfBoard.edit_permission" : "true",
          "Static Permission key" : "TypeOfBoard_edit"
        }
      },
      "delete" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "delete TypeOfBoard",
        "description" : "if you want delete TypeOfBoard object by query = type_of_board_id",
        "operationId" : "typeOfBoard_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "TypeOfBoard.delete_permission" : "true",
          "Static Permission key" : "TypeOfBoard_delete"
        }
      }
    },
    "/typeOfBoard/all" : {
      "get" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "get list of all TypeOfBoard",
        "description" : "if you want get all TypeOfBoard objects",
        "operationId" : "typeOfBoard_getAll",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfBoard"
              }
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/bootloader/update_device_list" : {
      "put" : {
        "tags" : [ "Bootloader" ],
        "summary" : "update Bootloader",
        "description" : "List of Hardware Id for update on latest bootloader version for specifict type of hardware",
        "operationId" : "bootLoader_manualUpdate",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_Bootloader_Update"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            }
          },
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/board/ide_upload_hardware/{project_id}" : {
      "get" : {
        "tags" : [ "Board" ],
        "summary" : "get List of Boards for Firmware Upload",
        "description" : "List of boards under Project for fast upload of Firmware to Board from Web IDE",
        "operationId" : "board_getForFastUpload",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Board_for_fast_upload_detail"
              }
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Board.edit_permission" : "true",
          "Static Permission key" : "Board_edit"
        }
      }
    },
    "/board/userDescription/{board_id}" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "edit Board - update personal description",
        "description" : "Used for add descriptions by owners. \"Persons\" who registred \"Board\" to own \"Projec\" ",
        "operationId" : "board_updateDescription",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_Personal_Description"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Board.edit_permission" : "true",
          "Static Permission key" : "Board_edit"
        }
      }
    },
    "/board/backup" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "update Board - update Backup setting",
        "description" : "",
        "operationId" : "board_updateBackup",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_Backup_settings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Board.edit_permission" : "true",
          "Static Permission key" : "Board_edit"
        }
      }
    },
    "/board/filter" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "get Boards with filter parameters",
        "description" : "Get List of boards. Acording by permission - system return only hardware from project, where is user owner or all boards if user have static Permission key",
        "operationId" : "board_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_read"
        }
      }
    },
    "/board/deactivateBoard/{board_id}" : {
      "delete" : {
        "tags" : [ "Board" ],
        "summary" : "deactivate Board",
        "description" : "Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database",
        "operationId" : "board_deactivate",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/board/{board_id}" : {
      "get" : {
        "tags" : [ "Board" ],
        "summary" : "get Board",
        "description" : "if you want get Board object by query = board_id. User can get only boards from project, whitch user owning or user need Permission key \"Board_rea\".",
        "operationId" : "board_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_read"
        }
      },
      "delete" : {
        "tags" : [ "Board" ],
        "summary" : "disconnect Board from Project",
        "description" : "This Api is used by Users for disconnection of Board from their Project, its not meaning that Board is removed from system, only disconnect and another user can registred that (connect that with different account/project etc..)",
        "operationId" : "board_disconnectProject",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Board_Disconnection" : "read: If user want remove Board from Project, he needs one single permission Project.update_permission, where hardware is registered. - Or user need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/board/check/{hash_for_adding}" : {
      "get" : {
        "tags" : [ "Board" ],
        "summary" : "check Board during registration",
        "description" : "Check Board state for new Registration. Types of responses in JSON state value[CAN_REGISTER, NOT_EXIST, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE]... \n PERMANENTLY_DISABLED - device was removed by Byzance. \nBROKEN_DEVICE - device exist - but its not possible to registered that. Damaged during manufacturing. ",
        "operationId" : "board_check",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hash_for_adding",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board_Registration_Status"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_read"
        }
      }
    },
    "/board/{hash_for_adding}/{project_id}" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "connect Board with Project",
        "description" : "This Api is used by Users for connection of Board with their Project",
        "operationId" : "board_connectProject",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hash_for_adding",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "404" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Board_Connection" : "read: If user want connect Project with board, he needs two Permission! Project.update_permission == true and also Board.first_connect_permission == true.  - Or user need combination of static/dynamic permission key and Board.first_connect_permission == true"
        },
        "x-permission_required" : {
          "Board.first_connect_permission" : "true",
          "Project.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/blocko/all_details/{project_id}" : {
      "get" : {
        "tags" : [ "Blocko", "B_Program" ],
        "summary" : "get Boards details for integration to Blocko program",
        "description" : "get all boards that user can integrate to Blocko program",
        "operationId" : "board_allDetailsForBlocko",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Boards_For_Blocko"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "project.read_permission" : "true",
          "Static Permission key" : "Project_read_permission"
        }
      }
    },
    "/c_program" : {
      "post" : {
        "tags" : [ "C_Program" ],
        "summary" : "Create new C_Program",
        "description" : "If you want create new C_program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object",
        "operationId" : "c_program_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/C_Program"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "C_program.create_permission" : "create: If user have Project.update_permission = true, you can create C_program on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "C_program_create"
        }
      }
    },
    "/c_program/{c_program_id}" : {
      "get" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program",
        "description" : "get C_program by query = c_program_id",
        "operationId" : "c_program_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "c_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "C_program.read_permission" : "read: If user have Project.read_permission = true, you can read C_program on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "C_program_read"
        }
      },
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "Edit C_Program",
        "description" : "If you want edit base information about C_program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object",
        "operationId" : "c_program_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "c_program_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.edit_permission" : "true",
          "Static Permission key" : "C_program_edit"
        }
      },
      "delete" : {
        "tags" : [ "C_Program" ],
        "summary" : "delete C_program",
        "description" : "delete C_program by query = c_program_id, query = version_id",
        "operationId" : "c_program_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "c_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.delete_permission" : "true",
          "Static Permission key" : "C_program_delete"
        }
      }
    },
    "/c_program/list/{page_number}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program List",
        "description" : "get all C_Programs that belong to logged person",
        "operationId" : "c_program_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "C_program.read_permission" : "Tyrion only returns C_Programs which person owns, there is no need to check person_permissions"
        }
      }
    },
    "/c_program/version/public/list/{page_number}" : {
      "get" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program_Version public",
        "description" : "get approved or edited C_program public Versions ",
        "operationId" : "c_program_getPublicList",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program_Version_Public_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/c_program/version/create/{c_program_id}" : {
      "post" : {
        "tags" : [ "C_Program" ],
        "summary" : "new Version of C_Program",
        "description" : "If you want add new code to C_program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object",
        "operationId" : "c_programVersion_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/C_Program_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.update_permission" : "true",
          "Static Permission key" : "C_program_update"
        }
      }
    },
    "/c_program/version/{version_id}" : {
      "get" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program Version",
        "description" : "get Version of C_program by query = version_id",
        "operationId" : "c_programVersion_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "C_program.Version.read_permission" : "read: If user have \"Object\".read_permission = true, you can read / get version on this Object - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "C_program_read"
        }
      },
      "delete" : {
        "tags" : [ "C_Program" ],
        "summary" : "delete Version in C_program",
        "description" : "delete Version.id = version_id in C_program by query = c_program_id, query = version_id",
        "operationId" : "c_programVersion_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.delete_permission" : "true",
          "Static Permission key" : "C_program_delete"
        }
      }
    },
    "/c_program/version/edit/{version_id}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "update basic information in Version of C_program",
        "description" : "For update basic (name and description) information in Version of C_program. If you want update code. You have to create new version. And after that you can delete previous version",
        "operationId" : "c_programVersion_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Version_Object"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.edit_permission" : "true",
          "Static Permission key" : "C_program_edit"
        }
      }
    },
    "/c_program/version/make_public/{version_id}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "make C_program_Version public",
        "description" : "Make C_program public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.",
        "operationId" : "c_programVersion_makePublic",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "The user has entered more than three channels. Or other problem :(",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.edit_permission" : "true",
          "Static Permission key" : "C_program_edit"
        }
      }
    },
    "/product_extension" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all Product Extension of logged user",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ProductExtension"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "create Product Extension",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProductExtension_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/ProductExtension"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product_extension/{extension_id}" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get Product Extension by ID",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "extension_id",
          "in" : "path",
          "description" : "extension_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/ProductExtension"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "update Product Extension",
        "description" : "Updates extension. User can change name, description or color.",
        "operationId" : "productExtension_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "extension_id",
          "in" : "path",
          "description" : "extension_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProductExtension_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/ProductExtension"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "delete Product Extension",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_delete",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "extension_id",
          "in" : "path",
          "description" : "extension_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product_extension/types" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all Product Extension types",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_getAllTypes",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ProductExtension_Type"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product_extension/activate/{extension_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "activate Product Extension",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_activate",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "extension_id",
          "in" : "path",
          "description" : "extension_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/ProductExtension"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product_extension/deactivate/{extension_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "deactivate Product Extension",
        "description" : "Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)",
        "operationId" : "productExtension_deactivate",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "extension_id",
          "in" : "path",
          "description" : "extension_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/ProductExtension"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/tariff" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all Tariffs",
        "description" : "get all Tariffs - required for every else action in system. For example: Project is created under the Product which is under some Tariff",
        "operationId" : "tariff_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Tariff"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product" : {
      "post" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "create Product under Tariff",
        "description" : "It is the base object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: \n\nFirst(201):  System create new Object - Product \n\nSecond(200): The product requires payment - The server creates the object, but returns an Invoice \n\nIf the user choose credit card payment, the invoice will contain gw_url, which is a link to the payment gate, you can redirect him there. If bank transfer is chosen, server will return an Invoice, but the user will pay it independently via his bank account.",
        "operationId" : "product_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created successfully",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/all" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all Products with all information's",
        "description" : "",
        "operationId" : "product_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of users Products",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Product"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/general/{product_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "edit Product details",
        "description" : "edit basic details of Product",
        "operationId" : "product_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "product_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/deactivate/{product_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "deactivate Product Tariff",
        "description" : "deactivate product and deactivate all stuff under it",
        "operationId" : "product_deactivate",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "product_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deactivating was successful",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/activate/{product_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "activate Product Tariff",
        "description" : "activate product and deactivate all staff around that",
        "operationId" : "product_activate",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "product_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Activating was successful",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/credit/{product_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "buy credit for given product",
        "description" : "creates invoice - credit will be added after payment if payment method is bank transfer or if getting money from credit card is successful",
        "operationId" : "product_credit",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "product_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product_Credit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/details/{payment_details_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "edit Product payment details",
        "description" : "edit payments details in Product",
        "operationId" : "paymentDetails_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "payment_details_id",
          "in" : "path",
          "description" : "payment_details_id Long query",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tariff_details_edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Payment_Details"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/user_applicable" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all active products that the User can use",
        "description" : "get all the products that the user can use when creating new projects",
        "operationId" : "product_getActive",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Applicable_Product"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/product/terminate_ondemand/{product_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "terminate on demand",
        "description" : "cancel automatic payments in Product",
        "operationId" : "product_terminateOnDemand",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "description" : "product_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/invoice/{invoice_id}" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get Invoice with all details",
        "description" : "get summary information from invoice",
        "operationId" : "invoice_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Invoice_full_details"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/invoice/resend/{invoice_id}" : {
      "post" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "re-send Invoice to specific email",
        "description" : "re-send Invoice to specific email",
        "operationId" : "invoice_resend",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values - values in Json is not requierd",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Resend_Email"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/invoice/reimbursement/{invoice_id}" : {
      "post" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "reimbursement of an unpaid invoice",
        "description" : "reimbursement of an unpaid invoice - with settings from creating product before",
        "operationId" : "invoice_reimbursement",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Invoice"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/invoice/pdf/{kind}/{invoice_id}" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get Invoice PDF file",
        "description" : "get PDF invoice file",
        "operationId" : "invoice_getPdf",
        "schemes" : [ "https" ],
        "produces" : [ "multipartFormData" ],
        "parameters" : [ {
          "name" : "kind",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/websocket/access_token" : {
      "get" : {
        "tags" : [ "Access", "WebSocket" ],
        "summary" : "get temporary Connection Token",
        "description" : "For connection to websocket, you have to connect with temporary unique token. This Api return Tokenwith a maximum lifetime of 5 seconds. After the token is deactivated. After logging in, or the connectionlost is token deactivated also. ",
        "operationId" : "get_Websocket_token",
        "schemes" : [ "https" ],
        "consumes" : [ "text/plain" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Token successfully generated",
            "schema" : {
              "$ref" : "#/definitions/WebSocket_Token"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/websocket/compilation_server/{identificator}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "Compilation Server Connection",
        "description" : "",
        "operationId" : "code_server_connection",
        "parameters" : [ {
          "name" : "identificator",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/websocket/becki/{secure_token}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "FrontEnd Becki Connection",
        "description" : "",
        "operationId" : "becki_website_connection",
        "parameters" : [ {
          "name" : "secure_token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/websocket/homer_server/{identificator}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "Homer Server Connection",
        "description" : "",
        "operationId" : "homer_cloud_server_connection",
        "parameters" : [ {
          "name" : "identificator",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/admin/embedded_hardware/request" : {
      "put" : {
        "tags" : [ "Board_Registration" ],
        "summary" : "Request for Details for new Board",
        "description" : "Required data for new Embedded Hardware for first hardware settings. Required Permission key from Tyrion Backend Web Page!",
        "operationId" : "new_hardware_request",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Hardware_New_Settings_Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Hardware_New_Settings_Result"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/admin/embedded_hardware/result" : {
      "put" : {
        "tags" : [ "Board_Registration" ],
        "summary" : "Result for Details for new Board",
        "description" : "Result data for new Embedded Hardware for first hardware settings. Required Permission key from Tyrion Backend Web Page!",
        "operationId" : "new_hardware_result",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Hardware_New_Hardware_Result"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/test2" : {
      "get" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "test2",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/test" : {
      "post" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "test1",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/person" : {
      "post" : {
        "tags" : [ "Person" ],
        "summary" : "register new Person",
        "description" : "create new Person with unique email and nick_name",
        "operationId" : "person_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/authentication_email" : {
      "post" : {
        "tags" : [ "Person" ],
        "summary" : "send authentication email",
        "description" : "sends authentication email, if user did not get the first one from the registration",
        "operationId" : "person_authenticationSendEmail",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Authentication"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "404" : {
            "description" : "Not found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/password/recovery_mail" : {
      "post" : {
        "tags" : [ "Access" ],
        "summary" : "send password recovery email",
        "description" : "sends email with link for changing forgotten password",
        "operationId" : "person_passwordRecoverySendEmail",
        "schemes" : [ "https" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Password_RecoveryEmail"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/password/recovery" : {
      "put" : {
        "tags" : [ "Access" ],
        "summary" : "change person password",
        "description" : "changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens",
        "operationId" : "person_passwordRecovery",
        "schemes" : [ "https" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Password_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/{person_id}" : {
      "get" : {
        "tags" : [ "Person" ],
        "summary" : "get Person",
        "description" : "get Person by id",
        "operationId" : "person_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "person_id",
          "in" : "path",
          "description" : "person_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Person"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Person" ],
        "summary" : "edit Person basic information",
        "description" : "Edit person basic information",
        "operationId" : "person_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "person_id",
          "in" : "path",
          "description" : "person_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Update"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Person"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Person.edit_permission" : "true"
        }
      }
    },
    "/person/all" : {
      "get" : {
        "tags" : [ "Person" ],
        "summary" : "get all Person",
        "description" : "get all Persons",
        "operationId" : "person_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Person"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/connection/all" : {
      "get" : {
        "tags" : [ "Person" ],
        "summary" : "get logged connections",
        "description" : "get all connections, where user is logged",
        "operationId" : "person_getAllConnections",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FloatingPersonToken"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Not Found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "FloatingPersonToken.read_permission" : "Only user can get own connections - its not possible get that from another account!"
        }
      }
    },
    "/person/connection/{connection_id}" : {
      "delete" : {
        "tags" : [ "Person" ],
        "summary" : "terminate logging",
        "description" : "You know where the user is logged in. And you can log out this connection. (Terminate token)",
        "operationId" : "remove_Person_Connection",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "description" : "connection_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "404" : {
            "description" : "Not Found object",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "FloatingPersonToken.delete_permission" : "true"
        }
      }
    },
    "/person/validate_entity" : {
      "post" : {
        "tags" : [ "Person" ],
        "summary" : "validate some Entity",
        "description" : "for cyclical validation during registration, key contains 'mail' or 'nick_name'. Or can be used for 'vat_number' as a key.",
        "operationId" : "person_validateProperty",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Entity_Validation_In"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result if it is possible to use",
            "schema" : {
              "$ref" : "#/definitions/Entity_Validation_Out"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/change_property" : {
      "post" : {
        "tags" : [ "Person" ],
        "summary" : "change person login info",
        "description" : "Request password or email change. API does not change password or email, only sends email for authorization of the change and holds values in different object.JSON value 'property' contains only 'password' or 'email'",
        "operationId" : "person_changeLoginProperty",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_ChangeProperty"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/picture/upload" : {
      "put" : {
        "tags" : [ "Person" ],
        "summary" : "upload Person picture",
        "description" : "Uploads personal photo. Picture must be smaller than 800 KB and its dimensions must be between 50 and 400 pixels. If user already has a picture, it will be replaced by the new one. API requires base64 Content-Type, name of the property is 'file'.",
        "operationId" : "person_uploadPicture",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Base64_File"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/person/picture/remove" : {
      "put" : {
        "tags" : [ "Person" ],
        "summary" : "remove Person picture",
        "description" : "Removes picture of logged person",
        "operationId" : "person_removePicture",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/b_program/{project_id}" : {
      "post" : {
        "tags" : [ "B_Program" ],
        "summary" : "create new B_Program",
        "description" : "create new B_Program",
        "operationId" : "new_b_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/BProgram"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Project.update_permission" : "true"
        }
      }
    },
    "/b_program/{b_program_id}" : {
      "get" : {
        "tags" : [ "B_Program" ],
        "summary" : "get B Program",
        "description" : "get B_Program object",
        "operationId" : "get_b_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BProgram"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true"
        }
      },
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "edit B_Program",
        "description" : "edit basic information in B_Program object",
        "operationId" : "edit_b_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BProgram"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "B_Program" ],
        "summary" : "remove B Program",
        "description" : "remove B_Program object",
        "operationId" : "remove_b_Program",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.delete_permission" : "true"
        }
      }
    },
    "/b_program/version/{version_id}" : {
      "get" : {
        "tags" : [ "B_Program" ],
        "summary" : "get B Program version",
        "description" : "get B_Program version object",
        "operationId" : "get_b_Program_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program_Version"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.read_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "B_Program" ],
        "summary" : "remove B Program version",
        "description" : "remove B_Program version object",
        "operationId" : "remove_b_Program_version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.delete_permission" : "true"
        }
      }
    },
    "/b_program/version/{b_program_id}" : {
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "create new Version of B Program",
        "description" : "edit Blocko program / new Version in B_Program object",
        "operationId" : "update_b_program_new_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_Version_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/b_program/list/{page_number}" : {
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "get B_Program by Filter",
        "description" : "get B_Program List",
        "operationId" : "get_b_Program_by_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program_List"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "B_Program_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/instance/uploadToCloud/{version_id}" : {
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "upload B Program (version) to cloud",
        "description" : "upload version of B Program to cloud. Its possible have only one version from B program in cloud. If you uploud new one - old one will be replaced",
        "operationId" : "upload_b_Program_ToCloud",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_Upload_Instance"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully uploaded",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/instance/shut_down/{instance_name}" : {
      "put" : {
        "tags" : [ "Instance" ],
        "summary" : "shutDown Instance by Instnace Id",
        "description" : "",
        "operationId" : "instance_shut_down",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance_name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/instance/project/{project_id}" : {
      "get" : {
        "tags" : [ "Instance" ],
        "summary" : "get Instance by Project ID",
        "description" : "get list of instances details under project id",
        "operationId" : "get_b_program_instance_under_project",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully uploaded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Instance_Short_Detail"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/instance/get/{instance_id}" : {
      "get" : {
        "tags" : [ "Instance" ],
        "summary" : "get Instance by instance_id",
        "description" : "get unique instance under Blocko program (now its 1:1) we are not supporting multi-instance schema yet",
        "operationId" : "get_b_program_instance",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully uploaded",
            "schema" : {
              "$ref" : "#/definitions/HomerInstance"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/instance/filter" : {
      "put" : {
        "tags" : [ "Instance" ],
        "summary" : "get Instance with filter parameters",
        "description" : "Get List of Instances. Acording by permission - system return only Instance from project, where is user owner or all Instances if user have static Permission key",
        "operationId" : "get_b_program_instance_by_filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Instance_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Instance_List"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/instance/grid_app" : {
      "put" : {
        "tags" : [ "Instance" ],
        "summary" : "change settings on Grid App in Instance",
        "description" : "",
        "operationId" : "instance_change_settings_grid_App",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Instance_GridApp_Settings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Model_MProgramInstanceParameter"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/instance_record/get/{instance_record_id}" : {
      "get" : {
        "tags" : [ "Instance" ],
        "summary" : "get Instance Record by instance_record_id",
        "description" : "get unique instance under Blocko program (now its 1:1) we are not supporting multi-instance schema yet",
        "operationId" : "get_b_program_instance_record",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance_record_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/HomerInstanceRecord"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/typeOfBlock" : {
      "get" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "get all Type of Block list",
        "description" : "get all groups for BlockoBlocks -> Type of block",
        "operationId" : "typeOfBlock_getAll",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfBlock"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "create new Type of Block",
        "description" : "creating group for BlockoBlocks -> Type of block",
        "operationId" : "typeOfBlock_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBlock_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBlock"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "TypeOfBlock_create_permission" : "create: If user have Project.update_permission = true, you can create TypeOfBlock on this Project - Or you need static/dynamic permission key if user want create public TypeOfBlock"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "TypeOfBlock_create_permission"
        }
      }
    },
    "/typeOfBlock/{type_of_block_id}" : {
      "get" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "get TypeOfBlock ",
        "description" : "get BlockoBlock ",
        "operationId" : "typeOfBlock_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "type_of_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBlock"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "TypeOfBlock_read_permission" : "read: If user have Project.read_permission = true, you can read TypeOfBlock on this Project ( You get ids of list of TypeOfBLocks in object \"project\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Project == null - Public TypeOfBlock" : "Permission not Required!",
          "Static Permission key" : "TypeOfBlock_create_permission"
        }
      },
      "put" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "edit Type of Block",
        "description" : "edit Type of block object",
        "operationId" : "typeOfBlock_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "type_of_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBlock_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBlock"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBlock.edit_permission" : "true",
          "Static Permission key" : "TypeOfBlock_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "delete Type of Block",
        "description" : "delete group for BlockoBlocks -> Type of block",
        "operationId" : "typeOfBlock_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "type_of_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBlock.delete_permission" : "true",
          "Static Permission key" : "TypeOfBlock_delete_permission"
        }
      }
    },
    "/typeOfBlock/list/{page_number}" : {
      "put" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "get TypeOfBlock by Filter",
        "description" : "get TypeOfBlock List",
        "operationId" : "typeOfBlock_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Type_Of_Block_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Type_Of_Block_List"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "TypeOfBlock_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/typeOfBlock/order/up/{type_of_block_id}" : {
      "put" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "manual order UP for Type of Block list",
        "description" : "set up order",
        "operationId" : "typeOfBlock_order_up",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/typeOfBlock/order/down/{type_of_block_id}" : {
      "put" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "manual order Down for Type of Block list",
        "description" : "set up order",
        "operationId" : "typeOfBlock_order_down",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "type_of_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/blockoBlock" : {
      "post" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "create new Block",
        "description" : "creating new independent Block object for Blocko tools",
        "operationId" : "blockoBlock_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlock"
            }
          },
          "400" : {
            "description" : "Something went wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlock_create_permission" : "create: If user have TypeOfBlock.update_permission = true, you can create new BlockoBlocks on this TypeOfBlock - Or you need static/dynamic permission key if user want create BlockoBlock in public TypeOfBlock"
        },
        "x-permission_required" : {
          "TypeOfBlocko.update_permission" : "true",
          "Static Permission key" : "BlockoBlock_create_permission"
        }
      }
    },
    "/blockoBlock/{blocko_block_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get BlockoBlock",
        "description" : "get independent BlockoBlock object",
        "operationId" : "blockoBlock_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlock"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlock_read_permission" : "read: If user can read TypeOfBlock, than can read all BlockoBlocks from list of TypeOfBlock ( You get ids of list of BlockoBlocks in object \"BlockoBlocks\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "BlockoBlock.read_permission" : "true",
          "Static Permission key" : "BlockoBlock_read_permission"
        }
      },
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "edit basic information of the BlockoBlock",
        "description" : "update basic information (name, and description) of the independent BlockoBlock",
        "operationId" : "blockoBlock_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlock"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlock.edit_permission" : "true",
          "Static Permission key" : "BlockoBlock_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "delete BlockoBlock",
        "description" : "delete BlockoBlock",
        "operationId" : "blockoBlock_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlock.delete_permission" : "true",
          "Static Permission key" : "BlockoBlock_delete_permission"
        }
      }
    },
    "/blockoBlock/version/{blocko_block_version_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get version of the BlockoBlock",
        "description" : "get version (content) from independent BlockoBlock",
        "operationId" : "blockoBlockVersion_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_version_id",
          "in" : "path",
          "description" : "blocko_block_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlockVersion"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_read_permission" : "read: If user can read BlockoBlock, than can read all Versions from list of BlockoBlock ( You get ids of list of version in object \"BlockoBlocks\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "BlockoBlock.read_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_read_permission"
        }
      },
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "edit BlockoBlock version",
        "description" : "You can edit only basic information of the version. If you want to update the code, you have to create a new version!",
        "operationId" : "blockoBlockVersion_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_version_id",
          "in" : "path",
          "description" : "blocko_block_version_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_BlockoVersion_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlockVersion"
            }
          },
          "400" : {
            "description" : "Something went wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlockVersion.edit_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "delete BlockoBlock version",
        "description" : "delete BlockoBlock version",
        "operationId" : "blockoBlockVersion_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_version_id",
          "in" : "path",
          "description" : "blocko_block_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlockVersion.delete_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_delete_permission"
        }
      }
    },
    "/blockoBlock/list/{page_number}" : {
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get BlockoBlock by Filter",
        "description" : "get BlockoBlock List",
        "operationId" : "blockoBlock_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Blocko_Block_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Blocko_Block_List"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlock_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/blockoBlock/version/{blocko_block_id}" : {
      "post" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "create BlockoBlock version",
        "description" : "new BlockoBlock version",
        "operationId" : "blockoBlockVersion_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_BlockoVersion_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlockVersion"
            }
          },
          "400" : {
            "description" : "Something went wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_create_permission" : "create: If user have BlockoBlock.update_permission = true, you can create new version of BlockoBlocks on this BlockoBlock - Or you need static/dynamic permission key if user want create version of BlockoBlock in public BlockoBlock in public TypeOfBlock"
        },
        "x-permission_required" : {
          "BlockoBlock.update_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_create_permission"
        }
      }
    },
    "/blockoBlock/version/all/{blocko_block_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get all BlockoBlock version",
        "description" : "get all versions (content) from independent BlockoBlock",
        "operationId" : "blockoBlockVersion_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_BlockoVersion_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BlockoBlockVersion"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_read_permission" : "read: If user can read BlockoBlock, than can read all Versions from list of BlockoBlock ( You get ids of list of version in object \"BlockoBlocks\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "BlockoBlock.read_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_read_permission"
        }
      }
    },
    "/blockoBlock/version/make_public/{blocko_block_version_id}" : {
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "make BlockoBlock version public",
        "description" : "sets Approval_state to pending",
        "operationId" : "blockoBlockVersion_makePublic",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_version_id",
          "in" : "path",
          "description" : "blocko_block_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlockVersion"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_edit_permission" : "If user has BlockoBlock.update_permission"
        },
        "x-permission_required" : {
          "BlockoBlockVersion.edit_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_edit_permission"
        }
      }
    },
    "/blockoBlock/order/up/{blocko_block_id}" : {
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "manual order UP for Blocko Block list",
        "description" : "set up order",
        "operationId" : "blockoBlock_order_up",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/blockoBlock/order/down/{blocko_block_id}" : {
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "manual order Down for Blocko Block list",
        "description" : "set up order",
        "operationId" : "blockoBlock_order_down",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/actualization_procedure/{actualization_procedure_id}" : {
      "get" : {
        "tags" : [ "Actualization" ],
        "summary" : "get actualization Procedure",
        "description" : "get Actualization Procedure by ID",
        "operationId" : "get_Actualization_Procedure",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "actualization_procedure_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/ActualizationProcedure"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/actualization_procedure/project/{project_id}" : {
      "get" : {
        "tags" : [ "Actualization" ],
        "summary" : "get actualization Procedure by Project",
        "description" : "get actualization Procedure by Project",
        "operationId" : "get_Actualization_Procedures_by_project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ActualizationProcedure"
              }
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/m_project/{project_id}" : {
      "post" : {
        "tags" : [ "M_Program" ],
        "summary" : "Create new M_Project",
        "description" : "M_Project is package for M_Programs -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one M_program",
        "operationId" : "new_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Project_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Project_create_permission" : "create: If user have Project.update_permission = true, you can create M_project on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "M_Project_create"
        }
      }
    },
    "/m_project/{m_project_id}" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get M_Project",
        "description" : "get M_Project by query = m_project_id",
        "operationId" : "get_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Project.read_permission" : "read: If user have Project.read_permission = true, you can read M_project on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.read_permission" : "true",
          "Dynamic Permission key" : "M_Project_read.{project_id}",
          "Static Permission key" : "M_Project_read"
        }
      },
      "put" : {
        "tags" : [ "M_Program" ],
        "summary" : "edit M_Project",
        "description" : "edit basic information in M_Project by query = m_project_id",
        "operationId" : "edit_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Project_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "M_Project.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "M_Program" ],
        "summary" : "remove M_Project",
        "description" : "remove M_Project by query = m_project_id",
        "operationId" : "remove_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "M_Project.delete_permission" : "true"
        }
      }
    },
    "/m_project/interface_collection/{m_project_id}" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get accessible interface from M_Project",
        "description" : "get accessible interface from M_Project",
        "operationId" : "get_M_Project_Interface_collection",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project_interface"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Project.read_permission" : "read: If user have Project.read_permission = true, you can read M_project on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.remove_permission" : "true",
          "Dynamic Permission key" : "M_Project_read.{project_id}",
          "Static Permission key" : "M_Project_read"
        }
      }
    },
    "/m_program/{m_project_id}" : {
      "post" : {
        "tags" : [ "M_Program" ],
        "summary" : "Create new M_Program",
        "description" : "creating new M_Program",
        "operationId" : "new_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Program_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/M_Program"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Program.create_permission" : "create: If user have M_Project.update_permission = true, you can create M_Program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.update_permission" : "true",
          "Static Permission key" : "M_Program_create"
        }
      }
    },
    "/m_program/version/{m_program_id}" : {
      "post" : {
        "tags" : [ "M_Program" ],
        "summary" : "Create new Version of M_Program",
        "description" : "creating new Version M_Program",
        "operationId" : "new_M_Program_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_program_id",
          "in" : "path",
          "description" : "m_program_id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Swagger_M_Program_Version_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/M_Program_Version"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Program.create_permission" : "create: If user have M_Project.update_permission = true, you can create M_Program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.update_permission" : "true",
          "Static Permission key" : "M_Program_create"
        }
      }
    },
    "/m_program/version/{m_program_version_id}" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get M_Program Version",
        "description" : "get M_Program Version by quarry m_program_version_id",
        "operationId" : "get_M_Program_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_program_version_id",
          "in" : "path",
          "description" : "m_program_version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Program_Version"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Program.read_permission" : "read: If user have M_Project.read_permission = true, you can create M_program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Program.read_permission" : "true",
          "Dynamic Permission key" : "M_Program_read.{project_id}",
          "Static Permission key" : "M_Program_read"
        }
      },
      "delete" : {
        "tags" : [ "M_Program" ],
        "summary" : "Remove  Version of M_Program",
        "description" : "remove version of M_Program",
        "operationId" : "remove_M_Program_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_program_version_id",
          "in" : "path",
          "description" : "m_program_version_id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            }
          },
          "200" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Program.remove_permission" : "read: If user have M_Project.read_permission = true, you can create M_program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.update_permission" : "true",
          "Static Permission key" : "M_Program_remove"
        }
      }
    },
    "/m_program/{m_progrm_id}" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get M_Program",
        "description" : "get M_Program by quarry m_program_id",
        "operationId" : "get_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_progrm_id",
          "in" : "path",
          "description" : "m_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Program"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "M_Program.read_permission" : "read: If user have M_Project.read_permission = true, you can create M_program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Program.read_permission" : "true",
          "Dynamic Permission key" : "M_Program_read.{project_id}",
          "Static Permission key" : "M_Program_read"
        }
      },
      "put" : {
        "tags" : [ "M_Program" ],
        "summary" : "update M_Program",
        "description" : "update m_project - in this case we are not support versions of m_project",
        "operationId" : "edit_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_progrm_id",
          "in" : "path",
          "description" : "m_program_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Program_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "M_Program.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "M_Program" ],
        "summary" : "remove M_Program",
        "description" : "remove M_Program by quarry = m_program_id",
        "operationId" : "remove_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_progrm_id",
          "in" : "path",
          "description" : "m_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "M_Program.delete_permission" : "true"
        }
      }
    },
    "/m_program/app/token/{qr_token}" : {
      "get" : {
        "tags" : [ "APP-Api" ],
        "summary" : "get M_Program by generated token",
        "description" : "get M_Program by token",
        "operationId" : "get_M_Program_byQR_Token_forMobile",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "qr_token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Terminal_Connection_Summary"
            }
          },
          "400" : {
            "description" : "Bad Request - Probably token is not valid anymore",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "477" : {
            "description" : "External Server is offline",
            "schema" : {
              "$ref" : "#/definitions/Server Offline"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "M_Program.read_qr_token_permission" : "true",
          "Dynamic Permission key" : "M_Program_read.{project_id}",
          "Static Permission key" : "M_Program_read"
        }
      }
    },
    "/websocket/terminal/identificator/{terminal_id}" : {
      "put" : {
        "tags" : [ "APP-Api" ],
        "summary" : "check Terminal terminal_id",
        "description" : "For every app (terminal) opening you have to valid your terminal_id.",
        "operationId" : "check_identifiactor",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "terminal_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Grid_Terminal_Identf"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Valid Identification",
            "schema" : {
              "$ref" : "#/definitions/Grid_Terminal"
            }
          },
          "400" : {
            "description" : "Invalid Identification",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/type_of_widget" : {
      "get" : {
        "tags" : [ "Type-of-Widget" ],
        "summary" : "get all Type of Widget list",
        "description" : "get all groups for GridWidgets -> Type of widget",
        "operationId" : "typeOfWidget_getAll",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfWidget"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Type-of-Widget" ],
        "summary" : "create new Type of Widget",
        "description" : "creating group for GridWidgets -> Type of Widget",
        "operationId" : "typeOfWidget_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfWidget_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfWidget"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "TypeOfWidget_create_permission" : "create: If user have Project.update_permission = true, you can create TypeOfWidget on this Project - Or you need static/dynamic permission key if user want create public TypeOfWidget"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "TypeOfWidget_create_permission"
        }
      }
    },
    "/type_of_widget/{type_of_widget_id}" : {
      "get" : {
        "tags" : [ "Type-of-Widget" ],
        "summary" : "get TypeOfWidget ",
        "description" : "get TypeOfWidget",
        "operationId" : "typeOfWidget_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_widget_id",
          "in" : "path",
          "description" : "type_of_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfWidget"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "TypeOfWidget_read_permission" : "read: If user have Project.read_permission = true, you can read TypeOfWidget on this Project ( You get ids of list of TypeOfWidget in object \"project\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Project == null - Public TypeOfWidget" : "Permission not Required!",
          "Static Permission key" : "TypeOfWidget_create_permission"
        }
      },
      "put" : {
        "tags" : [ "Type-of-Widget" ],
        "summary" : "edit Type of Widget",
        "description" : "edit Type of widget object",
        "operationId" : "typeOfWidget_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_widget_id",
          "in" : "path",
          "description" : "type_of_widget_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfWidget_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfWidget"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "TypeOfWidget.edit_permission" : "true",
          "Static Permission key" : "TypeOfWidget_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Type-of-Widget" ],
        "summary" : "delete Type of Widget",
        "description" : "delete group for GridWidgets -> Type of widget",
        "operationId" : "typeOfWidget_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_widget_id",
          "in" : "path",
          "description" : "type_of_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "TypeOfWidget.delete_permission" : "true",
          "Static Permission key" : "TypeOfWidget_delete_permission"
        }
      }
    },
    "/type_of_widget/list/{page_number}" : {
      "put" : {
        "tags" : [ "Type-of-Widget" ],
        "summary" : "get TypeOfWidget by Filter",
        "description" : "get TypeOfWidget List",
        "operationId" : "typeOfWidget_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Type_Of_Widget_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Type_Of_Widget_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "TypeOfWidget_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/type_of_widget/order/up/{type_of_widget_id}" : {
      "put" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "manual order UP for Type of Block list",
        "description" : "set up order",
        "operationId" : "typeOfWidget_order_up",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_widget_id",
          "in" : "path",
          "description" : "type_of_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/type_of_widget/order/down/{type_of_widget_id}" : {
      "put" : {
        "tags" : [ "Type-of-Block" ],
        "summary" : "manual order Down for Type of Block list",
        "description" : "set up order",
        "operationId" : "typeOfWidget_order_down",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_widget_id",
          "in" : "path",
          "description" : "type_of_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/grid_widget" : {
      "post" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "create new Widget",
        "description" : "creating new independent Widget object for Grid tools",
        "operationId" : "gridWidget_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GridWidget_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/GridWidget"
            }
          },
          "400" : {
            "description" : "Something went wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidget_create_permission" : "create: If user have TypeOfWidget.update_permission = true, you can create new GridWidgets on this TypeOfWidget - Or you need static/dynamic permission key if user want create GridWidget in public TypeOfWidget"
        },
        "x-permission_required" : {
          "TypeOfWidget.update_permission" : "true",
          "Static Permission key" : "GridWidget_create_permission"
        }
      }
    },
    "/grid_widget/{grid_widget_id}" : {
      "get" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "get GridWidget",
        "description" : "get independent GridWidget object",
        "operationId" : "gridWidget_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/GridWidget"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidget_read_permission" : "read: If user can read TypeOfWidget, than can read all GridWidgets from list of TypeOfWidget ( You get ids of list of GridWidgets in object \"GridWidgets\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "GridWidget.read_permission" : "true",
          "Static Permission key" : "GridWidget_read_permission"
        }
      },
      "put" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "edit basic information of the GridWidget",
        "description" : "update basic information (name, and description) of the independent GridWidget",
        "operationId" : "gridWidget_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GridWidget_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/GridWidget"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "GridWidget.edit_permission" : "true",
          "Static Permission key" : "GridWidget_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "delete GridWidget",
        "description" : "delete GridWidget",
        "operationId" : "gridWidget_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "GridWidget.delete_permission" : "true",
          "Static Permission key" : "GridWidget_delete_permission"
        }
      }
    },
    "/grid_widget/version/{grid_widget_version_id}" : {
      "get" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "get version of the GridWidget",
        "description" : "get version (content) from independent GridWidget",
        "operationId" : "gridWidgetVersion_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_version_id",
          "in" : "path",
          "description" : "grid_widget_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/GridWidgetVersion"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidgetVersion_read_permission" : "read: If user can read GridWidget, than can read all Versions from list of GridWidgets ( You get ids of list of version in object \"GridWidgets\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "GridWidget.read_permission" : "true",
          "Static Permission key" : "GridWidgetVersion_read_permission"
        }
      },
      "put" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "edit GridWidget version",
        "description" : "You can edit only basic information of the version. If you want to update the code, you have to create a new version!",
        "operationId" : "gridWidgetVersion_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_version_id",
          "in" : "path",
          "description" : "grid_widget_version_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GridWidgetVersion_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/GridWidgetVersion"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "GridWidgetVersion.edit_permission" : "true",
          "Static Permission key" : "GridWidgetVersion_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "delete GridWidget version",
        "description" : "delete GridWidget version",
        "operationId" : "gridWidgetVersion_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_version_id",
          "in" : "path",
          "description" : "grid_widget_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "GridWidgetVersion.delete_permission" : "true",
          "Static Permission key" : "GridWidgetVersion_delete_permission"
        }
      }
    },
    "/grid_widget/list/{page_number}" : {
      "put" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "get GridWidget by Filter",
        "description" : "get GridWidget List",
        "operationId" : "gridWidget_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GridWidget_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/GridWidget_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidget_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/grid_widget/version/{grid_widget_id}" : {
      "post" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "create GridWidget version",
        "description" : "new GridWidget version",
        "operationId" : "gridWidgetVersion_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GridWidgetVersion_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/GridWidgetVersion"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidgetVersion_create_permission" : "create: If user have GridWidget.update_permission = true, you can create new version of GridWidgets on this GridWidget - Or you need static/dynamic permission key if user want create version of GridWidget in public GridWidget in public TypeOfWidget"
        },
        "x-permission_required" : {
          "GridWidget.update_permission" : "true",
          "Static Permission key" : "GridWidgetVersion_create_permission"
        }
      }
    },
    "/grid_widget/version/all/{grid_widget_id}" : {
      "get" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "get all GridWidget version",
        "description" : "get all versions (content) from independent GridWidget",
        "operationId" : "gridWidgetVersion_getAll",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GridWidgetVersion_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GridWidgetVersion"
              }
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidgetVersion_read_permission" : "read: If user can read GridWidget, than can read all Versions from list of GridWidgets ( You get ids of list of version in object \"GridWidgets\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "GridWidget.read_permission" : "true",
          "Static Permission key" : "GridWidgetVersion_read_permission"
        }
      }
    },
    "/grid_widget/version/make_public/{grid_widget_version_id}" : {
      "put" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "make GridWidget version public",
        "description" : "sets Approval_state to pending",
        "operationId" : "gridWidgetVersion_makePublic",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_version_id",
          "in" : "path",
          "description" : "grid_widget_version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/GridWidgetVersion"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "GridWidgetVersion_edit_permission" : "If user has GridWidget.update_permission"
        },
        "x-permission_required" : {
          "GridWidgetVersion.edit_permission" : "true",
          "Static Permission key" : "GridWidgetVersion_edit_permission"
        }
      }
    },
    "/grid_widget/order/up/{grid_widget_id}" : {
      "put" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "manual order UP for grid Widget list",
        "description" : "set up order",
        "operationId" : "gridWidget_order_up",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/grid_widget/order/down/{grid_widget_id}" : {
      "put" : {
        "tags" : [ "Grid-Widget" ],
        "summary" : "manual order Down for  grid Widgetlist",
        "description" : "set up order",
        "operationId" : "gridWidget_order_down",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grid_widget_id",
          "in" : "path",
          "description" : "grid_widget_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/websocket/terminal/identificator" : {
      "put" : {
        "tags" : [ "APP-Api" ],
        "summary" : "get Terminal terminal_id",
        "description" : "Only for Grid Terminals! Before when you want connect terminal (grid) application with Tyrion throw WebSocker. You need unique identification key. If Person loggs to you application Tyrion connects this device with Person. Try to save this key to cookies or on mobile device, or you have to ask every time again",
        "operationId" : "get_identificator",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Grid_Terminal_Identf"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Grid_Terminal"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/secure/role" : {
      "post" : {
        "tags" : [ "Role" ],
        "summary" : "create new Role",
        "description" : "If you want create new Role in system. You need permission for that or have right system Roles",
        "operationId" : "new_Role",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SecurityRole_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/SecurityRole"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/secure/permission/all" : {
      "get" : {
        "tags" : [ "Permission" ],
        "summary" : "get all system Permissions",
        "description" : "Get all user Permission. You need permission for that or have right system Roles",
        "operationId" : "get_Permission_All",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Permission"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Public" : "Without Permission"
        }
      }
    },
    "/secure/role/person/{mail}/{role_id}" : {
      "put" : {
        "tags" : [ "Role", "Person" ],
        "summary" : "add Person to Role (Group) ",
        "description" : "If you set Role to Person. You need permission for that or have right system Roles",
        "operationId" : "add_Role_Person",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mail",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "SecurityRole_update" : "true"
        }
      }
    },
    "/secure/role/all" : {
      "get" : {
        "tags" : [ "Role" ],
        "summary" : "get all Role from system",
        "description" : "If you set Role to Person. You need permission for that or have right system Roles",
        "operationId" : "get_Role_All",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SecurityRole"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/secure/person/system_acces/{person_id}" : {
      "get" : {
        "tags" : [ "Role", "Permission", "Person" ],
        "summary" : "get all system person_permissions & Roles",
        "description" : "This api return List of Roles and List of Permission",
        "operationId" : "get_System_Access",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "person_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/System_Access"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/notification/list/{page_number}" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "get latest notification",
        "description" : "Get list of latest user notifications. Server return maximum 25 latest objects. \n\n For get another page (next 25 notifications) call this api with \"page_number\" path parameter. \n\n May missing or you can insert Integer values from page[1,2...,n] in JsonNotification body cannot by documented through swagger. Visit wiki.byzance.cz",
        "operationId" : "notification_getByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. Contain  1,2...  For first call, use 1",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Notification_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/notification/{notification_id}" : {
      "delete" : {
        "tags" : [ "Notifications" ],
        "summary" : "delete notification",
        "description" : "remove notification by id",
        "operationId" : "notification_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "notification_id",
          "in" : "path",
          "description" : "notification_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete Successful",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/notification/read" : {
      "put" : {
        "tags" : [ "Notifications" ],
        "summary" : "mark notifications as read",
        "description" : "Mark notifications as read. Send list with ids",
        "operationId" : "notification_read",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Notification_Read"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully marked as read",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/notification/unconfirmed" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "get unconfirmed notifications",
        "description" : "This API should by called right after user logs in. Sends notifications which require confirmation via websocket.",
        "operationId" : "notifications_getUnconfirmed",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/notification/confirm/{notification_id}" : {
      "put" : {
        "tags" : [ "Notifications" ],
        "summary" : "confirm notification",
        "description" : "Confirms notification",
        "operationId" : "notification_confirm",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "notification_id",
          "in" : "path",
          "description" : "notification_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Notification_Confirm"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/library" : {
      "post" : {
        "tags" : [ "Library" ],
        "summary" : "create new Library",
        "description" : "Create Library for C programs ",
        "operationId" : "library_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Library_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Library"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Library_create"
        }
      }
    },
    "/library/{library_id}" : {
      "get" : {
        "tags" : [ "Library" ],
        "summary" : "get Library",
        "description" : "if you want to get Library.",
        "operationId" : "library_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Library"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "Library" ],
        "summary" : "update Library",
        "description" : "Update Library",
        "operationId" : "library_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Library_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Library"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Library_edit"
        }
      },
      "delete" : {
        "tags" : [ "Library" ],
        "summary" : "delete Library",
        "description" : "For remove Library",
        "operationId" : "library_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Static Permission key" : "Library_delete"
        }
      }
    },
    "/library/list/{page_number}" : {
      "put" : {
        "tags" : [ "Library" ],
        "summary" : "get List of Libraries details by filter",
        "description" : "if you want to get Libraries filtered by specific parameters. For private Libraries under project set project_id, for all public use empty JSON",
        "operationId" : "library_getByFilter",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. Contain  1,2...n. For first call, use 1",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Library_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Library_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/library/version/{library_id}" : {
      "post" : {
        "tags" : [ "Library" ],
        "summary" : "new Version of Library",
        "description" : "If you want add new code to Library",
        "operationId" : "libraryVersion_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Library_Version_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Library_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Library_update"
        }
      }
    },
    "/library/version/{version_id}" : {
      "get" : {
        "tags" : [ "Library" ],
        "summary" : "get Library Version",
        "description" : "get Version of Library by query = version_id",
        "operationId" : "libraryVersion_get",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Library_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Library.Version.read_permission" : "read: If user have \"Object\".read_permission = true, you can read / get version on this Object - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Static Permission key" : "ImporLibrary_read"
        }
      },
      "put" : {
        "tags" : [ "Library" ],
        "summary" : "update basic information in Version of Library",
        "description" : "For update basic (name and description) information in Version of Library. If you want update code. You have to create new version. And after that you can delete previous version",
        "operationId" : "libraryVersion_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Library_Version"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Library_edit"
        }
      },
      "delete" : {
        "tags" : [ "Library" ],
        "summary" : "delete Version in Library",
        "description" : "delete Library by query = version_id",
        "operationId" : "libraryVersion_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Library_delete"
        }
      }
    },
    "/project/{project_id}" : {
      "get" : {
        "tags" : [ "Project" ],
        "summary" : "get Project",
        "description" : "get Projects by project_id",
        "operationId" : "project_get",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_description" : {
          "Project.read_permission" : "read: For all project: User can read project on API: {GET /project) - get Project by logged Person "
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Dynamic Permission key" : "Project_read.{project_id}",
          "Static Permission key" : "Project_read"
        }
      },
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "edit Project",
        "description" : "edit ne Project",
        "operationId" : "project_update",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Project.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "Project" ],
        "summary" : "delete Project",
        "description" : "delete Projects by project_id",
        "operationId" : "project_delete",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Project.delete_permission" : "true"
        }
      }
    },
    "/project" : {
      "get" : {
        "tags" : [ "Project" ],
        "summary" : "get Project by logged Person",
        "description" : "get all Projects by logged Person",
        "operationId" : "project_getByUser",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Project"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "create new Project",
        "description" : "create new Project",
        "operationId" : "project_create",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/project/change_participant_state/{project_id}" : {
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "change participant status",
        "description" : "Changes participant status ",
        "operationId" : "project_changeParticipantStatus",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project_Participant_status"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project_participant"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/project/unshareProject/{project_id}" : {
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "unshare Project with Persons",
        "description" : "unshare Project with all users in list: List<person_id>",
        "operationId" : "project_removeParticipant",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ShareProject_Person"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Project.unshare_permission" : "true"
        }
      }
    },
    "/project/shareProject/{project_id}" : {
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "share Project with Users",
        "description" : "sends Invitation to all users in list: List<persons_mail>",
        "operationId" : "project_invite",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ShareProject_Person"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        },
        "x-permission_required" : {
          "Project.share_permission" : "true"
        }
      }
    },
    "/homer_server" : {
      "get" : {
        "tags" : [ "External Server" ],
        "summary" : "get all Blocko Servers",
        "description" : "get all Blocko Servers",
        "operationId" : "get_All_Homer_Server",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/HomerServer"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Cloud_Homer_Server.read_permission" : "read: User (Admin with privileges) can read public servers, User (Customer) can read own private servers"
        },
        "x-permission_required" : {
          "Cloud_Homer_Server.read_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_read"
        }
      },
      "post" : {
        "tags" : [ "External Server" ],
        "summary" : "Create new Blocko Server",
        "description" : "Create new Gate for Blocko Server",
        "operationId" : "create_Homer_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Cloud_Homer_Server"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/HomerServer"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Cloud_Homer_Server.create_permission" : "create: User (Admin with privileges) can create public cloud cloud_blocko_server where the system uniformly creating Blocko instantiates or (Customer) can create private cloud_blocko_server for own projects"
        },
        "x-permission_required" : {
          "Cloud_Blocko_Server.create_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_creat"
        }
      }
    },
    "/homer_server/edit/{server_id}" : {
      "put" : {
        "tags" : [ "External Server" ],
        "summary" : "edit Compilation Server",
        "description" : "Edit basic information Compilation Server",
        "operationId" : "edit_Homer_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server_id",
          "in" : "path",
          "description" : "unique_identifier ",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Cloud_Homer_Server"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated successfully",
            "schema" : {
              "$ref" : "#/definitions/HomerServer"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Cloud_Homer_Server.edit_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_edit"
        }
      }
    },
    "/homer_server/{server_id}" : {
      "delete" : {
        "tags" : [ "External Server" ],
        "summary" : "remove Compilation Servers",
        "description" : "remove Compilation Servers",
        "operationId" : "delete_Homer_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server_id",
          "in" : "path",
          "description" : "unique_identificator ",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/Forbidden"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Cloud_Homer_Server.delete_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_delete"
        }
      }
    },
    "/logout" : {
      "post" : {
        "tags" : [ "Access", "Person", "APP-Api" ],
        "summary" : "logout",
        "description" : "for logout person - that's deactivate person token ",
        "operationId" : "logout",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged out",
            "schema" : {
              "$ref" : "#/definitions/Result Ok"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/facebook" : {
      "post" : {
        "tags" : [ "Access", "Social-Facebook" ],
        "summary" : "login with Facebook",
        "description" : "For login via Facebook \n\n If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person",
        "operationId" : "Facebook",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SocialNetwork_Login"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Social_Login"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/github" : {
      "post" : {
        "tags" : [ "Access", "Social-GitHub" ],
        "summary" : "login with GitHub",
        "description" : "For login via GitHub \n\n If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person",
        "operationId" : "GitHub",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SocialNetwork_Login"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Social_Login"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/login" : {
      "post" : {
        "tags" : [ "Access", "Person", "APP-Api" ],
        "summary" : "login",
        "description" : "Get access Token",
        "operationId" : "login",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Login"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged",
            "schema" : {
              "$ref" : "#/definitions/Login_Token"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          },
          "705" : {
            "description" : "Account not validated",
            "schema" : {
              "$ref" : "#/definitions/Not Validated"
            }
          }
        }
      }
    },
    "/secure/rest_api_token_validation" : {
      "post" : {
        "tags" : [ "Blocko" ],
        "summary" : "check Request Token for blocko REST-API blocks",
        "description" : "",
        "operationId" : "get_status_request_token",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Blocko_Token_validation_request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Blocko_Token_validation_result"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Not Found"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    },
    "/login/person" : {
      "get" : {
        "tags" : [ "Access", "Person", "Social-GitHub", "Social-Facebook" ],
        "summary" : "get Person by token (after Oauth2 Login -> Facebook, GitHub, Twitter)",
        "description" : "If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists",
        "operationId" : "getPersonByToken",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged",
            "schema" : {
              "$ref" : "#/definitions/Login_Result"
            }
          },
          "400" : {
            "description" : "Invalid body",
            "schema" : {
              "$ref" : "#/definitions/Invalid Body"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error",
            "schema" : {
              "$ref" : "#/definitions/Internal Server Error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "Result" : {
      "type" : "object"
    },
    "Compilation_Ok" : {
      "type" : "object",
      "required" : [ "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "Value is success",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Compilation Result"
    },
    "Compilation_Build_Error" : {
      "type" : "object",
      "required" : [ "adjustedColumn", "code", "codeWhitespace", "column", "endIndex", "filename", "line", "startIndex", "state", "text", "type" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "Value is build_error",
          "readOnly" : true
        },
        "filename" : {
          "type" : "string",
          "readOnly" : true
        },
        "line" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "column" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "readOnly" : true
        },
        "text" : {
          "type" : "string",
          "readOnly" : true
        },
        "codeWhitespace" : {
          "type" : "string",
          "readOnly" : true
        },
        "code" : {
          "type" : "string",
          "readOnly" : true
        },
        "adjustedColumn" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "startIndex" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "endIndex" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Compilation Result"
    },
    "Forbidden" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 403 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "Permission is needed for this action."
    },
    "Not Found" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 404 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "Requested entity was not found"
    },
    "Unauthorized" : {
      "type" : "object",
      "required" : [ "code", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "unauthorized" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 401 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Unauthorized access - please log in",
          "readOnly" : true
        }
      }
    },
    "ExternalServerSideError" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "error" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 500 ]
        },
        "message" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Unknown Error on external server "
    },
    "Server Offline" : {
      "type" : "object",
      "required" : [ "code", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "External servers (compilation, blocko cloud_blocko_server etc.) are offline"
    },
    "Cloud_Compilation_Server_CompilationResult" : {
      "type" : "object",
      "properties" : {
        "interface_code" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "C_Program_Version_Update" : {
      "type" : "object",
      "required" : [ "main" ],
      "properties" : {
        "type_of_board_id" : {
          "type" : "string",
          "description" : "Required only if user compile code not under C++ code version (where compilation can found type_of_board)"
        },
        "main" : {
          "type" : "string"
        },
        "files" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Library_Record"
          }
        },
        "imported_libraries" : {
          "type" : "array",
          "description" : "List ID of libraries version ID",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for new Version of C_Program"
    },
    "Library_Record" : {
      "type" : "object",
      "required" : [ "content", "file_name" ],
      "properties" : {
        "file_name" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for Library_Record"
    },
    "Result Ok" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 200 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User. Server fills the message only when it is important.",
          "readOnly" : true
        }
      }
    },
    "Connected_Board_IN" : {
      "type" : "object",
      "required" : [ "board_id", "c_program_version_id" ],
      "properties" : {
        "board_id" : {
          "type" : "string"
        },
        "c_program_version_id" : {
          "type" : "string"
        }
      }
    },
    "List of Boards" : {
      "type" : "object",
      "required" : [ "board_pairs" ],
      "properties" : {
        "board_pairs" : {
          "type" : "array",
          "description" : "List of Pairs for settings of Backup C_Program Version on boards",
          "items" : {
            "$ref" : "#/definitions/Connected_Board_IN"
          }
        }
      },
      "description" : "Json Model with List of Board ID"
    },
    "EntityBean" : {
      "type" : "object"
    },
    "EntityBeanIntercept" : {
      "type" : "object",
      "required" : [ "changed", "dirty", "dirtyPropertyHash", "dirtyPropertyNames", "dirtyValues", "disableLazyLoad", "embeddedOwner", "embeddedOwnerIndex", "fullyLoadedBean", "lazyLoadFailure", "lazyLoadProperty", "lazyLoadPropertyIndex", "loaded", "loadedPropertyNames", "new", "newOrDirty", "owner", "persistenceContext", "propertyLength", "readOnly", "reference" ],
      "properties" : {
        "persistenceContext" : {
          "$ref" : "#/definitions/PersistenceContext"
        },
        "owner" : {
          "$ref" : "#/definitions/EntityBean"
        },
        "embeddedOwner" : {
          "type" : "number"
        },
        "embeddedOwnerIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "readOnly" : {
          "type" : "boolean"
        },
        "dirty" : {
          "type" : "boolean"
        },
        "disableLazyLoad" : {
          "type" : "boolean"
        },
        "lazyLoadFailure" : {
          "type" : "boolean"
        },
        "fullyLoadedBean" : {
          "type" : "boolean"
        },
        "lazyLoadProperty" : {
          "type" : "string"
        },
        "loadedPropertyNames" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "new" : {
          "type" : "boolean"
        },
        "loaded" : {
          "type" : "array",
          "items" : {
            "type" : "boolean"
          }
        },
        "reference" : {
          "type" : "boolean"
        },
        "newOrDirty" : {
          "type" : "boolean"
        },
        "propertyLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dirtyValues" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ValuePair"
          }
        },
        "dirtyPropertyHash" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dirtyPropertyNames" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "changed" : {
          "type" : "array",
          "items" : {
            "type" : "boolean"
          }
        },
        "lazyLoadPropertyIndex" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "PersistenceContext" : {
      "type" : "object"
    },
    "Processor" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "processor_code", "processor_name", "speed" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "processor_name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "processor_code" : {
          "type" : "string"
        },
        "speed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Processor"
    },
    "ValuePair" : {
      "type" : "object",
      "required" : [ "newValue", "oldValue", "value1", "value2" ],
      "properties" : {
        "newValue" : {
          "type" : "number"
        },
        "oldValue" : {
          "type" : "number"
        },
        "value2" : {
          "type" : "number"
        },
        "value1" : {
          "type" : "number"
        }
      }
    },
    "Invalid Body" : {
      "type" : "object",
      "required" : [ "code", "exception", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "message",
          "readOnly" : true
        },
        "exception" : {
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        }
      },
      "description" : "Provided body is not valid. Something is missing or some field input is not allowed."
    },
    "JsonNode" : {
      "type" : "object",
      "required" : [ "array", "bigDecimal", "bigInteger", "binary", "boolean", "containerNode", "double", "float", "floatingPointNumber", "int", "integralNumber", "long", "missingNode", "nodeType", "null", "number", "object", "pojo", "short", "textual", "valueNode" ],
      "properties" : {
        "array" : {
          "type" : "boolean"
        },
        "null" : {
          "type" : "boolean"
        },
        "binary" : {
          "type" : "boolean"
        },
        "object" : {
          "type" : "boolean"
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "float" : {
          "type" : "boolean"
        },
        "long" : {
          "type" : "boolean"
        },
        "number" : {
          "type" : "boolean"
        },
        "int" : {
          "type" : "boolean"
        },
        "short" : {
          "type" : "boolean"
        },
        "double" : {
          "type" : "boolean"
        },
        "valueNode" : {
          "type" : "boolean"
        },
        "pojo" : {
          "type" : "boolean"
        },
        "containerNode" : {
          "type" : "boolean"
        },
        "missingNode" : {
          "type" : "boolean"
        },
        "integralNumber" : {
          "type" : "boolean"
        },
        "floatingPointNumber" : {
          "type" : "boolean"
        },
        "bigDecimal" : {
          "type" : "boolean"
        },
        "bigInteger" : {
          "type" : "boolean"
        },
        "textual" : {
          "type" : "boolean"
        },
        "boolean" : {
          "type" : "boolean"
        }
      }
    },
    "Processor_New" : {
      "type" : "object",
      "required" : [ "description", "processor_code", "processor_name", "speed" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Length must be between 24 and 255 characters."
        },
        "processor_code" : {
          "type" : "string",
          "description" : "The Processor Code must have at least 4 characters"
        },
        "processor_name" : {
          "type" : "string",
          "description" : "Length must be between 4 and 60 characters."
        },
        "speed" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "description" : "Json Model for new Processor"
    },
    "Producer" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Producer"
    },
    "BootLoader" : {
      "type" : "object",
      "required" : [ "changing_note", "date_of_create", "delete_permission", "description", "edit_permission", "name", "update_permission", "version_identificator" ],
      "properties" : {
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version_identificator" : {
          "type" : "string"
        },
        "changing_note" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of BootLoader"
    },
    "TypeOfBoard" : {
      "type" : "object",
      "required" : [ "connectible_to_internet", "delete_permission", "description", "edit_permission", "id", "main_boot_loader", "name", "picture_link", "register_new_device_permission", "revision" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "connectible_to_internet" : {
          "type" : "boolean"
        },
        "main_boot_loader" : {
          "$ref" : "#/definitions/BootLoader"
        },
        "picture_link" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "processor_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "processor_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "producer_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "producer_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "target_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "register_new_device_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of TypeOfBoard"
    },
    "TypeOfBoard_New" : {
      "type" : "object",
      "required" : [ "compiler_target_name", "connectible_to_internet", "description", "name", "processor_id", "producer_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "compiler_target_name" : {
          "type" : "string",
          "description" : "The description must have at least 4 characters"
        },
        "description" : {
          "type" : "string",
          "description" : "The description must have at least 4 characters"
        },
        "producer_id" : {
          "type" : "string",
          "description" : "Required valid producer_id"
        },
        "processor_id" : {
          "type" : "string",
          "description" : "Required valid processor_id"
        },
        "connectible_to_internet" : {
          "type" : "boolean",
          "description" : "If device can connect to internet"
        }
      },
      "description" : "Json Model for new TypeOfBoard"
    },
    "Board_Bootloader_Update" : {
      "type" : "object",
      "required" : [ "device_ids" ],
      "properties" : {
        "device_ids" : {
          "type" : "array",
          "description" : "Must be unique!!!, The hardware_id must have 20 hexadecimal characters!, It can combination of master devices and others",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Board_for_fast_upload_detail" : {
      "type" : "object",
      "required" : [ "collision", "id", "personal_description", "type_of_board_id", "type_of_board_name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "personal_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "collision" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "NO_COLLISION", "ALREADY_IN_INSTANCE", "PLANNED_UPDATE" ]
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for board with details for fast upload"
    },
    "Board" : {
      "type" : "object",
      "required" : [ "actual_bootloader_id", "actual_bootloader_version_name", "alert_list", "available_bootloader_id", "available_bootloader_version_name", "backup_mode", "date_of_create", "delete_permission", "edit_permission", "generation_description", "hash_for_adding", "id", "mac_address", "main_board", "personal_description", "project_id", "project_name", "read_permission", "status", "type_of_board_id", "type_of_board_name", "update_permission", "updates", "wifi_mac_address" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "hash_for_adding" : {
          "type" : "string"
        },
        "wifi_mac_address" : {
          "type" : "string"
        },
        "mac_address" : {
          "type" : "string"
        },
        "generation_description" : {
          "type" : "string"
        },
        "personal_description" : {
          "type" : "string"
        },
        "backup_mode" : {
          "type" : "string",
          "enum" : [ "STATIC_BACKUP", "AUTO_BACKUP", "NO_BACKUP" ]
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time"
        },
        "status" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Board_Status"
        },
        "updates" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Update_plan_Short_Detail"
          }
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "main_board" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "project_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "actual_bootloader_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "actual_bootloader_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "available_bootloader_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "available_bootloader_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "alert_list" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "BOOTLOADER_REQUIRED", "RESTART_REQUIRED" ]
          }
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Board"
    },
    "Board_Status" : {
      "type" : "object",
      "required" : [ "actual_c_program_id", "actual_c_program_name", "actual_c_program_version_id", "actual_c_program_version_name", "homer_server_id", "instance_id", "instance_online_status", "server_name", "server_online_status", "status", "where" ],
      "properties" : {
        "server_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "homer_server_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "instance_id" : {
          "type" : "string",
          "description" : "Only if Boar is under person Instance (in Blocko)",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true,
          "enum" : [ "not_yet_first_connected", "offline", "online" ]
        },
        "where" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true,
          "enum" : [ "in_person_instance", "connected_to_server_unregistered", "under_project_virtual_instance", "connected_to_byzance" ]
        },
        "server_online_status" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "instance_online_status" : {
          "type" : "boolean",
          "description" : "Only if Boar is under person Instance (in Blocko)",
          "readOnly" : true
        },
        "b_program_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "b_program_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "b_program_version_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "b_program_version_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_c_program_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_c_program_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_c_program_version_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_c_program_version_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_backup_c_program_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_backup_c_program_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_backup_c_program_version_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_backup_c_program_version_name" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "required_c_programs" : {
          "type" : "array",
          "description" : "Can be empty",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Update_plan_Short_Detail"
          }
        },
        "required_backup_c_programs" : {
          "type" : "array",
          "description" : "Can be empty",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Update_plan_Short_Detail"
          }
        }
      },
      "description" : "Json Model for Status and all information about embedded Hardware"
    },
    "C_Program_Update_plan_Short_Detail" : {
      "type" : "object",
      "required" : [ "bootloader_id", "bootloader_name", "c_program_id", "c_program_program_name", "c_program_version_id", "c_program_version_name", "date_of_create", "date_of_finish", "firmware_type", "id", "state", "version_identificator" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time"
        },
        "date_of_finish" : {
          "type" : "string",
          "format" : "date-time"
        },
        "firmware_type" : {
          "type" : "string",
          "enum" : [ "FIRMWARE", "BOOTLOADER", "BACKUP", "WIFI" ]
        },
        "state" : {
          "type" : "string",
          "enum" : [ "complete", "canceled", "bin_file_not_found", "not_start_yet", "in_progress", "overwritten", "not_updated", "waiting_for_device", "instance_inaccessible", "homer_server_is_offline", "critical_error" ]
        },
        "c_program_id" : {
          "type" : "string",
          "description" : "only if Firmware_type is firmware or backup",
          "readOnly" : true
        },
        "c_program_version_id" : {
          "type" : "string",
          "description" : "only if Firmware_type is firmware or backup",
          "readOnly" : true
        },
        "c_program_program_name" : {
          "type" : "string",
          "description" : "only if Firmware_type is firmware or backup",
          "readOnly" : true
        },
        "c_program_version_name" : {
          "type" : "string",
          "description" : "only if Firmware_type is firmware or backup",
          "readOnly" : true
        },
        "bootloader_id" : {
          "type" : "string",
          "description" : "only if Firmware_type is bootloader",
          "readOnly" : true
        },
        "bootloader_name" : {
          "type" : "string",
          "description" : "only if Firmware_type is bootloader",
          "readOnly" : true
        },
        "version_identificator" : {
          "type" : "string",
          "description" : "only if Firmware_type is bootloader",
          "readOnly" : true
        }
      },
      "description" : "Json Model with details of C_program>"
    },
    "Board_Personal_Description" : {
      "type" : "object",
      "required" : [ "personal_description" ],
      "properties" : {
        "personal_description" : {
          "type" : "string",
          "description" : "Length must be between 0 and 255 characters."
        }
      },
      "description" : "Json Model for update personal description of Board"
    },
    "Board_Backup_settings" : {
      "type" : "object",
      "required" : [ "board_backup_pair_list" ],
      "properties" : {
        "board_backup_pair_list" : {
          "type" : "array",
          "description" : "List of Pairs for settings of Backup on boards",
          "items" : {
            "$ref" : "#/definitions/Board_backup_pair"
          }
        }
      }
    },
    "Board_backup_pair" : {
      "type" : "object",
      "required" : [ "backup_mode", "board_id" ],
      "properties" : {
        "backup_mode" : {
          "type" : "boolean",
          "description" : "True - for auto_backup. False for static backup. If static c_program_version_id is required!"
        },
        "c_program_version_id" : {
          "type" : "string",
          "description" : "Required if backup_mode is false. C_program_version_id must be compiled and for same type of Board!"
        },
        "board_id" : {
          "type" : "string"
        }
      }
    },
    "Board_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Board"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Board List"
    },
    "Board_filter" : {
      "type" : "object",
      "properties" : {
        "type_of_board_ids" : {
          "type" : "array",
          "description" : "List of typeOfBoard.id",
          "items" : {
            "type" : "string"
          }
        },
        "active" : {
          "type" : "string",
          "description" : "Boolean - required in String! \"true\" or \"false \""
        },
        "projects" : {
          "type" : "array",
          "description" : "List of project.id",
          "items" : {
            "type" : "string"
          }
        },
        "producers" : {
          "type" : "array",
          "description" : "List of producer.id",
          "items" : {
            "type" : "string"
          }
        },
        "processors" : {
          "type" : "array",
          "description" : "List of processor.id",
          "items" : {
            "type" : "string"
          }
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Unix in millis - date_of_create - start_time"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Unix in millis - date_of_create - end_time"
        },
        "page_number" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "page_number from 1 to N "
        }
      },
      "description" : "Json Model for Filtering Boards"
    },
    "Board_Registration_Status" : {
      "type" : "object",
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "example" : "CAN_REGISTER",
          "description" : "CAN_REGISTER, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE",
          "readOnly" : true,
          "enum" : [ "CAN_REGISTER", "NOT_EXIST", "ALREADY_REGISTERED_IN_YOUR_ACCOUNT", "ALREADY_REGISTERED", "PERMANENTLY_DISABLED", "BROKEN_DEVICE" ]
        }
      },
      "description" : "Json Model for Status and all information about embedded Hardware"
    },
    "Board_Short_Detail" : {
      "type" : "object",
      "required" : [ "alert_list", "board_online_status", "delete_permission", "edit_permission", "id", "personal_description", "type_of_board_id", "type_of_board_name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "personal_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "alert_list" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "BOOTLOADER_REQUIRED", "RESTART_REQUIRED" ]
          }
        },
        "board_online_status" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model Board - only basic information"
    },
    "Boards_For_Blocko" : {
      "type" : "object",
      "required" : [ "boards", "c_programs", "m_projects", "type_of_boards" ],
      "properties" : {
        "c_programs" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Short_Detail_For_Blocko"
          }
        },
        "type_of_boards" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/TypeOfBoard"
          }
        },
        "boards" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Board_Short_Detail"
          }
        },
        "m_projects" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Project_Short_Detail_For_Blocko"
          }
        }
      },
      "description" : "Json Model for Blocko in Becki for accessible hardware and firmware versions"
    },
    "C_Program_Short_Detail_For_Blocko" : {
      "type" : "object",
      "required" : [ "description", "id", "name", "type_of_board_id", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Versions_Short_Detail_For_Blocko"
          }
        }
      }
    },
    "C_Program_Versions_Short_Detail_For_Blocko" : {
      "type" : "object",
      "required" : [ "id", "version_description", "version_name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "virtual_input_output" : {
          "type" : "string",
          "description" : "It can be null if server has not image of compilation restored in database",
          "readOnly" : true
        }
      }
    },
    "M_Program_Short_Detail_For_Blocko" : {
      "type" : "object",
      "required" : [ "description", "id", "name", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Program_Versions_Short_Detail_For_Blocko"
          }
        }
      }
    },
    "M_Program_Versions_Short_Detail_For_Blocko" : {
      "type" : "object",
      "required" : [ "id", "version_description", "version_name", "virtual_input_output" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "virtual_input_output" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "M_Project_Short_Detail_For_Blocko" : {
      "type" : "object",
      "required" : [ "description", "id", "m_programs", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_programs" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Program_Short_Detail_For_Blocko"
          }
        }
      }
    },
    "C_Program" : {
      "type" : "object",
      "required" : [ "date_of_create", "delete_permission", "edit_permission", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "description" : "minimal length is 8 characters"
        },
        "description" : {
          "type" : "string",
          "description" : "can be empty"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "program_versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Version_Short_Detail"
          }
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "project_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Object represented C_Program in database"
    },
    "C_Program_Version_Short_Detail" : {
      "type" : "object",
      "required" : [ "author", "delete_permission", "status", "update_permission", "version_description", "version_id", "version_name" ],
      "properties" : {
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "compilation_in_progress", "file_with_code_not_found", "json_code_is_broken", "server_was_offline", "compilation_server_error", "compiled_with_code_errors", "successfully_compiled_not_restored", "successfully_compiled_and_restored", "hardware_unstable", "undefined" ]
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "author" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "Json Model for Public Version of C_program"
    },
    "Person_Short_Detail" : {
      "type" : "object",
      "required" : [ "id", "mail", "nick_name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "nick_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "mail" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Person_Short_Detail"
    },
    "Internal Server Error" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "error" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 500 ]
        },
        "message" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "When server is in fault state"
    },
    "C_Program_New" : {
      "type" : "object",
      "required" : [ "name", "project_id", "type_of_board_id" ],
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "name" : {
          "type" : "string",
          "description" : "Length must be between 4 and 60 characters."
        },
        "description" : {
          "type" : "string",
          "description" : "program_description can be null or maximum length of 255 characters."
        },
        "type_of_board_id" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for new C_Program"
    },
    "C_Program_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_program_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual C_Program List"
    },
    "C_program_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "type_of_board_id", "type_of_board_name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model with details of C_program>"
    },
    "C_Program_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get C_Programs of given project"
        }
      },
      "description" : "Json Model for getting C_Program Filter List"
    },
    "C_Program_Version_Public_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Version_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Json Model for Public Version of C_program List"
    },
    "C_Program_Version" : {
      "type" : "object",
      "required" : [ "edit_permission", "remove_permission", "status", "version_object", "virtual_input_output" ],
      "properties" : {
        "version_object" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Version_Object"
        },
        "status" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "compilation_in_progress", "file_with_code_not_found", "json_code_is_broken", "server_was_offline", "compilation_server_error", "compiled_with_code_errors", "successfully_compiled_not_restored", "successfully_compiled_and_restored", "hardware_unstable", "undefined" ]
        },
        "main" : {
          "type" : "string",
          "readOnly" : true
        },
        "files" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Library_Record"
          }
        },
        "imported_libraries" : {
          "type" : "array",
          "description" : "List imported libraries",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Library_Library_Version_pair"
          }
        },
        "virtual_input_output" : {
          "type" : "string",
          "description" : "Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf",
          "readOnly" : true
        },
        "remove_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Version of C_program"
    },
    "Library_Library_Version_pair" : {
      "type" : "object",
      "required" : [ "library_short_detail", "library_version_short_detail" ],
      "properties" : {
        "library_short_detail" : {
          "$ref" : "#/definitions/Library_Short_Detail"
        },
        "library_version_short_detail" : {
          "$ref" : "#/definitions/Library_Version_Short_Detail"
        }
      },
      "description" : "Json Model for Pari With Short detail of Library and Version of Library"
    },
    "Library_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "type_of_board_names", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_names" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Library Short Detail"
    },
    "Library_Version_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "update_permission", "version_description", "version_id", "version_name" ],
      "properties" : {
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "author" : {
          "description" : "Optional value",
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "Json Model for Library_Version_Short_Detail"
    },
    "Version_Object" : {
      "type" : "object",
      "required" : [ "date_of_create", "id", "version_description", "version_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "author" : {
          "$ref" : "#/definitions/Person_Short_Detail"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        }
      },
      "description" : "Model of Version_Object"
    },
    "Bad Request" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "error" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "When is something wrong"
    },
    "C_Program_Version_New" : {
      "type" : "object",
      "required" : [ "main", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "version_description" : {
          "type" : "string",
          "description" : "version_description can be null or maximum length of 255 characters."
        },
        "main" : {
          "type" : "string"
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Library_Record"
          }
        },
        "imported_libraries" : {
          "type" : "array",
          "description" : "Contains IDs of imported Library versions",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for new Version of C_Program"
    },
    "C_Program_Version_Edit" : {
      "type" : "object",
      "required" : [ "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "version_description" : {
          "type" : "string",
          "description" : "version_description can be null or maximum length of 255 characters."
        }
      },
      "description" : "Json Model for edit basic information of C_program Version"
    },
    "Price" : {
      "type" : "object",
      "required" : [ "CZK", "EUR", "USD" ],
      "properties" : {
        "CZK" : {
          "type" : "number",
          "format" : "double",
          "description" : "in Double - show CZK",
          "readOnly" : true
        },
        "EUR" : {
          "type" : "number",
          "format" : "double",
          "description" : "in Double - show âŹ",
          "readOnly" : true
        },
        "USD" : {
          "type" : "number",
          "format" : "double",
          "description" : "in Double - show $",
          "readOnly" : true
        }
      }
    },
    "ProductExtension" : {
      "type" : "object",
      "required" : [ "act_deactivate_permission", "color", "created", "delete_permission", "description", "edit_permission", "id", "name", "order_position", "price", "type" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "project", "log", "database", "rest_api", "support", "instance", "homer_server", "participant" ]
        },
        "order_position" : {
          "type" : "integer",
          "format" : "int32"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "price" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Price"
        },
        "act_deactivate_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of ProductExtension"
    },
    "ProductExtension_New" : {
      "type" : "object",
      "required" : [ "color", "name", "product_id", "type" ],
      "properties" : {
        "product_id" : {
          "type" : "string",
          "description" : "Id of product to extend"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of extension"
        },
        "description" : {
          "type" : "string",
          "description" : "Description must not have more than 255 characters"
        },
        "color" : {
          "type" : "string",
          "description" : "Color of extension"
        },
        "type" : {
          "type" : "string",
          "description" : "Enumerated type of extension",
          "enum" : [ "project", "log", "database", "rest_api", "support", "instance", "homer_server", "participant" ]
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "description" : "Json Model for creating new extension of product."
    },
    "ProductExtension_Type" : {
      "type" : "object",
      "required" : [ "description", "monthly_price", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "monthly_price" : {
          "type" : "number",
          "format" : "double",
          "readOnly" : true
        }
      },
      "description" : "Json Model for ProductExtension_Type"
    },
    "ProductExtension_Edit" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of extension"
        },
        "description" : {
          "type" : "string",
          "description" : "Description must not have more than 255 characters"
        },
        "color" : {
          "type" : "string",
          "description" : "Color"
        }
      },
      "description" : "Json Model for updating extension of product."
    },
    "Pair" : {
      "type" : "object",
      "required" : [ "json_identifier", "user_description" ],
      "properties" : {
        "json_identifier" : {
          "type" : "string",
          "readOnly" : true
        },
        "user_description" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Tariff" : {
      "type" : "object",
      "required" : [ "color", "company_details_required", "description", "id", "identifier", "labels", "name", "payment_method_required" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "company_details_required" : {
          "type" : "boolean"
        },
        "payment_method_required" : {
          "type" : "boolean"
        },
        "color" : {
          "type" : "string"
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TariffLabel"
          }
        },
        "extensions_included" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProductExtension"
          }
        },
        "extensions_optional" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProductExtension"
          }
        },
        "payment_methods" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Pair"
          }
        },
        "payment_currency" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "price" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Price"
        }
      },
      "description" : "Model of Tariff"
    },
    "TariffLabel" : {
      "type" : "object",
      "required" : [ "description", "icon", "label" ],
      "properties" : {
        "label" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "icon" : {
          "type" : "string"
        }
      },
      "description" : "Model of TariffLabel"
    },
    "Invoice" : {
      "type" : "object",
      "required" : [ "created", "id", "invoice_items", "invoice_number", "overdue", "payment_method", "payment_status", "price" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "invoice_number" : {
          "type" : "string",
          "readOnly" : true
        },
        "gw_url" : {
          "type" : "string",
          "description" : "Visible only when the invoice is not paid"
        },
        "created" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "paid" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "overdue" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "invoice_items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/InvoiceItem"
          }
        },
        "payment_method" : {
          "type" : "string",
          "readOnly" : true
        },
        "invoice_pdf_link" : {
          "type" : "string",
          "description" : "Visible only when the invoice is available",
          "readOnly" : true
        },
        "proforma_pdf_link" : {
          "type" : "string",
          "description" : "Visible only when the invoice is available",
          "readOnly" : true
        },
        "require_payment" : {
          "type" : "boolean",
          "description" : "Visible only when the invoice is not paid",
          "readOnly" : true
        },
        "payment_status" : {
          "type" : "string",
          "readOnly" : true
        },
        "price" : {
          "type" : "number",
          "format" : "double",
          "readOnly" : true
        }
      },
      "description" : "Model of Invoice"
    },
    "InvoiceItem" : {
      "type" : "object",
      "required" : [ "currency", "name", "quantity", "unit_name", "vat" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int64"
        },
        "unit_name" : {
          "type" : "string"
        },
        "unit_price" : {
          "type" : "number",
          "format" : "double"
        },
        "currency" : {
          "type" : "string",
          "enum" : [ "CZK", "EUR", "USD" ]
        },
        "vat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "unit_price_without_vat" : {
          "type" : "number",
          "format" : "double",
          "readOnly" : true
        },
        "vat_rate" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of InvoiceItem"
    },
    "Payment_Details" : {
      "type" : "object",
      "required" : [ "city", "company_account", "country", "id", "invoice_email", "street", "street_number", "zip_code" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "company_account" : {
          "type" : "boolean"
        },
        "company_name" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_authorized_email" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_authorized_phone" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_web" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_registration_no" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_vat_number" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "full_name" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "street" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "street_number" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "city" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "zip_code" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "country" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "invoice_email" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "bank_account" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Payment_Details"
    },
    "Product" : {
      "type" : "object",
      "required" : [ "active", "created", "extensions", "id", "invoices", "name", "payment_details", "payment_method", "subscription_id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "subscription_id" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "invoices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Invoice"
          }
        },
        "extensions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProductExtension"
          }
        },
        "payment_details" : {
          "$ref" : "#/definitions/Payment_Details"
        },
        "remaining_credit" : {
          "type" : "number",
          "format" : "double",
          "readOnly" : true
        },
        "payment_method" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of Product"
    },
    "Product_New" : {
      "type" : "object",
      "required" : [ "city", "country", "invoice_email", "name", "street", "street_number", "tariff_id", "zip_code" ],
      "properties" : {
        "tariff_id" : {
          "type" : "string",
          "description" : "Required: always, Tariff id"
        },
        "name" : {
          "type" : "string",
          "description" : "Required: always. The name length must be between 4 and 60 characters"
        },
        "payment_method" : {
          "type" : "string",
          "description" : "Required: only in if payment_method_required is true  values =>[bank_transfer, credit_card]",
          "enum" : [ "bank_transfer", "credit_card", "free" ]
        },
        "full_name" : {
          "type" : "string",
          "description" : "Can be null"
        },
        "street" : {
          "type" : "string",
          "description" : "Required: alwaysThe street must have at least 4 characters"
        },
        "street_number" : {
          "type" : "string",
          "description" : "Required: alwaysBut The street_number can be empty"
        },
        "city" : {
          "type" : "string",
          "description" : "Required: alwaysThe city must have at least 2 characters"
        },
        "zip_code" : {
          "type" : "string",
          "description" : "Required: alwaysThe zip_code must have at least 5 digits"
        },
        "country" : {
          "type" : "string",
          "description" : "Required: alwaysThe country must have at least 4 characters"
        },
        "registration_no" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_registration_no must have at least 4 characters - FOR non-EU countriesfor Business account is required registration_no OR vat_number"
        },
        "vat_number" : {
          "type" : "string",
          "description" : "Required: only if account is business & from EU!!! CZ28496639 The VAT_number must have at least 4 charactersfor Business account is required registration_no OR vat_number"
        },
        "company_name" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_name must have at least 4 characters"
        },
        "company_authorized_email" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_authorized_email must have at least 4 characters"
        },
        "company_authorized_phone" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_authorized_phone must have at least 4 characters"
        },
        "company_web" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_web must have at least 4 characters"
        },
        "invoice_email" : {
          "type" : "string",
          "description" : "Required: always, Email must be valid"
        },
        "extension_ids" : {
          "type" : "array",
          "description" : "List of Ids of Extensions",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model if user wants to create new Product for projects"
    },
    "Product_Edit" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Required: always. The name length must be between 4 and 60 characters"
        }
      },
      "description" : "Json Model for Product Edit"
    },
    "Product_Credit" : {
      "type" : "object",
      "required" : [ "credit" ],
      "properties" : {
        "credit" : {
          "type" : "number",
          "format" : "double",
          "description" : "Double number - amount of credit to be bought."
        }
      },
      "description" : "Json Model for buying credit for Product"
    },
    "Tariff_details_edit" : {
      "type" : "object",
      "required" : [ "city", "country", "invoice_email", "street", "street_number", "zip_code" ],
      "properties" : {
        "street" : {
          "type" : "string",
          "description" : "Required: alwaysThe street must have at least 4 characters"
        },
        "street_number" : {
          "type" : "string",
          "description" : "Required: alwaysBut The street_number can be empty"
        },
        "city" : {
          "type" : "string",
          "description" : "Required: alwaysThe city must have at least 4 characters"
        },
        "zip_code" : {
          "type" : "string",
          "description" : "Required: alwaysThe zip_code must have at least 5 digits"
        },
        "country" : {
          "type" : "string",
          "description" : "Required: alwaysThe country must have at least 4 characters"
        },
        "company_account" : {
          "type" : "boolean",
          "description" : "Required: only if user want have business account"
        },
        "registration_no" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_registration_no must have at least 4 characters"
        },
        "vat_number" : {
          "type" : "string",
          "example" : "CZ28496639",
          "description" : "Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters"
        },
        "company_name" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_name must have at least 4 characters"
        },
        "company_authorized_email" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_authorized_email must have at least 4 characters"
        },
        "company_authorized_phone" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters"
        },
        "company_web" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_web url must be valid "
        },
        "invoice_email" : {
          "type" : "string",
          "description" : "Required: always. Email must be valid"
        }
      },
      "description" : "Json Model with List of Board ID"
    },
    "Applicable_Product" : {
      "type" : "object",
      "required" : [ "id", "name", "tariff" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "tariff" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for selecting Product for registration new project"
    },
    "Invoice_full_details" : {
      "type" : "object",
      "required" : [ "invoice", "invoice_items" ],
      "properties" : {
        "invoice" : {
          "$ref" : "#/definitions/Invoice"
        },
        "invoice_items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InvoiceItem"
          }
        }
      },
      "description" : "Json Model for new Producer"
    },
    "Resend_Email" : {
      "type" : "object",
      "properties" : {
        "mail" : {
          "type" : "string",
          "description" : "Email is optional value! If it is empty, default invoice email will be used."
        }
      },
      "description" : "Json Model for change description for Permission"
    },
    "WebSocket_Token" : {
      "type" : "object",
      "required" : [ "websocket_token" ],
      "properties" : {
        "websocket_token" : {
          "type" : "string",
          "description" : "Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. ",
          "readOnly" : true
        }
      },
      "description" : "Json Model that you will get, if login was successful"
    },
    "WebSocket" : {
      "type" : "object",
      "required" : [ "actor" ],
      "properties" : {
        "actor" : {
          "type" : "boolean"
        }
      }
    },
    "WebSocketString" : {
      "type" : "object",
      "required" : [ "actor" ],
      "properties" : {
        "actor" : {
          "type" : "boolean"
        }
      }
    },
    "BoardFeature" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      },
      "description" : "Model of TypeOfBoard Features "
    },
    "Hardware_New_Settings_Result" : {
      "type" : "object",
      "required" : [ "autobackup", "backup_mqtt_hostname", "backup_mqtt_password", "backup_mqtt_port", "backup_mqtt_username", "bootloader_base64", "bootloader_id", "bootloader_report", "devlist_counter", "features", "firmware_base64", "firmware_version_id", "mac_address", "normal_mqtt_hostname", "normal_mqtt_password", "normal_mqtt_port", "normal_mqtt_username", "wifi_password", "wifi_ssid", "wifi_username" ],
      "properties" : {
        "normal_mqtt_hostname" : {
          "type" : "string",
          "readOnly" : true
        },
        "normal_mqtt_port" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "backup_mqtt_hostname" : {
          "type" : "string",
          "readOnly" : true
        },
        "backup_mqtt_port" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "normal_mqtt_username" : {
          "type" : "string",
          "readOnly" : true
        },
        "normal_mqtt_password" : {
          "type" : "string",
          "readOnly" : true
        },
        "backup_mqtt_username" : {
          "type" : "string",
          "readOnly" : true
        },
        "backup_mqtt_password" : {
          "type" : "string",
          "readOnly" : true
        },
        "wifi_ssid" : {
          "type" : "string",
          "readOnly" : true
        },
        "wifi_username" : {
          "type" : "string",
          "readOnly" : true
        },
        "wifi_password" : {
          "type" : "string",
          "readOnly" : true
        },
        "devlist_counter" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "bootloader_report" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "mac_address" : {
          "type" : "string",
          "readOnly" : true
        },
        "full_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board" : {
          "type" : "string",
          "readOnly" : true
        },
        "autobackup" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "features" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BoardFeature"
          }
        },
        "firmware_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "bootloader_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "firmware_base64" : {
          "type" : "string",
          "readOnly" : true
        },
        "bootloader_base64" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model with settings and firwmare and bootloader for Embedded hardware"
    },
    "Hardware_New_Settings_Request" : {
      "type" : "object",
      "required" : [ "compiler_target_name", "full_id", "mac_address", "uuid_request_number" ],
      "properties" : {
        "uuid_request_number" : {
          "type" : "string",
          "description" : "Value must be unique! Required 10 min chars!",
          "readOnly" : true
        },
        "compiler_target_name" : {
          "type" : "string",
          "description" : "must be supported in Tyrion Hardware-Generator management",
          "readOnly" : true
        },
        "full_id" : {
          "type" : "string",
          "description" : "Value must be unique! Required 24 chars!",
          "readOnly" : true
        },
        "mac_address" : {
          "type" : "string",
          "description" : "Value must be unique! Required 17 chars! - for Example 01:23:45:67:89:ab ",
          "readOnly" : true
        }
      },
      "description" : "Json Model for data for new Embedded Hardware"
    },
    "Hardware_New_Hardware_Result" : {
      "type" : "object",
      "required" : [ "bootloader_id", "compiler_target_name", "firmware_version_id", "full_id", "mac_address", "status", "uuid_request_number" ],
      "properties" : {
        "uuid_request_number" : {
          "type" : "string",
          "description" : "Value must be unique! Required 30 min chars!"
        },
        "compiler_target_name" : {
          "type" : "string",
          "description" : "must be supported in Tyrion Hardware-Generator management"
        },
        "full_id" : {
          "type" : "string"
        },
        "bootloader_id" : {
          "type" : "string"
        },
        "firmware_version_id" : {
          "type" : "string"
        },
        "mac_address" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string",
          "description" : "State:: [complete, in_progress, broken_device,unknown_error]"
        }
      },
      "description" : "Json Model for data for new Embedded Hardware"
    },
    "Person_New" : {
      "type" : "object",
      "required" : [ "full_name", "mail", "nick_name", "password" ],
      "properties" : {
        "nick_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        },
        "full_name" : {
          "type" : "string",
          "description" : "The full_name is not required. Max lenght is 60 characters."
        },
        "password" : {
          "type" : "string",
          "description" : "The password length must be between 8 and 60 characters"
        }
      },
      "description" : "Json Model for creating new Person"
    },
    "Person_Authentication" : {
      "type" : "object",
      "required" : [ "mail" ],
      "properties" : {
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        }
      },
      "description" : "Json Model for resending authentication email."
    },
    "Person_Password_RecoveryEmail" : {
      "type" : "object",
      "required" : [ "mail" ],
      "properties" : {
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        }
      },
      "description" : "Json Model for sending password recovery email"
    },
    "Person_Password_New" : {
      "type" : "object",
      "required" : [ "mail", "password", "password_recovery_token" ],
      "properties" : {
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        },
        "password" : {
          "type" : "string",
          "description" : "The password length must be between 8 and 60 characters"
        },
        "password_recovery_token" : {
          "type" : "string",
          "description" : "Required password_recovery_token"
        }
      },
      "description" : "Json Model for recovering person password"
    },
    "Person" : {
      "type" : "object",
      "required" : [ "country", "full_name", "gender", "id", "mail", "nick_name", "picture_link" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "mail" : {
          "type" : "string"
        },
        "nick_name" : {
          "type" : "string"
        },
        "full_name" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "gender" : {
          "type" : "string"
        },
        "picture_link" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Person"
    },
    "Person_Update" : {
      "type" : "object",
      "required" : [ "nick_name" ],
      "properties" : {
        "nick_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "full_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "country" : {
          "type" : "string",
          "description" : "Where does the user come from."
        },
        "gender" : {
          "type" : "string",
          "description" : "Gender of the user.",
          "enum" : [ "male", "female" ]
        }
      },
      "description" : "Json Model for update Person. (For password or email, you have to used separate API)"
    },
    "FloatingPersonToken" : {
      "type" : "object",
      "required" : [ "access_age", "connection_id", "created", "delete_permission", "provider_key", "provider_user_id", "read_permission", "return_url", "social_token_verified", "type_of_connection", "user_agent", "where_logged" ],
      "properties" : {
        "connection_id" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "where_logged" : {
          "type" : "string",
          "description" : "Record, where user make login",
          "enum" : [ "BECKI_WEBSITE", "HOMER_SERVER", "E_STORE" ]
        },
        "access_age" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "user_agent" : {
          "type" : "string"
        },
        "provider_user_id" : {
          "type" : "string"
        },
        "provider_key" : {
          "type" : "string"
        },
        "type_of_connection" : {
          "type" : "string"
        },
        "return_url" : {
          "type" : "string"
        },
        "social_token_verified" : {
          "type" : "boolean"
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of FloatingPersonToken"
    },
    "Entity_Validation_Out" : {
      "type" : "object",
      "required" : [ "valid" ],
      "properties" : {
        "valid" : {
          "type" : "boolean",
          "description" : "Entity (Email, NickName.. etc) is valid if valid = true",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "example" : "Email is used",
          "description" : "If valid = false, Json probably contains message for user",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Validation of *-some Entity"
    },
    "Entity_Validation_In" : {
      "type" : "object",
      "required" : [ "key", "value" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "This field is required",
          "enum" : [ "mail", "nick_name", "vat_number" ]
        },
        "value" : {
          "type" : "string",
          "description" : "This field is required"
        }
      },
      "description" : "Json Model for Validation of *-some Entity"
    },
    "Person_ChangeProperty" : {
      "type" : "object",
      "required" : [ "property" ],
      "properties" : {
        "property" : {
          "type" : "string",
          "description" : "Required property ('password' or 'email')"
        },
        "email" : {
          "type" : "string",
          "description" : "Valid mail "
        },
        "password" : {
          "type" : "string",
          "description" : "The password length must be between 8 and 60 characters"
        }
      },
      "description" : "Json Model for changing Person property"
    },
    "Base64_File" : {
      "type" : "object",
      "properties" : {
        "file" : {
          "type" : "string",
          "description" : "The file is encoded in base64. If it is null - it is a command to delete a file"
        }
      },
      "description" : "Json Model for getting Blocko_Block Filter List"
    },
    "BProgram" : {
      "type" : "object",
      "required" : [ "date_of_create", "description", "id", "last_update", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "last_update" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "program_versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/B_Program_Version_Short_Detail"
          }
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "instance_details" : {
          "readOnly" : true,
          "$ref" : "#/definitions/B_Program_State"
        }
      },
      "description" : "Model of BProgram"
    },
    "B_Program_State" : {
      "type" : "object",
      "required" : [ "instance_online", "server_online", "uploaded" ],
      "properties" : {
        "uploaded" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "instance_online" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "server_online" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "instance_id" : {
          "type" : "string",
          "description" : "Id of Instance -its independent object!",
          "readOnly" : true
        },
        "instance_remote_url" : {
          "type" : "string",
          "description" : "WebSocket URL without Personal AUTH_ID for remove control and webView streaming",
          "readOnly" : true
        },
        "server_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "server_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "unique_identificator" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for B_Program state"
    },
    "B_Program_Version_Short_Detail" : {
      "type" : "object",
      "required" : [ "author", "delete_permission", "update_permission", "version_description", "version_id", "version_name" ],
      "properties" : {
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "author" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "B_Program Version Light (only few properties)"
    },
    "B_Program_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "program_description can be null or maximum length of 255 characters."
        },
        "name" : {
          "type" : "string",
          "description" : "Length must be between 4 and 60 characters."
        }
      },
      "description" : "Json Model for new B_Program"
    },
    "BPair" : {
      "type" : "object",
      "properties" : {
        "board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "board_personal_description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of BPair"
    },
    "B_Program_Version" : {
      "type" : "object",
      "required" : [ "edit_permission", "hardware_group", "m_project_program_snapshots", "program", "remove_permission", "version_object" ],
      "properties" : {
        "version_object" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Version_Object"
        },
        "hardware_group" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Hardware_group"
          }
        },
        "m_project_program_snapshots" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Project_SnapShot_Detail"
          }
        },
        "program" : {
          "type" : "string",
          "description" : "Json/Javascript Code",
          "readOnly" : true
        },
        "remove_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model of Version of B_Program"
    },
    "Hardware_group" : {
      "type" : "object",
      "required" : [ "device_board_pairs", "main_board_pair" ],
      "properties" : {
        "device_board_pairs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BPair"
          }
        },
        "main_board_pair" : {
          "$ref" : "#/definitions/BPair"
        }
      }
    },
    "M_Project_SnapShot_Detail" : {
      "type" : "object",
      "required" : [ "admin_permission", "m_program_snapshots", "m_project_description", "m_project_id", "m_project_name", "share_permission", "unshare_permission" ],
      "properties" : {
        "m_program_snapshots" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Model_MProgramInstanceParameter"
          }
        },
        "admin_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "unshare_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "share_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "m_project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_project_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_project_description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of Snapshot of versions of M_Project Snapshots"
    },
    "Model_MProgramInstanceParameter" : {
      "type" : "object",
      "required" : [ "edit_permission", "grid_app_url", "id", "m_program_description", "m_program_id", "m_program_name", "snapshot_settings", "version_object_description", "version_object_id", "version_object_name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "snapshot_settings" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "absolutely_public", "only_for_project_members", "not_in_instance" ]
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "grid_app_url" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_program_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_program_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_object_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_object_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_object_description" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "B_Program_Version_New" : {
      "type" : "object",
      "required" : [ "program", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "version_description" : {
          "type" : "string",
          "description" : "version_description can be null or maximum length of 255 characters."
        },
        "program" : {
          "type" : "string"
        },
        "hardware_group" : {
          "type" : "array",
          "description" : "Connected groups of all hardware - User can create Blocko program without hardware.",
          "items" : {
            "$ref" : "#/definitions/Hardware_group_IN"
          }
        },
        "m_project_snapshots" : {
          "type" : "array",
          "description" : "Connected groups of m_programs.versions under imported m_programs",
          "items" : {
            "$ref" : "#/definitions/M_Project_SnapShot"
          }
        }
      },
      "description" : "Json Model for new Version of B_Program"
    },
    "Hardware_group_IN" : {
      "type" : "object",
      "required" : [ "main_board_pair" ],
      "properties" : {
        "main_board_pair" : {
          "description" : "This board must be connectible_to_internet = true! User can create new B_Program version without Main Board, but its not possible to upload that to cloud like new Instance",
          "$ref" : "#/definitions/Connected_Board_IN"
        },
        "device_board_pairs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Connected_Board_IN"
          }
        }
      }
    },
    "M_Program_SnapShot" : {
      "type" : "object",
      "required" : [ "m_program_id", "version_object_id" ],
      "properties" : {
        "m_program_id" : {
          "type" : "string"
        },
        "version_object_id" : {
          "type" : "string"
        }
      }
    },
    "M_Project_SnapShot" : {
      "type" : "object",
      "required" : [ "m_program_snapshots", "m_project_id" ],
      "properties" : {
        "m_project_id" : {
          "type" : "string"
        },
        "m_program_snapshots" : {
          "type" : "array",
          "description" : "Connected boards",
          "items" : {
            "$ref" : "#/definitions/M_Program_SnapShot"
          }
        }
      }
    },
    "B_Program_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/B_Program_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual B_Program List"
    },
    "B_Program_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "B_Program Light (only few properties)"
    },
    "B_Program_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get b_programs of given project"
        }
      },
      "description" : "Json Model for getting B_Program Filter List"
    },
    "B_Program_Upload_Instance" : {
      "type" : "object",
      "properties" : {
        "upload_time" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970"
        }
      },
      "description" : "Json Model for new Version of B_Program"
    },
    "Instance_Short_Detail" : {
      "type" : "object",
      "required" : [ "b_program_description", "b_program_id", "b_program_name", "id", "instance_is_online", "server_id", "server_is_online", "server_name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "server_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "server_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "server_is_online" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "instance_is_online" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Instance Light (only few properties)"
    },
    "ActualizationProcedure" : {
      "type" : "object",
      "required" : [ "date_of_create", "date_of_finish", "date_of_planing", "id", "procedure_size_all", "procedure_size_complete", "state", "type_of_update", "updates" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "successful_complete", "complete", "complete_with_error", "canceled", "in_progress", "not_start_yet" ]
        },
        "updates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CProgramUpdatePlan"
          }
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "UNIX time in ms"
        },
        "date_of_planing" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "UNIX time in ms"
        },
        "date_of_finish" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "UNIX time in ms"
        },
        "type_of_update" : {
          "type" : "string",
          "enum" : [ "MANUALLY_BY_USER_INDIVIDUAL", "MANUALLY_BY_USER_BLOCKO_GROUP", "MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME", "AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE", "AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE" ]
        },
        "procedure_size_all" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "procedure_size_complete" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      },
      "description" : "Model of ActualizationProcedure"
    },
    "Board_detail" : {
      "type" : "object",
      "required" : [ "board_id", "personal_description", "type_of_board_id", "type_of_board_name" ],
      "properties" : {
        "board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "personal_description" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Bootloader_Update_program" : {
      "type" : "object",
      "required" : [ "bootloader_id", "bootloader_name", "version_identificator" ],
      "properties" : {
        "bootloader_id" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "bootloader_name" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "version_identificator" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        }
      }
    },
    "CProgramUpdatePlan" : {
      "type" : "object",
      "required" : [ "board_detail", "date_of_create", "date_of_finish", "firmware_type", "id", "state" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "1466163478925",
          "description" : "UNIX time in ms"
        },
        "date_of_finish" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "1466163478925",
          "description" : "UNIX time in ms"
        },
        "firmware_type" : {
          "type" : "string",
          "enum" : [ "FIRMWARE", "BOOTLOADER", "BACKUP", "WIFI" ]
        },
        "state" : {
          "type" : "string",
          "description" : "Description on Model C_ProgramUpdater_State",
          "enum" : [ "complete", "canceled", "bin_file_not_found", "not_start_yet", "in_progress", "overwritten", "not_updated", "waiting_for_device", "instance_inaccessible", "homer_server_is_offline", "critical_error" ]
        },
        "error" : {
          "type" : "string",
          "description" : "Only if state is critical_error or Homer record some error"
        },
        "error_code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Only if state is critical_error or Homer record some error"
        },
        "date_of_planing" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "board_detail" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Board_detail"
        },
        "c_program_detail" : {
          "description" : "Is visible only if update is for Firmware or Backup",
          "readOnly" : true,
          "$ref" : "#/definitions/C_Program_Update_program"
        },
        "bootloader_detail" : {
          "description" : "Is visible only if update is for Bootloader",
          "readOnly" : true,
          "$ref" : "#/definitions/Bootloader_Update_program"
        },
        "binary_file_detail" : {
          "description" : "Is visible only if user send own binary file ( OR state for c_program_detail)",
          "readOnly" : true,
          "$ref" : "#/definitions/FileRecord"
        }
      },
      "description" : "Model of CProgramUpdatePlan"
    },
    "C_Program_Update_program" : {
      "type" : "object",
      "required" : [ "c_program_id", "c_program_program_name", "c_program_version_id", "c_program_version_name" ],
      "properties" : {
        "c_program_id" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "c_program_version_id" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "c_program_program_name" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "c_program_version_name" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        }
      }
    },
    "FileRecord" : {
      "type" : "object",
      "required" : [ "file_name", "id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "file_name" : {
          "type" : "string"
        }
      },
      "description" : "Model of FileRecord"
    },
    "HomerInstance" : {
      "type" : "object",
      "required" : [ "actual_instance", "b_program_description", "b_program_id", "b_program_name", "blocko_instance_name", "get_status", "instance_history", "instance_online", "instance_remote_url", "instance_type", "server_id", "server_is_online", "server_name" ],
      "properties" : {
        "blocko_instance_name" : {
          "type" : "string"
        },
        "actual_instance" : {
          "$ref" : "#/definitions/HomerInstanceRecord"
        },
        "instance_history" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HomerInstanceRecord"
          }
        },
        "instance_type" : {
          "type" : "string",
          "enum" : [ "VIRTUAL", "INDIVIDUAL" ]
        },
        "server_is_online" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "instance_online" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "b_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "server_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "server_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "instance_remote_url" : {
          "type" : "string",
          "readOnly" : true
        },
        "get_status" : {
          "type" : "boolean"
        }
      },
      "description" : "Model of HomerInstance"
    },
    "HomerInstanceRecord" : {
      "type" : "object",
      "required" : [ "b_program_version_id", "b_program_version_name", "hardware_group", "instance_record_id", "m_project_snapshot", "procedures", "status" ],
      "properties" : {
        "date_of_created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "can be null",
          "readOnly" : true
        },
        "running_from" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "can be null",
          "readOnly" : true
        },
        "running_to" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "can be null",
          "readOnly" : true
        },
        "planed_when" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "can be null",
          "readOnly" : true
        },
        "procedures" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/ActualizationProcedure"
          }
        },
        "status" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_project_snapshot" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Project_SnapShot_Detail"
          }
        },
        "instance_record_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "hardware_group" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Hardware_group"
          }
        }
      },
      "description" : "Model of HomerInstanceRecord"
    },
    "Instance_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/HomerInstance"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "List of instancies by Filter Query"
    },
    "Instance_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string"
        },
        "server_unique_names" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "instance_types" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "page_number" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "page_number from 1 to N "
        }
      }
    },
    "Instance_GridApp_Settings" : {
      "type" : "object",
      "required" : [ "m_program_parameter_id", "snapshot_settings" ],
      "properties" : {
        "m_program_parameter_id" : {
          "type" : "string"
        },
        "snapshot_settings" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for changing parameters on Gridd App in instance"
    },
    "BlockoBlock_Version_Short_Detail" : {
      "type" : "object",
      "required" : [ "author", "date_of_create", "description", "design_json", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "design_json" : {
          "type" : "string",
          "readOnly" : true
        },
        "author" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "Json Model details of Version of BlockoBlock"
    },
    "Blocko_Block_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "update_permission", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Id of Block in Blocko Group (TypeOfBlock)",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BlockoBlock_Version_Short_Detail"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Blocko_Block Light (only few properties)"
    },
    "TypeOfBlock" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "blocks" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Blocko_Block_Short_Detail"
          }
        },
        "project_id" : {
          "type" : "string",
          "description" : "This value will be in Json only if TypeOfBlock is private!",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of TypeOfBlock"
    },
    "TypeOfBlock_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "description" : {
          "type" : "string",
          "description" : "Length must be between 24 and 255 characters."
        },
        "project_id" : {
          "type" : "string",
          "description" : "If you want make private TypeOfBlock group. You have to have \"project_id\" parameter in Json., Value can be null or contains project_id"
        }
      },
      "description" : "Json Model for new TypeOfBlock"
    },
    "TypeOfBlock_Short_Detail" : {
      "type" : "object",
      "required" : [ "blocko_blocks", "delete_permission", "description", "edit_permission", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_blocks" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Blocko_Block_Short_Detail"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "TypeOfBlock details Json model (only few properties)"
    },
    "Type_Of_Block_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/TypeOfBlock_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Type_Of_Block List"
    },
    "Type_Of_Block_Filter" : {
      "type" : "object",
      "required" : [ "private_type" ],
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get Type_Of_Blocks of given project"
        },
        "private_type" : {
          "type" : "boolean",
          "description" : "Use 'true' for private Type_Of_Block or 'false' for non-private"
        }
      },
      "description" : "Json Model for getting Type_Of_Block Filter List"
    },
    "BlockoBlock" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "type_of_block_id", "type_of_block_name", "update_permission", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/BlockoBlock_Version_Short_Detail"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "producer_name" : {
          "type" : "string",
          "description" : "can be hidden, if BlockoBlock is created by User not by Company",
          "readOnly" : true
        },
        "producer_id" : {
          "type" : "string",
          "description" : "can be hidden, if BlockoBlock is created by User not by Company",
          "readOnly" : true
        },
        "author_id" : {
          "type" : "string",
          "description" : "can be hidden, if BlockoBlock is created by Byzance or Other Company",
          "readOnly" : true
        },
        "author_nick_name" : {
          "type" : "string",
          "description" : "can be hidden, if BlockoBlock is created by Byzance or Other Company",
          "readOnly" : true
        },
        "type_of_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_block_name" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of BlockoBlock"
    },
    "BlockoBlock_New" : {
      "type" : "object",
      "required" : [ "name", "type_of_block_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "general_description" : {
          "type" : "string",
          "description" : "Length must be between 24 and 255 characters."
        },
        "type_of_block_id" : {
          "type" : "string",
          "description" : "Required valid type_of_block id"
        }
      },
      "description" : "Json Model for crating new BlockoBlock Model"
    },
    "BlockoBlockVersion" : {
      "type" : "object",
      "required" : [ "approval_state", "create_permission", "date_of_create", "delete_permission", "design_json", "edit_permission", "id", "logic_json", "read_permission", "version_description", "version_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "approval_state" : {
          "type" : "string",
          "enum" : [ "pending", "approved", "disapproved", "edited" ]
        },
        "author" : {
          "$ref" : "#/definitions/Person_Short_Detail"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "design_json" : {
          "type" : "string"
        },
        "logic_json" : {
          "type" : "string"
        },
        "create_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of BlockoBlockVersion"
    },
    "Blocko_Block_Filter_Detail" : {
      "type" : "object",
      "required" : [ "blocko_block_description", "blocko_block_id", "blocko_block_name", "blocko_block_type_of_block_description", "blocko_block_type_of_block_id", "blocko_block_type_of_block_name", "blocko_block_version_description", "blocko_block_version_id", "blocko_block_version_name" ],
      "properties" : {
        "blocko_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_type_of_block_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_type_of_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_type_of_block_description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Blocko_Block Light (only few properties)"
    },
    "Blocko_Block_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Blocko_Block_Filter_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Blocko Block List"
    },
    "Blocko_Block_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get Blocks of given project"
        }
      },
      "description" : "Json Model for getting Blocko_Block Filter List"
    },
    "BlockoBlock_BlockoVersion_New" : {
      "type" : "object",
      "required" : [ "design_json", "logic_json", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 2 and 60 characters."
        },
        "version_description" : {
          "type" : "string"
        },
        "design_json" : {
          "type" : "string"
        },
        "logic_json" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for crating new version and also content of BlockoBlock Model"
    },
    "BlockoBlock_BlockoVersion_Edit" : {
      "type" : "object",
      "required" : [ "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 2 and 60 characters."
        },
        "version_description" : {
          "type" : "string",
          "description" : "version_description can be null or maximum length of 255 characters."
        }
      },
      "description" : "Json Model for editing BlockoVersion"
    },
    "M_Project" : {
      "type" : "object",
      "required" : [ "date_of_create", "delete_permission", "edit_permission", "id", "m_programs", "name", "project_id", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "description" : "can be empty"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "14618543121234",
          "description" : "UNIX time stamp in millis",
          "readOnly" : true
        },
        "m_programs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Swagger_M_Program_Short_Detail"
          }
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of M_Project"
    },
    "Swagger_M_Program_Short_Detail" : {
      "type" : "object",
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean"
        },
        "delete_permission" : {
          "type" : "boolean"
        }
      }
    },
    "M_Project_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "program_description can be null or maximum length of 255 characters."
        },
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        }
      },
      "description" : "Json Model for update M_Project"
    },
    "M_Program_Version_Interface" : {
      "type" : "object",
      "required" : [ "version_object", "virtual_input_output" ],
      "properties" : {
        "version_object" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Version_Object"
        },
        "virtual_input_output" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Version of M_program"
    },
    "M_Program_interface" : {
      "type" : "object",
      "required" : [ "accessible_versions", "description", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "accessible_versions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/M_Program_Version_Interface"
          }
        }
      },
      "description" : "Json Model that contain values with accessible interface of virtual_input_output under M_programs (auto_incrementing == false) or head M_Program.virtual_input_output if auto_incrementing is True"
    },
    "M_Project_interface" : {
      "type" : "object",
      "required" : [ "accessible_interface", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "auto_incrementing" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "accessible_interface" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Program_interface"
          }
        }
      },
      "description" : "Json Model that contain values with accessible interface of virtual_input_output under M_project (auto_incrementing == false) or head M_project.M_program.virtual_input_output if auto_incrementing is True"
    },
    "M_Program" : {
      "type" : "object",
      "required" : [ "date_of_create", "description", "id", "m_project_id", "name", "program_versions" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1458315085338",
          "description" : "UNIX time stamp in millis",
          "readOnly" : true
        },
        "program_versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/M_Program_Version_Short_Detail"
          }
        },
        "read_qr_token_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "m_project_id" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of M_Program"
    },
    "M_Program_Version_Short_Detail" : {
      "type" : "object",
      "required" : [ "author", "delete_permission", "edit_permission", "version_description", "version_id", "version_name" ],
      "properties" : {
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "author" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "Json Model with details of M_Program_Version>"
    },
    "M_Program_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "program_description can be null or maximum length of 255 characters."
        },
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        }
      },
      "description" : "Json Model for new M_Program"
    },
    "M_Program_Version" : {
      "type" : "object",
      "required" : [ "m_code", "public_mode", "qr_token", "version_object", "virtual_input_output" ],
      "properties" : {
        "version_object" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Version_Object"
        },
        "m_code" : {
          "type" : "string",
          "readOnly" : true
        },
        "virtual_input_output" : {
          "type" : "string",
          "readOnly" : true
        },
        "public_mode" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "qr_token" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Version of M_program"
    },
    "Swagger_M_Program_Version_New" : {
      "type" : "object",
      "required" : [ "m_code", "version_name", "virtual_input_output" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Required valid screen_type_id"
        },
        "version_description" : {
          "type" : "string",
          "description" : "program_description can be null or maximum length of 255 characters."
        },
        "m_code" : {
          "type" : "string"
        },
        "virtual_input_output" : {
          "type" : "string"
        },
        "public_mode" : {
          "type" : "boolean",
          "description" : "if value is true - program can be open throw the QR token (public) by everyone!"
        }
      }
    },
    "Swagger_GridWidgetVersion_GridApp_source" : {
      "type" : "object",
      "required" : [ "id", "logic_json" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "logic_json" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Terminal_Connection_Summary" : {
      "type" : "object",
      "required" : [ "grid_app_url", "instance_id", "m_program", "m_program_id", "m_program_version_id", "m_project_id", "source_code_list" ],
      "properties" : {
        "grid_app_url" : {
          "type" : "string",
          "description" : "WS adress -> replaces token in URL by verified token from the other APIs if its required by query",
          "readOnly" : true
        },
        "m_program" : {
          "type" : "string",
          "description" : "M Program code in String",
          "readOnly" : true
        },
        "m_project_id" : {
          "type" : "string",
          "description" : "M Program code in String",
          "readOnly" : true
        },
        "m_program_id" : {
          "type" : "string",
          "description" : "M Program code in String",
          "readOnly" : true
        },
        "m_program_version_id" : {
          "type" : "string",
          "description" : "M Program code in String",
          "readOnly" : true
        },
        "instance_id" : {
          "type" : "string",
          "description" : "Generated Token used for public programs, use as standard verification token",
          "readOnly" : true
        },
        "source_code_list" : {
          "type" : "array",
          "description" : "Generated Token used for public programs, use as standard verification token",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Swagger_GridWidgetVersion_GridApp_source"
          }
        }
      }
    },
    "Grid_Terminal" : {
      "type" : "object",
      "required" : [ "device_name", "device_type", "m_program_access", "terminal_token", "up_to_date", "ws_permission" ],
      "properties" : {
        "terminal_token" : {
          "type" : "string",
          "example" : "Mobile, WebBrowser",
          "readOnly" : true
        },
        "user_agent" : {
          "type" : "string",
          "readOnly" : true
        },
        "device_type" : {
          "type" : "string",
          "example" : "Mobile, WebBrowser"
        },
        "device_name" : {
          "type" : "string",
          "example" : "Iphone 5S, Chrome 4"
        },
        "ws_permission" : {
          "type" : "boolean"
        },
        "m_program_access" : {
          "type" : "boolean"
        },
        "up_to_date" : {
          "type" : "boolean"
        }
      },
      "description" : "Model of Grid_Terminal"
    },
    "Grid_Terminal_Identf" : {
      "type" : "object",
      "required" : [ "device_name", "device_type" ],
      "properties" : {
        "device_type" : {
          "type" : "string",
          "example" : "Mobile, WebBrowser"
        },
        "device_name" : {
          "type" : "string",
          "example" : "Iphone 5S, Chrome 4"
        }
      },
      "description" : "Json Model for Identificator"
    },
    "GridWidgetVersion_Short_Detail" : {
      "type" : "object",
      "required" : [ "author", "date_of_create", "description", "design_json", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "design_json" : {
          "type" : "string",
          "readOnly" : true
        },
        "author" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "Json Model for Version of GridWidgetVersion short"
    },
    "GridWidget_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "update_permission", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GridWidgetVersion_Short_Detail"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "GridWidget Light (only few properties)"
    },
    "TypeOfWidget" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "project_id" : {
          "type" : "string",
          "description" : "This value will be in Json only if TypeOfWidget is private!",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "widgets" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GridWidget_Short_Detail"
          }
        }
      },
      "description" : "Model of TypeOfWidget"
    },
    "TypeOfWidget_New" : {
      "type" : "object",
      "required" : [ "description", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "description" : {
          "type" : "string",
          "description" : "Length must be between 24 and 255 characters."
        },
        "project_id" : {
          "type" : "string",
          "description" : "If you want make private TypeOfWidget group. You have to have \"project_id\" parameter in Json., Value can be null or contains project_id"
        }
      },
      "description" : "Json Model for new TypeOfWidget"
    },
    "TypeOfWidget_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "grid_widgets", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "grid_widgets" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GridWidget_Short_Detail"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model with details of Type of Widget>"
    },
    "Type_Of_Widget_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/TypeOfWidget_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Type_Of_Widget List"
    },
    "Type_Of_Widget_Filter" : {
      "type" : "object",
      "required" : [ "private_type" ],
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get Type_Of_Widgets of given project"
        },
        "private_type" : {
          "type" : "boolean",
          "description" : "Use 'true' for private Type_Of_Widget or 'false' for non-private"
        }
      },
      "description" : "Json Model for getting Type_Of_Widget Filter List"
    },
    "GridWidget" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "type_of_widget_id", "type_of_widget_name", "update_permission", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GridWidgetVersion_Short_Detail"
          }
        },
        "type_of_widget_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_widget_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "author_id" : {
          "type" : "string",
          "description" : "can be hidden, if GridWidget is created by Byzance or Other Company",
          "readOnly" : true
        },
        "author_nick_name" : {
          "type" : "string",
          "description" : "can be hidden, if GridWidget is created by Byzance or Other Company",
          "readOnly" : true
        }
      },
      "description" : "Model of GridWidget"
    },
    "GridWidget_New" : {
      "type" : "object",
      "required" : [ "description", "name", "type_of_widget_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "description" : {
          "type" : "string",
          "description" : "Length must be between 0 and 255 characters."
        },
        "type_of_widget_id" : {
          "type" : "string",
          "description" : "Required valid type_of_widget id"
        }
      },
      "description" : "Json Model for crating new GridWidget Model"
    },
    "GridWidgetVersion" : {
      "type" : "object",
      "required" : [ "approval_state", "create_permission", "date_of_create", "delete_permission", "design_json", "edit_permission", "id", "logic_json", "read_permission", "version_description", "version_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "approval_state" : {
          "type" : "string",
          "enum" : [ "pending", "approved", "disapproved", "edited" ]
        },
        "author" : {
          "$ref" : "#/definitions/Person_Short_Detail"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "design_json" : {
          "type" : "string"
        },
        "logic_json" : {
          "type" : "string"
        },
        "create_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of GridWidgetVersion"
    },
    "GridWidget_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GridWidget_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual GridWidget List"
    },
    "GridWidget_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get Widgets of given project"
        }
      },
      "description" : "Json Model for getting GridWidget Filter List"
    },
    "GridWidgetVersion_New" : {
      "type" : "object",
      "required" : [ "design_json", "logic_json", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 2 and 60 characters."
        },
        "version_description" : {
          "type" : "string"
        },
        "design_json" : {
          "type" : "string"
        },
        "logic_json" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for crating new version and also content of GridWidget Model"
    },
    "GridWidgetVersion_Edit" : {
      "type" : "object",
      "required" : [ "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 2 and 60 characters."
        },
        "version_description" : {
          "type" : "string",
          "description" : "version_description can be null or maximum length of 255 characters."
        }
      },
      "description" : "Json Model for editing GridWidgetVersion"
    },
    "SecurityRole" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "id", "name", "person_permissions_id", "persons_id", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "person_permissions_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "persons_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of SecurityRole"
    },
    "SecurityRole_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 4 and 60 characters."
        },
        "description" : {
          "type" : "string",
          "description" : "Not required, But strongly recommended, Maximum length is 255 characters"
        }
      },
      "description" : "Json Model for new SecurityRole (Group)"
    },
    "Permission" : {
      "type" : "object",
      "required" : [ "description", "edit_permission", "edit_person_permission", "value" ],
      "properties" : {
        "value" : {
          "type" : "string",
          "description" : "Permission key - \"(static key)\"",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Description for \"(static key)\"",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "edit_person_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Permission"
    },
    "System_Access" : {
      "type" : "object",
      "required" : [ "permissions", "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/SecurityRole"
          }
        },
        "permissions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Permission"
          }
        }
      },
      "description" : "Json Model for System Access>"
    },
    "Notification" : {
      "type" : "object",
      "required" : [ "confirmation_required", "confirmed", "created", "id", "messageChannel", "messageType", "notification_body", "notification_importance", "notification_level", "notification_type", "was_read" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "notification_level" : {
          "type" : "string",
          "enum" : [ "info", "success", "warning", "error" ]
        },
        "notification_importance" : {
          "type" : "string",
          "enum" : [ "low", "normal", "high" ]
        },
        "notification_type" : {
          "type" : "string",
          "enum" : [ "CHAIN_START", "CHAIN_UPDATE", "CHAIN_END", "INDIVIDUAL" ]
        },
        "confirmation_required" : {
          "type" : "boolean"
        },
        "confirmed" : {
          "type" : "boolean"
        },
        "was_read" : {
          "type" : "boolean"
        },
        "created" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "UNIX time in ms",
          "readOnly" : true
        },
        "buttons" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Notification_Button"
          }
        },
        "notification_body" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Notification_Element"
          }
        },
        "messageChannel" : {
          "type" : "string",
          "readOnly" : true
        },
        "messageType" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of Notification"
    },
    "Notification_Button" : {
      "type" : "object",
      "required" : [ "action", "bold", "color", "italic", "payload", "text", "underline" ],
      "properties" : {
        "text" : {
          "type" : "string"
        },
        "action" : {
          "type" : "string",
          "enum" : [ "accept_project_invitation", "reject_project_invitation", "confirm_notification" ]
        },
        "color" : {
          "type" : "string"
        },
        "payload" : {
          "type" : "string"
        },
        "bold" : {
          "type" : "boolean"
        },
        "italic" : {
          "type" : "boolean"
        },
        "underline" : {
          "type" : "boolean"
        }
      },
      "description" : "Json Model for notification buttons"
    },
    "Notification_Element" : {
      "type" : "object",
      "required" : [ "bold", "button", "italic", "type", "underline" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "link", "object", "text", "date", "newLine" ]
        },
        "text" : {
          "type" : "string"
        },
        "bold" : {
          "type" : "boolean"
        },
        "italic" : {
          "type" : "boolean"
        },
        "underline" : {
          "type" : "boolean"
        },
        "button" : {
          "type" : "boolean"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "url" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "project_id" : {
          "type" : "string"
        },
        "program_id" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for notification body elements"
    },
    "Notification_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total", "unread_total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Notification"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "unread_total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total unread subjects",
          "readOnly" : true
        }
      },
      "description" : "Individual Notification List"
    },
    "Notification_Read" : {
      "type" : "object",
      "required" : [ "notification_id" ],
      "properties" : {
        "notification_id" : {
          "type" : "array",
          "description" : "List of notification.id",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for List with ids of read notifications"
    },
    "Notification_Confirm" : {
      "type" : "object",
      "required" : [ "action", "payload" ],
      "properties" : {
        "action" : {
          "type" : "string",
          "description" : "Notification_action",
          "enum" : [ "accept_project_invitation", "reject_project_invitation", "confirm_notification" ]
        },
        "payload" : {
          "type" : "string",
          "description" : "Notification payload"
        }
      },
      "description" : "Json Model for confirming notification"
    },
    "Library" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "type_of_boards", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "versions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Library_Version_Short_Detail"
          }
        },
        "type_of_boards" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TypeOfBoard"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Library"
    },
    "Library_New" : {
      "type" : "object",
      "required" : [ "name", "project_id" ],
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Project ID only for private libraries. For Public, permission is required. Its Required only for Creating, For update is used previous settings. "
        },
        "name" : {
          "type" : "string",
          "description" : "Length must be between 4 and 60 characters, must be unique!"
        },
        "description" : {
          "type" : "string",
          "description" : "Length must be between 8 and 255 characters."
        }
      },
      "description" : "Json Model for new Library"
    },
    "Library_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Library_Short_Detail"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Library List"
    },
    "Library_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string"
        },
        "inlclude_public" : {
          "type" : "boolean"
        }
      },
      "description" : "Json Model for getting Library Filter List"
    },
    "Example_Short_Detail" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "main", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "main" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Json Model with details of Example C_Program>"
    },
    "Library_Version" : {
      "type" : "object",
      "required" : [ "delete_permission", "examples", "files", "update_permission", "version_description", "version_id", "version_name" ],
      "properties" : {
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "examples" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Example_Short_Detail"
          }
        },
        "files" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Library_Record"
          }
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "author" : {
          "description" : "Optional value",
          "readOnly" : true,
          "$ref" : "#/definitions/Person_Short_Detail"
        }
      },
      "description" : "Json Model for Library_Version"
    },
    "Library_Version_New" : {
      "type" : "object",
      "required" : [ "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters."
        },
        "version_description" : {
          "type" : "string",
          "description" : "version_description can be null or maximum length of 255 characters."
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Library_Record"
          }
        }
      },
      "description" : "Json Model for new Version of Library"
    },
    "M_Project_Short_Detail" : {
      "type" : "object",
      "required" : [ "description", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "programs" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Swagger_M_Program_Short_Detail"
          }
        }
      },
      "description" : "Json Model M_Project - only basic information"
    },
    "Project" : {
      "type" : "object",
      "required" : [ "admin_permission", "b_programs", "boards", "c_private_libraries", "c_programs", "delete_permission", "description", "edit_permission", "id", "instancies", "m_projects", "name", "participants", "product_id", "product_name", "share_permission", "type_of_blocks", "type_of_widgets", "unshare_permission", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "b_programs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/B_Program_Short_Detail"
          }
        },
        "c_programs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/C_program_Short_Detail"
          }
        },
        "m_projects" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/M_Project_Short_Detail"
          }
        },
        "type_of_blocks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TypeOfBlock_Short_Detail"
          }
        },
        "type_of_widgets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TypeOfWidget_Short_Detail"
          }
        },
        "boards" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Board_Short_Detail"
          }
        },
        "participants" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Project_participant"
          }
        },
        "product_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "admin_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "c_private_libraries" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Library_Short_Detail"
          }
        },
        "instancies" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Instance_Short_Detail"
          }
        },
        "product_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "unshare_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "share_permission" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of Project"
    },
    "Project_participant" : {
      "type" : "object",
      "required" : [ "full_name", "id", "state", "user_email" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "owner", "admin", "member", "invited" ]
        },
        "user_email" : {
          "type" : "string"
        },
        "full_name" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model of Project_participant"
    },
    "Project_Edit" : {
      "type" : "object",
      "required" : [ "project_description", "project_name" ],
      "properties" : {
        "project_name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters, must be unique!"
        },
        "project_description" : {
          "type" : "string",
          "description" : "Length must be between 24 and 255 characters."
        }
      },
      "description" : "Json Model for Edit Project"
    },
    "Project_New" : {
      "type" : "object",
      "required" : [ "description", "name", "product_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Length must be between 8 and 60 characters, must be unique!"
        },
        "description" : {
          "type" : "string",
          "description" : "Length must be between 24 and 255 characters."
        },
        "product_id" : {
          "type" : "string",
          "description" : "Id of Product (Tariff) where the project will be registered"
        }
      },
      "description" : "Json Model for new General Project"
    },
    "Project_Participant_status" : {
      "type" : "object",
      "required" : [ "person_id", "state" ],
      "properties" : {
        "person_id" : {
          "type" : "string",
          "description" : "Participant id"
        },
        "state" : {
          "type" : "string",
          "description" : "Status",
          "enum" : [ "admin", "member" ]
        }
      },
      "description" : "Json Model for changing Project_participant status"
    },
    "ShareProject_Person" : {
      "type" : "object",
      "required" : [ "persons_mail" ],
      "properties" : {
        "persons_mail" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for sharing project with Persons"
    },
    "HomerServer" : {
      "type" : "object",
      "required" : [ "days_in_archive", "delete_permission", "edit_permission", "grid_port", "interactive", "log_level", "logging", "mqtt_password", "mqtt_port", "mqtt_username", "server_is_online", "server_remote_port", "server_url", "time_stamp_configuration", "unique_identificator", "web_view_port" ],
      "properties" : {
        "unique_identificator" : {
          "type" : "string"
        },
        "mqtt_port" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "mqtt_username" : {
          "type" : "string",
          "readOnly" : true
        },
        "mqtt_password" : {
          "type" : "string",
          "readOnly" : true
        },
        "grid_port" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "web_view_port" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "server_remote_port" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "server_url" : {
          "type" : "string",
          "readOnly" : true
        },
        "time_stamp_configuration" : {
          "type" : "string",
          "format" : "date-time"
        },
        "days_in_archive" : {
          "type" : "integer",
          "format" : "int32"
        },
        "logging" : {
          "type" : "boolean"
        },
        "interactive" : {
          "type" : "boolean"
        },
        "log_level" : {
          "type" : "string",
          "enum" : [ "error", "warn", "info", "debug", "trace" ]
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "server_is_online" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model of HomerServer"
    },
    "Cloud_Homer_Server" : {
      "type" : "object",
      "required" : [ "grid_port", "mqtt_password", "mqtt_port", "mqtt_username", "personal_server_name", "server_url", "web_view_port" ],
      "properties" : {
        "personal_server_name" : {
          "type" : "string",
          "description" : "Personal name For Homer cloud_homer_server. Length must be between 6 and 60 characters"
        },
        "mqtt_port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "mqtt_username" : {
          "type" : "string"
        },
        "mqtt_password" : {
          "type" : "string"
        },
        "grid_port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "web_view_port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "server_url" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for new Blocko Server"
    },
    "Social_Login" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "Facebook", "GitHub" ]
        },
        "redirect_url" : {
          "type" : "string",
          "description" : "URL that you have to redirect user",
          "readOnly" : true
        },
        "authToken" : {
          "type" : "string",
          "description" : "token, that you have to used in HTML head for verifying the identities",
          "readOnly" : true
        }
      },
      "description" : "Json Model for new Basic Login throw the social networks"
    },
    "SocialNetwork_Login" : {
      "type" : "object",
      "required" : [ "redirect_url" ],
      "properties" : {
        "redirect_url" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for logi via Facebook, Github etc."
    },
    "Login_Token" : {
      "type" : "object",
      "required" : [ "authToken" ],
      "properties" : {
        "authToken" : {
          "type" : "string",
          "description" : "X-AUTH-TOKEN - used this token in HTML head for verifying the identities",
          "readOnly" : true
        }
      },
      "description" : "Json Model that you will get, if login was successful"
    },
    "Not Validated" : {
      "type" : "object",
      "required" : [ "code", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "error" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "message",
          "readOnly" : true
        }
      },
      "description" : "When account is not validated."
    },
    "Login" : {
      "type" : "object",
      "required" : [ "mail", "password" ],
      "properties" : {
        "mail" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for new Basic Login"
    },
    "Blocko_Token_validation_result" : {
      "type" : "object",
      "required" : [ "available_requests", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "readOnly" : true
        },
        "available_requests" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        }
      },
      "description" : "Json Model for validation of Token for HTTP requests"
    },
    "Blocko_Token_validation_request" : {
      "type" : "object",
      "required" : [ "token", "type_of_token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_token" : {
          "type" : "string",
          "example" : "PERSON_TOKEN, INSTANCE_TOKEN",
          "readOnly" : true
        }
      },
      "description" : "Json Model for validation of Token for HTTP requests"
    },
    "Login_Result" : {
      "type" : "object",
      "properties" : {
        "person" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person"
        },
        "roles" : {
          "type" : "array",
          "description" : "List of roles, that",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/SecurityRole"
          }
        },
        "permissions" : {
          "type" : "array",
          "description" : "List of all person permission (private and all collections from Person Roles (\"SecurityRole\") ",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model that you will get, if login was successful"
    }
  }
}