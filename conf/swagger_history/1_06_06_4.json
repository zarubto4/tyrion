{
  "swagger" : "2.0",
  "info" : {
    "description" : "Description.............................. ......... .............",
    "version" : "1.06.6.4",
    "title" : "Tyrion Api",
    "contact" : {
      "name" : "Tyrion-Ultra-Best-Mega-Lovely Team"
    },
    "license" : {
      "name" : "Terms Of Service",
      "url" : "http://google.com"
    }
  },
  "host" : "localhost:9000",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Not Documented API - InProgress or Stuck"
  }, {
    "name" : "Access"
  }, {
    "name" : "Social-GitHub"
  }, {
    "name" : "Person"
  }, {
    "name" : "APP-Api"
  }, {
    "name" : "Social-Facebook"
  }, {
    "name" : "Price & Invoice & Tariffs"
  }, {
    "name" : "M_Program"
  }, {
    "name" : "Screen_Size_Type"
  }, {
    "name" : "WebSocket"
  }, {
    "name" : "Actualization"
  }, {
    "name" : "Notifications"
  }, {
    "name" : "Role"
  }, {
    "name" : "Permission"
  }, {
    "name" : "External Server"
  }, {
    "name" : "Processor"
  }, {
    "name" : "SingleLibrary"
  }, {
    "name" : "Type-Of-Board"
  }, {
    "name" : "LibraryGroup"
  }, {
    "name" : "Board"
  }, {
    "name" : "C_Program"
  }, {
    "name" : "Blocko"
  }, {
    "name" : "B_Program"
  }, {
    "name" : "Producer"
  }, {
    "name" : "Project"
  }, {
    "name" : "Homer"
  }, {
    "name" : "Blocko-Block"
  }, {
    "name" : "Type of Block"
  }, {
    "name" : "Blocko-OverFlow"
  }, {
    "name" : "Post"
  }, {
    "name" : "Type-Of-Confirms"
  }, {
    "name" : "Type-Of-Post"
  } ],
  "paths" : {
    "/compilation/board" : {
      "post" : {
        "tags" : [ "Board" ],
        "summary" : "create Board",
        "description" : "This Api is using only for developing mode, for registration of our Board - in future it will be used only by machine in factory or boards themselves with \"registration procedure\". Its not allowed to delete that! Only deactivate. Classic User can registed that to own project or own account",
        "operationId" : "new_Board",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Board"
              }
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBoard.register_new_device_permission" : "true",
          "Static Permission key" : "Board_create"
        }
      }
    },
    "/compilation/board/deactivateBoard/{board_id}" : {
      "delete" : {
        "tags" : [ "Board" ],
        "summary" : "deactivate Board",
        "description" : "Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database",
        "operationId" : "deactivate_Board",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/compilation/board/filter/{page_number}" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "get Boards with filter parameters",
        "description" : "Get List of boards. Acording by permission - system return only hardware from project, where is user owner or all boards if user have static Permission key",
        "operationId" : "get_Board_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. Contain  1,2...n. For first call, use 1",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_read"
        }
      }
    },
    "/compilation/board/userDescription/{type_of_board_id}" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "edit Board - update personal description",
        "description" : "Used for add descriptions by owners. \"Persons\" who registred \"Board\" to own \"Projec\" ",
        "operationId" : "edit_Board_User_Description",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Board_Personal_Description"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Board.edit_permission" : "true",
          "Static Permission key" : "Board_edit"
        }
      }
    },
    "/compilation/board/{board_id}" : {
      "get" : {
        "tags" : [ "Board" ],
        "summary" : "get Board",
        "description" : "if you want get Board object by query = board_id. User can get only boards from project, whitch user owning or user need Permission key \"Board_rea\".",
        "operationId" : "get_Board",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_read"
        }
      },
      "delete" : {
        "tags" : [ "Board" ],
        "summary" : "disconnect Board from Project",
        "description" : "This Api is used by Users for disconnection of Board from their Project, its not meaning that Board is removed from system, only disconnect and another user can registred that (connect that with different account/project etc..)",
        "operationId" : "disconnect_Board_from_Project",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Board_Disconnection" : "read: If user want remove Board from Project, he needs one single permission Project.update_permission, where hardware is registered. - Or user need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/compilation/board/{board_id}/{project_id}" : {
      "put" : {
        "tags" : [ "Board" ],
        "summary" : "connect Board with Project",
        "description" : "This Api is used by Users for connection of Board with their Project",
        "operationId" : "connect_Board_with_Project",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Board"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Board_Connection" : "read: If user want connect Project with board, he needs two Permission! Project.update_permission == true and also Board.first_connect_permission == true. - Or user need combination of static/dynamic permission key and Board.first_connect_permission == true"
        },
        "x-permission_required" : {
          "Board.first_connect_permission" : "true",
          "Project.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/compilation/c_program/binary/{board_id}" : {
      "post" : {
        "tags" : [ "C_Program", "Actualization" ],
        "summary" : "update Embedded Hardware with  binary file",
        "description" : "Upload Binary file and choose hardware_id for update. Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show \"future\" message to the user!",
        "operationId" : "uploadBinaryFileToBoard",
        "schemes" : [ "https" ],
        "consumes" : [ "application/octet-stream" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "board_id",
          "in" : "path",
          "description" : "version_id ",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "477" : {
            "description" : "External Cloud_Homer_server where is hardware is offline",
            "schema" : {
              "$ref" : "#/definitions/External cloud_blocko_server is offline"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Board.update_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/compilation/c_program/c_program/{c_program_id}" : {
      "get" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program",
        "description" : "get C_program by query = c_program_id",
        "operationId" : "get_C_Program",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "c_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "C_program.read_permission" : "read: If user have Project.read_permission = true, you can read C_program on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "C_program_read"
        }
      },
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "Edit C_Program",
        "description" : "If you want edit base information about C_program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object",
        "operationId" : "edit_C_Program_Description",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "c_program_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.edit_permission" : "true",
          "Static Permission key" : "C_program_edit"
        }
      },
      "delete" : {
        "tags" : [ "C_Program" ],
        "summary" : "delete C_program",
        "description" : "delete C_program by query = c_program_id, query = version_id",
        "operationId" : "delete_C_Program",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "c_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.delete_permission" : "true",
          "Static Permission key" : "C_program_delete"
        }
      }
    },
    "/compilation/c_program/c_program/{project_id}" : {
      "post" : {
        "tags" : [ "C_Program" ],
        "summary" : "Create new C_Program",
        "description" : "If you want create new C_program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object",
        "operationId" : "create_C_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/C_Program"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "C_program.create_permission" : "create: If user have Project.update_permission = true, you can create C_program on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "C_program_create"
        }
      }
    },
    "/compilation/c_program/list/{page_number}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program List",
        "description" : "get all C_Programs that belong to logged person",
        "operationId" : "get_C_Program_by_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "C_program.read_permission" : "Tyrion only returns C_Programs which person owns, there is no need to check permissions"
        }
      }
    },
    "/compilation/c_program/version/compile" : {
      "post" : {
        "tags" : [ "C_Program" ],
        "summary" : "compile C_program with Code",
        "description" : "Compile code",
        "operationId" : "compile_C_Program_code",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_Update"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Compilation successful",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "477" : {
            "description" : "External server is offline",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "422" : {
            "description" : "Compilation unsuccessful",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Compilation_Build_Error"
              }
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "478" : {
            "description" : "External server side Error",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/c_program/version/compile/{version_id}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "compile C_program Version",
        "description" : "Compile specific version of C_program - before compilation - you have to update (save) version code",
        "operationId" : "compile_C_Program_version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Compilation successful",
            "schema" : {
              "$ref" : "#/definitions/Compilation_Ok"
            }
          },
          "477" : {
            "description" : "External server is offline",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "422" : {
            "description" : "Compilation unsuccessful",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Compilation_Build_Error"
              }
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "478" : {
            "description" : "External server side Error",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "C_program.Version.read_permission" : "read: If user have \"Object\".read_permission = true, you can read / get version on this Object - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "C_program_read"
        }
      }
    },
    "/compilation/c_program/version/create/{c_program_id}" : {
      "post" : {
        "tags" : [ "C_Program" ],
        "summary" : "new Version of C_Program",
        "description" : "If you want add new code to C_program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object",
        "operationId" : "new_C_Program_Version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "c_program_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/C_Program_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.update_permission" : "true",
          "Static Permission key" : "C_program_update"
        }
      }
    },
    "/compilation/c_program/version/edit/{version_id}" : {
      "put" : {
        "tags" : [ "C_Program" ],
        "summary" : "update basic information in Version of C_program",
        "description" : "For update basic (name and description) information in Version of C_program. If you want update code. You have to create new version. And after that you can delete previous version",
        "operationId" : "edit_C_Program_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/C_Program_Version_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Version_Object"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.edit_permission" : "true",
          "Static Permission key" : "C_program_edit"
        }
      }
    },
    "/compilation/c_program/version/upload/{version_id}" : {
      "put" : {
        "tags" : [ "C_Program", "Actualization" ],
        "summary" : "update Embedded Hardware with C_program compilation",
        "description" : "Upload compilation to list of hardware. Compilation is on Version oc C_program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show \"future\" message to the user!",
        "operationId" : "uploadCompilationToBoard",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id ",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/List of Boards"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Board.update_permission" : "true",
          "Project.read_permission" : "true",
          "Static Permission key" : "Board_update"
        }
      }
    },
    "/compilation/c_program/version/{version_id}" : {
      "get" : {
        "tags" : [ "C_Program" ],
        "summary" : "get C_program Version",
        "description" : "get Version of C_program by query = verison_id",
        "operationId" : "get_C_Program_Version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/C_Program_Version"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "C_program.Version.read_permission" : "read: If user have \"Object\".read_permission = true, you can read / get version on this Object - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Static Permission key" : "C_program_read"
        }
      },
      "delete" : {
        "tags" : [ "C_Program" ],
        "summary" : "delete Version in C_program",
        "description" : "delete Version.id = version_id in C_program by query = c_program_id, query = version_id",
        "operationId" : "delete_C_Program_Version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "C_Program.delete_permission" : "true",
          "Static Permission key" : "C_program_delete"
        }
      }
    },
    "/compilation/library" : {
      "post" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "create new SingleLibrary",
        "description" : "if you want create new SingleLibrary for C_program compilation",
        "operationId" : "new_SingleLibrary",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SingleLibrary_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/SingleLibrary"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "SingleLibrary_create"
        }
      }
    },
    "/compilation/library/filter/{page_number}" : {
      "put" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "get Library with Filters parameters",
        "description" : "If you want get all or only some SingleLibraries you can use filter parameters in Json. But EveryTime i will return maximal 25 objects \n\nso, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... I will give you alsoinformation how many results you can show \n ",
        "operationId" : "get_SingleLibrary_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...n For first call, use 1",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SingleLibrary_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/Single_Library_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/library/upload/{version_id}" : {
      "post" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "Upload file to SingleLibrary",
        "description" : "Upload file to SingleLibrary in file format",
        "operationId" : "upload_SingleLibrary_Version",
        "schemes" : [ "https" ],
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "File in file.txt format",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully uploaded",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "SingleLibrary.update_permission" : "true",
          "Static Permission key" : "SingleLibrary_update"
        }
      }
    },
    "/compilation/library/version/{library_id}" : {
      "post" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "create new SingleLibrary",
        "description" : "if you want create new SingleLibrary for C_program compilation",
        "operationId" : "new_SingleLibrary_Version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SingleLibrary_Version"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Version_Object"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "SingleLibrary.update_permission" : "true",
          "Static Permission key" : "SingleLibrary_update"
        }
      }
    },
    "/compilation/library/{library_id}" : {
      "get" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "get SingleLibrary",
        "description" : "if you want get SingleLibrary by query = library_id",
        "operationId" : "get_SingleLibrary",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/SingleLibrary"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "edit SingleLibrary",
        "description" : "if you want edit name or description of SingleLibrary by query = library_id",
        "operationId" : "edit_SingleLibrary",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SingleLibrary_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/SingleLibrary"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "SingleLibrary.edit_permission" : "true",
          "Static Permission key" : "SingleLibrary_edit"
        }
      },
      "delete" : {
        "tags" : [ "SingleLibrary" ],
        "summary" : "delete SingleLibrary",
        "description" : "If you want delete SingleLibrary by query = library_id",
        "operationId" : "delete_SingleLibrary",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "library_id",
          "in" : "path",
          "description" : "library_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "SingleLibrary.delete_permission" : "true",
          "Static Permission key" : "SingleLibrary_delete"
        }
      }
    },
    "/compilation/libraryGroup" : {
      "post" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "Create new LibraryGroup",
        "description" : "If you want create new LibraryGroup. Send required json values and server respond with new object",
        "operationId" : "new_LibraryGroup",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LibraryGroup_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/LibraryGroup"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "LibraryGroup_create"
        }
      }
    },
    "/compilation/libraryGroup/filter/{page_number}" : {
      "put" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "get LibraryGroup with Filters parameters",
        "description" : "If you want get all or only some LibraryGroups you can use filter parameters in Json. But EveryTime server will return maximal 25 objects \n\nso, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... in Json we help you with pages list \n ",
        "operationId" : "get_LibraryGroup_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...n For first call, use 1 (first page of list) ",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LibraryGroup_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/LibraryGroup_List"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/libraryGroup/upload/{version_id}" : {
      "post" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "upload files to Version in LibraryGroup",
        "description" : "Its not possible now describe uploud file in Swagger. But file name must be longer than 5 chars.in body of html content is \"files\"",
        "operationId" : "upload_Library_To_LibraryGroup",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result"
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Processor_delete"
        }
      }
    },
    "/compilation/libraryGroup/version/{libraryGroup_id}" : {
      "post" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "Create new Version in LibraryGroup",
        "description" : "If you want create new versinon in LibraryGroup query = libraryGroup_id. Send required json values and server respond with new object",
        "operationId" : "new_LibraryGroup_Version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "libraryGroup_id",
          "in" : "path",
          "description" : "libraryGroup_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LibraryGroup_Version"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Version_Object"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "LibraryGroup_update"
        }
      }
    },
    "/compilation/libraryGroup/version/{version_id}" : {
      "get" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "get version from LibraryGroup",
        "description" : "get version from LibraryGroup",
        "operationId" : "get_LibraryGroup_Version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/Version_Object"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/libraryGroup/{libraryGroup_id}" : {
      "get" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "get LibraryGroup",
        "description" : "If you want get LibraryGroup by query = libraryGroup_id",
        "operationId" : "get_LibraryGroup",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "libraryGroup_id",
          "in" : "path",
          "description" : "libraryGroup_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/LibraryGroup"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "edit LibraryGroup",
        "description" : "If you want edit LibraryGroup by query libraryGroup_id. Send required json values and server respond with new object",
        "operationId" : "editLibraryGroup",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "libraryGroup_id",
          "in" : "path",
          "description" : "libraryGroup_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LibraryGroup_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/LibraryGroup"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "LibraryGroup_edit"
        }
      },
      "delete" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "delete LibraryGroup",
        "description" : "If you want delete LibraryGroup by query = libraryGroup_id",
        "operationId" : "delete_LibraryGroup",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "libraryGroup_id",
          "in" : "path",
          "description" : "libraryGroup_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "LibraryGroup_delete"
        }
      }
    },
    "/compilation/processor" : {
      "get" : {
        "tags" : [ "Processor" ],
        "summary" : "get all Processors",
        "description" : "If you want get Processor by query processor_id.",
        "operationId" : "get_Processor_All",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Processor"
              }
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/processor/{processor_id}" : {
      "get" : {
        "tags" : [ "Processor" ],
        "summary" : "get Processor",
        "description" : "If you get Processor by query processor_id.",
        "operationId" : "get_Processor",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processor_id",
          "in" : "path",
          "description" : "processor_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Processor"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "Processor" ],
        "summary" : "update Processor",
        "description" : "If you want update Processor.id by query = processor_id . Send required json values and server respond with update object",
        "operationId" : "update_Processor",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processor_id",
          "in" : "path",
          "description" : "processor_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Processor_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Processor"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Processor_edit"
        }
      }
    },
    "/compilation/producer/all" : {
      "get" : {
        "tags" : [ "Producer" ],
        "summary" : "get all Producers",
        "description" : "if you want get list of Producers. Its list of companies owned physical boards and we used that for filtering",
        "operationId" : "get_Producers",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Producer"
              }
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/producer/{producer_id}" : {
      "get" : {
        "tags" : [ "Producer" ],
        "summary" : "get Producer",
        "description" : "if you want get Producer. Its company owned physical boards and we used that for filtering",
        "operationId" : "get_Producer",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "producer_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Producer"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/server" : {
      "get" : {
        "tags" : [ "External Server" ],
        "summary" : "get all Compilation Servers",
        "description" : "get Compilation Servers",
        "operationId" : "get_All_Compilation_Server",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Compilation_Server"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "post" : {
        "tags" : [ "External Server" ],
        "summary" : "Create new Compilation Server",
        "description" : "Create new Gate for Compilation Server",
        "operationId" : "create_Compilation_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compilation_Server"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Compilation_Server"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Cloud_Compilation_Server_create"
        }
      }
    },
    "/compilation/server/{server_id}" : {
      "put" : {
        "tags" : [ "External Server" ],
        "summary" : "edit Compilation Server",
        "description" : "Edit basic information Compilation Server",
        "operationId" : "edit_Compilation_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server_id",
          "in" : "path",
          "description" : "server_id ",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Compilation_Server"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update successfuly",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Compilation_Server"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Cloud_Compilation_Server_edit"
        }
      },
      "delete" : {
        "tags" : [ "External Server" ],
        "summary" : "remove Compilation Servers",
        "description" : "remove Compilation Servers",
        "operationId" : "delete_Compilation_Server",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server_id",
          "in" : "path",
          "description" : "server_id ",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "Cloud_Compilation_Server_delete"
        }
      }
    },
    "/compilation/typeOfBoard" : {
      "post" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "create TypeOfBoard",
        "description" : "The TypeOfBoard is category for IoT. Like Raspberry2, Arduino-Uno etc. \n\nWe using that for compilation, sorting libraries, filtres and more..",
        "operationId" : "new_TypeOfBoard",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBoard_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBoard"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Static Permission key" : "TypeOfBoard_create"
        }
      }
    },
    "/compilation/typeOfBoard/all" : {
      "get" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "get list of all TypeOfBoard",
        "description" : "if you want get all TypeOfBoard objects",
        "operationId" : "get_TypeOfBoard_all",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfBoard"
              }
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/compilation/typeOfBoard/{type_of_board_id}" : {
      "get" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "get TypeOfBoard",
        "description" : "if you want get TypeOfBoard object by query = type_of_board_id",
        "operationId" : "get_TypeOfBoard",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBoard"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      },
      "put" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "edit TypeOfBoard",
        "description" : "if you want edit base TypeOfBoard information",
        "operationId" : "edit_TypeOfBoard",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBoard_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBoard"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBoard.edit_permission" : "true",
          "Static Permission key" : "TypeOfBoard_edit"
        }
      },
      "delete" : {
        "tags" : [ "Type-Of-Board" ],
        "summary" : "delete TypeOfBoard",
        "description" : "if you want delete TypeOfBoard object by query = type_of_board_id",
        "operationId" : "delete_TypeOfBoard",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_board_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBoard.delete_permission" : "true",
          "Static Permission key" : "TypeOfBoard_delete"
        }
      }
    },
    "/coreClient/connection/{connection_id}" : {
      "delete" : {
        "tags" : [ "Person" ],
        "summary" : "terminate logging",
        "description" : "You know where the user is logged in. And you can log out this connection. (Terminate token)",
        "operationId" : "remove_Person_Connection",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "connection_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Its possible used that",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Not Found object",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "FloatingPersonToken.delete_permission" : "true"
        }
      }
    },
    "/coreClient/connections" : {
      "get" : {
        "tags" : [ "Person" ],
        "summary" : "get logged connections",
        "description" : "get all connections, where user is logged",
        "operationId" : "get_Person_Connections",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Its possible used that",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FloatingPersonToken"
              }
            }
          },
          "400" : {
            "description" : "Not Found object",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "FloatingPersonToken.read_permission" : "Only user can get own connections - its not possible get that from another account!"
        }
      }
    },
    "/coreClient/mail_person_password_recovery" : {
      "post" : {
        "tags" : [ "Access" ],
        "summary" : "send password recovery email",
        "description" : "sends email with link for changing forgotten password",
        "operationId" : "sendPasswordRecoveryEmail",
        "schemes" : [ "https" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Password_RecoveryEmail"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/coreClient/person/permission/login" : {
      "post" : {
        "tags" : [ "Access", "Person", "APP-Api" ],
        "summary" : "login",
        "description" : "Get access Token",
        "operationId" : "login",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Login"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged",
            "schema" : {
              "$ref" : "#/definitions/Login_Token"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/coreClient/person/permission/logout" : {
      "post" : {
        "tags" : [ "Access", "Person", "APP-Api" ],
        "summary" : "logout",
        "description" : "for logout person - that's deactivate person token ",
        "operationId" : "logout",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged out",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/coreClient/person/person" : {
      "post" : {
        "tags" : [ "Person" ],
        "summary" : "register new Person",
        "description" : "create new Person with unique email and nick_name, for standard registration leave invitationToken empty, it's used only if someone is invited via email",
        "operationId" : "registred_Person",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/coreClient/person/person/all" : {
      "get" : {
        "tags" : [ "Person" ],
        "summary" : "get all Person",
        "description" : "get all Persons",
        "operationId" : "get_Person_all",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Person"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/coreClient/person/person/{person_id}" : {
      "get" : {
        "tags" : [ "Person" ],
        "summary" : "get Person",
        "description" : "get Person by id",
        "operationId" : "get_Person",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "person_id",
          "in" : "path",
          "description" : "person_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Person"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Person" ],
        "summary" : "edit Person basic information",
        "description" : "Edit person basic information",
        "operationId" : "edit_Person_Information",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "person_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Update"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful updated",
            "schema" : {
              "$ref" : "#/definitions/Person"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Person.edit_permission" : "true"
        }
      }
    },
    "/coreClient/person/validate_entity" : {
      "post" : {
        "tags" : [ "Person" ],
        "summary" : "validate some Entity",
        "description" : "for cyclical validation during registration, key contains 'mail' or 'nick_name'",
        "operationId" : "validate_Entity",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Entity_Validation_In"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Result if its possible to used that",
            "schema" : {
              "$ref" : "#/definitions/Entity_Validation_Out"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/coreClient/person_password_recovery" : {
      "put" : {
        "tags" : [ "Access" ],
        "summary" : "change person password",
        "description" : "changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens",
        "operationId" : "personPasswordRecovery",
        "schemes" : [ "https" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person_Password_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Something is wrong",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/file/listOfFiles/{version_id}" : {
      "get" : {
        "tags" : [ "LibraryGroup" ],
        "summary" : "get Libraries from LibraryGroup Version",
        "description" : "If you want get Libraries from LibraryGroup.Version by query = version_id",
        "operationId" : "get_LibraryGroup_Version_Libraries",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/Version_Object"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/grid/m_program/app/m_programs" : {
      "get" : {
        "tags" : [ "APP-Api" ],
        "summary" : "get all M_Program b yLogged Person",
        "description" : "get list of M_Programs by logged Person",
        "operationId" : "get_M_Program_all_forMobile",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/M_Program"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/grid/m_program/app/token/{qr_token}" : {
      "get" : {
        "tags" : [ "APP-Api" ],
        "summary" : "get M_Program by generated token",
        "description" : "get M_Program by token",
        "operationId" : "get_M_Program_byQR_Token_forMobile",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "qr_token",
          "in" : "path",
          "description" : "qr_token String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Program"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "M_Program.read_qrToken_permission" : "read: Private settings for M_Program"
        },
        "x-permission_required" : {
          "M_Program.read_qrToken_permission" : "true",
          "Dynamic Permission key" : "M_Program_read.{project_id}",
          "Static Permission key" : "M_Program_read"
        }
      }
    },
    "/grid/m_program/{m_progrm_id}" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get M_Program",
        "description" : "get M_Program by quarry m_program_id",
        "operationId" : "get_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_progrm_id",
          "in" : "path",
          "description" : "m_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Program"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "M_Program.read_permission" : "read: If user have M_Project.read_permission = true, you can create M_program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Program.read_permission" : "true",
          "Dynamic Permission key" : "M_Program_read.{project_id}",
          "Static Permission key" : "M_Program_read"
        }
      },
      "put" : {
        "tags" : [ "M_Program" ],
        "summary" : "update M_Program",
        "description" : "update m_project - in this case we are not support versions of m_project",
        "operationId" : "edit_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_progrm_id",
          "in" : "path",
          "description" : "m_program_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Program_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "M_Program.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "M_Program" ],
        "summary" : "remove M_Program",
        "description" : "remove M_Program by quarry = m_program_id",
        "operationId" : "remove_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_progrm_id",
          "in" : "path",
          "description" : "m_program_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "M_Program.delete_permission" : "true"
        }
      }
    },
    "/grid/m_program/{m_project_id}" : {
      "post" : {
        "tags" : [ "M_Program" ],
        "summary" : "Create new M_Program",
        "description" : "creating new M_Program",
        "operationId" : "new_M_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Program_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/M_Program"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "M_Program.create_permission" : "create: If user have M_Project.update_permission = true, you can create M_Program on this M_Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.update_permission" : "true",
          "Static Permission key" : "M_Program_create"
        }
      }
    },
    "/grid/m_project/connect/{m_project_id}/{version_id}/{auto_incrementing}" : {
      "put" : {
        "tags" : [ "M_Program" ],
        "summary" : "connect M_Project with B_program",
        "description" : "connect M_project with B_program ( respectively with version of B_program - where is Blocko-Code)",
        "operationId" : "connect_M_Program_with_B_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "auto_incrementing",
          "in" : "path",
          "description" : "auto_incrementing Boolean value",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "M_Project.update_permission" : "true",
          "B_Program.update_permission" : "true"
        }
      }
    },
    "/grid/m_project/disconnect/{m_project_id}" : {
      "put" : {
        "tags" : [ "M_Program" ],
        "summary" : "disconnect M_Project from B_program",
        "description" : "disconnect M_project from B_program ( respectively with version of B_program - where is Blocko-Code)",
        "operationId" : "disconnect_M_Program_from_B_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "M_Project.update_permission" : "true",
          "B_Program.update_permission" : "true"
        }
      }
    },
    "/grid/m_project/person" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get all M_Project by Logged Person",
        "description" : "get List<M_Project> by logged person ->that's required valid token in html head",
        "operationId" : "get_M_Projects_ByLoggedPerson",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/M_Project"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "M_Project.delete_permission" : "read: If user have Project.read_permission = true, you can read M_project on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.remove_permission" : "true",
          "Dynamic Permission key" : "M_Project_delete.{project_id}",
          "Static Permission key" : "M_Project_delete"
        }
      }
    },
    "/grid/m_project/{m_project_id}" : {
      "get" : {
        "tags" : [ "M_Program" ],
        "summary" : "get M_Project",
        "description" : "get M_Project by query = m_project_id",
        "operationId" : "get_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "M_Project.read_permission" : "read: If user have Project.read_permission = true, you can read M_project on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "M_Project.read_permission" : "true",
          "Dynamic Permission key" : "M_Project_read.{project_id}",
          "Static Permission key" : "M_Project_read"
        }
      },
      "put" : {
        "tags" : [ "M_Program" ],
        "summary" : "edit M_Project",
        "description" : "edit basic information in M_Project by query = m_project_id",
        "operationId" : "edit_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Project_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "M_Project.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "M_Program" ],
        "summary" : "remove M_Project",
        "description" : "remove M_Project by query = m_project_id",
        "operationId" : "remove_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "description" : "m_project_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "M_Project.delete_permission" : "true"
        }
      }
    },
    "/grid/m_project/{project_id}" : {
      "post" : {
        "tags" : [ "M_Program" ],
        "summary" : "Create new M_Project",
        "description" : "M_Project is package for M_Programs -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one M_program",
        "operationId" : "new_M_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/M_Project_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/M_Project"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "M_Project_create_permission" : "create: If user have Project.update_permission = true, you can create M_project on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "M_Project_create"
        }
      }
    },
    "/grid/screen_type" : {
      "post" : {
        "tags" : [ "Screen_Size_Type" ],
        "summary" : "create ScreenType",
        "description" : "Create type of screen - its used for describe Grid dimensions for regular users - (Iphone 5, Samsung Galaxy S3 etc..). Its also possible create private Screen for Personal/Enterprises projects if you add to json parameter { \"project_id\" : \"{1576}\"} If json not contain project_id - you need Permission For that!!",
        "operationId" : "new_Screen_Size_Type",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScreeSizeType_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Screen_Size_Type"
              }
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Screen_Size_Type.create_permission" : "create: User can create Screen_Size_Type only on own Project (Project.update_permission = true) - Its private object shared in Project - Or user can create public object for everyone but static/dynamic permission key is required - \"Screen_Size_Type_create\" "
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "Screen_Size_Type_create"
        }
      }
    },
    "/grid/screen_type/all" : {
      "get" : {
        "tags" : [ "Screen_Size_Type" ],
        "summary" : "get all ScreenType",
        "description" : "get all ScreenType. Private_types areon every Persons projects",
        "operationId" : "get_Screen_Size_Type_Combination",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Screen_Size_Type_Combination"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Screen_Size_Type.read_permission" : "read: User can read all public Screen_Size_Type objects or private objects, where user have permission to read"
        },
        "x-permission_required" : {
          "Screen_Size_Type.read_permission" : "true",
          "Static Permission key" : "Screen_Size_Type_read"
        }
      }
    },
    "/grid/screen_type/{screen_size_type_id}" : {
      "get" : {
        "tags" : [ "Screen_Size_Type" ],
        "summary" : "get ScreenType",
        "description" : "get ScreenType. If you want get private ScreenType you have to owned that. Public are without person_permissions",
        "operationId" : "get_Screen_Size_Type",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "screen_size_type_id",
          "in" : "path",
          "description" : "screen_size_type_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Screen_Size_Type"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Screen_Size_Type.read_permission" : "read: User can read all public Screen_Size_Type objects or private objects, where user have permission to read"
        },
        "x-permission_required" : {
          "Screen_Size_Type.read_permission" : "true",
          "Static Permission key" : "Screen_Size_Type_create"
        }
      },
      "put" : {
        "tags" : [ "Screen_Size_Type" ],
        "summary" : "edit ScreenType",
        "description" : "Edit all ScreenType information",
        "operationId" : "edit_Screen_Size_Type",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "screen_size_type_id",
          "in" : "path",
          "description" : "screen_size_type_id String query",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScreeSizeType_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Screen_Size_Type"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Screen_Size_Type.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "Screen_Size_Type" ],
        "summary" : "remove ScreenType",
        "description" : "remove ScreenType",
        "operationId" : "remove_Screen_Size_Type",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "screen_size_type_id",
          "in" : "path",
          "description" : "screen_size_type_id String query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Screen_Size_Type_delete_permission" : "true"
        }
      }
    },
    "/login/facebook" : {
      "get" : {
        "tags" : [ "Access", "Social-Facebook" ],
        "summary" : "login with Facebook",
        "description" : "For login via Facebook \n\n If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person",
        "operationId" : "Facebook",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "return_link",
          "in" : "query",
          "description" : "this is return url address in format  ?return_link=/link/link",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Social_Login"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/login/github" : {
      "get" : {
        "tags" : [ "Access", "Social-GitHub" ],
        "summary" : "login with GitHub",
        "description" : "For login via GitHub \n\n If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person",
        "operationId" : "GitHub",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "return_link",
          "in" : "query",
          "description" : "this is return url address in format  /link/link",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Social_Login"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/login/person" : {
      "get" : {
        "tags" : [ "Access", "Person", "Social-GitHub", "Social-Facebook" ],
        "summary" : "get Person by token (after Oauth2 Login -> Facebook, GitHub, Twitter)",
        "description" : "If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists",
        "operationId" : "getPersonByToken",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged",
            "schema" : {
              "$ref" : "#/definitions/Login_Result"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Wrong Email or Password",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/notification/confirm/{notification_id}" : {
      "put" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "notification_confirm",
        "parameters" : [ {
          "name" : "notification_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/notification/list/{page_number}" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "get latest notification",
        "description" : "Get list of latest user notifications. Server return maximum 25 latest objects. \n\n For get another page (next 25 notifications) call this api with \"page_number\" path parameter. \n\n May missing or you can insert Integer values from page[1,2...,n] in Json",
        "operationId" : "get_notification_page",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. Contain  1,2...  For first call, use 1",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Notification_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/notification/read" : {
      "put" : {
        "tags" : [ "Notifications" ],
        "summary" : "mark notifications as read",
        "description" : "Mark notifications as read. Send list with ids",
        "operationId" : "mark_as_read_notification",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Notification_Read"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete Successful",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/notification/test/{email}" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "try notifications",
        "description" : "This API you can use for testing our notification",
        "operationId" : "test_notifications",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/notification/unconfirmed" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "get unconfirmed notifications",
        "description" : "This API should by called right after user logs in. Sends notifications which require confirmation",
        "operationId" : "get_unconfirmed_notifications",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/notification/{notification_id}" : {
      "delete" : {
        "tags" : [ "Notifications" ],
        "summary" : "delete notification",
        "description" : "remove notification by id",
        "operationId" : "delete_notification",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "notification_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete Successful",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/overflow/answer/{post_id}" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow" ],
        "summary" : "add Answer to the Post",
        "description" : "You can  answer to Main Post. But you cannot answer another answer!",
        "operationId" : "addAnswer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Post_Answer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Post.answer_permission" : "true"
        }
      },
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "edit Comment or Answer Post",
        "description" : "You can update Comment post",
        "operationId" : "edit_Comment_or_Answer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Post_Comment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.edit_permission" : "true"
        }
      }
    },
    "/overflow/comment/{post_id}" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "add comment to the Post",
        "description" : "You can comment Main Post and all answers in Main Post. But you cannot comment another comment!",
        "operationId" : "addComment",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Post_Comment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_required" : {
          "Post.comment_permission" : "true"
        }
      }
    },
    "/overflow/filter/{page_number}" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "get Posts by Filter",
        "description" : "get Post by Filter parameters in JSON. ",
        "operationId" : "get_Post_ByFilter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. Contain  1,2...n. For first call, use 1",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Post_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post_List"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/overflow/hashTag/{post_id}/{hashTag}" : {
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "add HashTag to Post",
        "description" : "add HashTag to post",
        "operationId" : "add_HashTag_to_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "hashTag",
          "in" : "path",
          "description" : "hash_tag String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.edit" : "true",
          "Static Permission key" : "Post_edit"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "remove HashTag from Post",
        "description" : "remove HashTag to post",
        "operationId" : "remove_HashTag_from_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "hashTag",
          "in" : "path",
          "description" : "hash_tag String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.edit" : "true",
          "Static Permission key" : "Post_edit"
        }
      }
    },
    "/overflow/likeMinus/{post_id}" : {
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "like minus on Post",
        "description" : "touch like minus - And user can do that only once! ",
        "operationId" : "likeMinus",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfConfirms"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/overflow/likePlus/{post_id}" : {
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "like plus on Post",
        "description" : "touch like plus - And user can do that only once! ",
        "operationId" : "likePlus",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfConfirms"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/overflow/link/{linked_post_id}" : {
      "delete" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "remove link to Post",
        "description" : "Remove connection (Link) between Posts",
        "operationId" : "unlinkWithPreviousAnswer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "linked_post_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "LinkedPost.delete_permission" : "true"
        }
      }
    },
    "/overflow/link/{question_post_id}/{answer_post_id}" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow" ],
        "summary" : "answer to Post with link",
        "description" : "You can connect question (main Post) with previous version",
        "operationId" : "linkWithPreviousAnswer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "question_post_id",
          "in" : "path",
          "description" : "question_post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "answer_post_id",
          "in" : "path",
          "description" : "This is Answer Id (main post)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/LinkedPost"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/overflow/post" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "Create new Post",
        "description" : "Create new Post. ",
        "operationId" : "new_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Post_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "security" : [ {
          "permission" : [ "project.owner", "Project_Editor" ]
        } ]
      }
    },
    "/overflow/post/{post_id}" : {
      "get" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "get Post",
        "description" : "create new Project",
        "operationId" : "get_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Post" ],
        "summary" : "edit Post",
        "description" : "You can edit main post",
        "operationId" : "edit_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Post_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-OverFlow" ],
        "summary" : "delete Post",
        "description" : "You can delete Main Post, Answers to post and comments.. ",
        "operationId" : "delete_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.delete_permission" : "true"
        }
      }
    },
    "/overflow/typeOfConfirm" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms" ],
        "summary" : "new Type of Confirms",
        "description" : "Create new type of Confirms. Its only for Blocko-OverFlow Administrators!",
        "operationId" : "new_TypeOfConfirms",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfConfirms_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfConfirms"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfConfirm.create_permission" : "true",
          "Static Permission key" : "TypeOfConfirm_create"
        }
      }
    },
    "/overflow/typeOfConfirm/all" : {
      "get" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms" ],
        "summary" : "get Type of Confirms",
        "description" : "get  type of Confirms. Its only for Blocko-OverFlow Administrators!",
        "operationId" : "get_TypeOfConfirms_all",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfConfirms"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/overflow/typeOfConfirm/{post_id}/{type_of_confirm_id}" : {
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms", "Post" ],
        "summary" : "set Type of Confirms to Post",
        "description" : "set type of Confirms to post. Its allowed only for system or Blocko-OverFlow Administrators",
        "operationId" : "set_TypeOfConfirm_to_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type_of_confirm_id",
          "in" : "path",
          "description" : "type_of_confirm_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.edit_confirms_permission" : "true",
          "Static Permission key" : "Post_edit"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms", "Post" ],
        "summary" : "remove Type of Confirms from Post",
        "description" : "set type of Confirms to post. Its allowed only for system or Blocko-OverFlow Administrators",
        "operationId" : "remove_TypeOfConfirm_to_Post",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "post_id",
          "in" : "path",
          "description" : "post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type_of_confirm_id",
          "in" : "path",
          "description" : "type_of_confirm_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Post.edit_confirms_permission" : "true",
          "Static Permission key" : "Post_edit"
        }
      }
    },
    "/overflow/typeOfConfirm/{type_of_confirm_id}" : {
      "get" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms" ],
        "summary" : "get Type of Confirms",
        "description" : "get  type of Confirms. Its only for Blocko-OverFlow Administrators!",
        "operationId" : "get_TypeOfConfirms",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_confirm_id",
          "in" : "path",
          "description" : "type_of_confirm_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfConfirms"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms" ],
        "summary" : "edit Type of Confirms",
        "description" : "edit  type of Confirms. Its only for Blocko-OverFlow Administrators!",
        "operationId" : "edit_TypeOfConfirms",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_confirm_id",
          "in" : "path",
          "description" : "type_of_confirm_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfConfirms_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfConfirms"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfConfirm.edit_permission" : "true",
          "Static Permission key" : "TypeOfConfirm_edit"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Confirms" ],
        "summary" : "edit Type of Confirms",
        "description" : "edit  type of Confirms. Its only for Blocko-OverFlow Administrators!",
        "operationId" : "delete_TypeOfConfirms",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_confirm_id",
          "in" : "path",
          "description" : "type_of_confirm_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfConfirms_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfConfirms"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfConfirm.delete_permission" : "true",
          "Static Permission key" : "TypeOfConfirm_delete"
        }
      }
    },
    "/overflow/typeOfPost" : {
      "post" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Post" ],
        "summary" : "new Type of Post",
        "description" : "Create new type of post. Its only for Blocko-OverFlow Administrators!",
        "operationId" : "new_TypeOfPost",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfPost_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfPost"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "TypeOfPost.create_permission" : "create: User have to own static key \"TypeOfPost_create\" "
        },
        "x-permission_required" : {
          "TypeOfPost.create_permission" : "true",
          "Static Permission key" : "TypeOfPost_create"
        }
      }
    },
    "/overflow/typeOfPost/all" : {
      "get" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Post" ],
        "summary" : "get all Type of Post",
        "description" : "get All Type of Post. (Its for all logged users)",
        "operationId" : "get_TypeOfPost_all",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfPost"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/overflow/typeOfPost/{type_of_post_id}" : {
      "get" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Post" ],
        "summary" : "get Type of Post",
        "description" : "get Type of Post by path id. (Its for all logged users)",
        "operationId" : "get_TypeOfPost",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_post_id",
          "in" : "path",
          "description" : "type_of_post_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfPost"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Post" ],
        "summary" : "edit Type of Post",
        "description" : "edit type of post. Its required special permission!",
        "operationId" : "edit_TypeOfPost",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_post_id",
          "in" : "path",
          "description" : "type_of_post_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfPost_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfPost"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfPost.edit_permission" : "true",
          "Static Permission key" : "TypeOfPost_edit"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-OverFlow", "Type-Of-Post" ],
        "summary" : "delete Type of Post",
        "description" : "delete type of post. Its required special permission!",
        "operationId" : "delete_TypeOfPost",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_post_id",
          "in" : "path",
          "description" : "type_of_post_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfPost.delete_permission" : "true",
          "Static Permission key" : "TypeOfPost_delete"
        }
      }
    },
    "/product/finance/summary" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all Financial Summary for logged User",
        "description" : "get all Financial Summary for logged User",
        "operationId" : "get_financial_summary",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Financial_Summary"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/product/invoice/pay/{invoice_id}" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "reimbursement of an unpaid invoice",
        "description" : "reimbursement of an unpaid invoice - with settings from creating product before",
        "operationId" : "pay_send_invoice",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result- payment is required",
            "schema" : {
              "$ref" : "#/definitions/GoPay_Url"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/product/invoice/remove/{invoice_id}" : {
      "delete" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "remove_invoice",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/product/invoice/send_remainder/{invoice_id}" : {
      "put" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "send_remainder_to_custumer",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/product/invoice/set_pay/{invoice_id}" : {
      "put" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "set_invoice_as_Paid",
        "parameters" : [ {
          "name" : "invoice_id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/product/tarif" : {
      "post" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "create Product under Tariff",
        "description" : "Its basic object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: \n\nFirst(201):  System create new Object - Object Product \n\nSecond(200): The product requires payment - The server creates an object, but returns the payment details - payment go_url for GoPay Terminal!",
        "operationId" : "set_tariff_with_account",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tariff_Register"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created successfully - but payment is required",
            "schema" : {
              "$ref" : "#/definitions/GoPay_Url"
            }
          },
          "201" : {
            "description" : "Created successfully - payment not required",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/product/tarif/details/{payment_details_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "edit Tariff payment details",
        "description" : "edit payments details in Tariff",
        "operationId" : "edit_payment_details",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "payment_details_id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Swagger_Tariff_Details_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Payment_Details"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/product/tarif/general/{product_id}" : {
      "put" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "edit Tariff general details",
        "description" : "edit basic details on user Tariff",
        "operationId" : "edit_general_product_details",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "product_id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Swagger_Tariff_General_Edit"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/product/tarifs/for_registration" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all Product Tariffs",
        "description" : "get all Tariffs - required for every else action in system. For example: Project is created under the Product tariff",
        "operationId" : "get_poducts_tariffs",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Tariff"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/product/tarifs/user_applicable" : {
      "get" : {
        "tags" : [ "Price & Invoice & Tariffs" ],
        "summary" : "get all the products that the User can use",
        "description" : "get all the products that the user can use when creating new projects",
        "operationId" : "get_applicable_products_for_creating_new_project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Applicable_Product"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/project/actualization_procedure/{actualization_procedure_id}" : {
      "get" : {
        "tags" : [ "Actualization" ],
        "summary" : "get actualization Procedure",
        "description" : "get all versions (content) from independent BlockoBlock",
        "operationId" : "get_Actualization_Procedure",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "actualization_procedure_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Actualization_procedure"
            }
          },
          "400" : {
            "description" : "Objects not found - details in message",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Actualization_Procedure.read_permission" : "User can read Actualization_procedure if they have ID of Actualization_procedure"
        },
        "x-permission_required" : {
          "Actualization_Procedure.read_permission" : "true",
          "Static Permission key" : "Actualization_Procedure_read_permission"
        }
      }
    },
    "/project/b_program/list/{page_number}" : {
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "get B_Program by Filter",
        "description" : "get B_Program List",
        "operationId" : "get_b_Program_by_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "B_Program_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/project/b_program/update/{b_program_id}" : {
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "create new Version of B Program",
        "description" : "edit basic information in B_Program object",
        "operationId" : "update_b_program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_Version_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program_Version"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/project/b_program/uploadToCloud/{version_id}" : {
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "upload B Program (version) to cloud",
        "description" : "upload version of B Program to cloud. Its possible have only one version from B program in cloud. If you uploud new one - old one will be replaced",
        "operationId" : "upload_b_Program_ToCloud",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Uploaded",
            "schema" : {
              "$ref" : "#/definitions/Homer_Instance"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/project/b_program/uploadToHomer/{b_program_id}/{version_id}/{homer_id}" : {
      "put" : {
        "tags" : [ "B_Program", "Homer" ],
        "summary" : "upload B_Program (version) to Homer",
        "description" : "If you want upload program (!Immediately!) to Homer -> Homer must be online and connect to Cloud Server, you are uploading B_program version. And if connected M_Project is set to \"Auto_update\", it will automatically update all Grid Terminals.",
        "operationId" : "uploadProgramToHomer_Immediately",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "homer_id",
          "in" : "path",
          "description" : "homer_id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Uploaded",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.update_permission" : "true"
        }
      }
    },
    "/project/b_program/version/{version_id}" : {
      "get" : {
        "tags" : [ "B_Program" ],
        "summary" : "get B Program version",
        "description" : "get B_Program version object",
        "operationId" : "get_b_Program_version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.read_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "B_Program" ],
        "summary" : "remove B Program version",
        "description" : "remove B_Program version object",
        "operationId" : "remove_b_Program_version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version_id",
          "in" : "path",
          "description" : "version_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.delete_permission" : "true"
        }
      }
    },
    "/project/b_program/{b_program_id}" : {
      "get" : {
        "tags" : [ "B_Program" ],
        "summary" : "get B Program",
        "description" : "get B_Program object",
        "operationId" : "get_b_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.read_permission" : "true"
        }
      },
      "put" : {
        "tags" : [ "B_Program" ],
        "summary" : "edit B_Program",
        "description" : "edit basic information in B_Program object",
        "operationId" : "edit_b_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/B_Program"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "B_Program" ],
        "summary" : "remove B Program",
        "description" : "remove B_Program object",
        "operationId" : "remove_b_Program",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "b_program_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "B_program.delete_permission" : "true"
        }
      }
    },
    "/project/b_program/{project_id}" : {
      "post" : {
        "tags" : [ "B_Program" ],
        "summary" : "create new B_Program",
        "description" : "create new B_Program",
        "operationId" : "new_b_Program",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/B_Program_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/B_Program"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.update_permission" : "true"
        }
      }
    },
    "/project/blocko/server" : {
      "get" : {
        "tags" : [ "External Server" ],
        "summary" : "get all Blocko Servers",
        "description" : "get all Blocko Servers",
        "operationId" : "get_All_Blocko_Server",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Homer_Server"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Cloud_Homer_Server.read_permission" : "read: User (Admin with privileges) can read public servers, User (Customer) can read own private servers"
        },
        "x-permission_required" : {
          "Cloud_Homer_Server.read_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_read"
        }
      },
      "post" : {
        "tags" : [ "External Server" ],
        "summary" : "Create new Blocko Server",
        "description" : "Create new Gate for Blocko Server",
        "operationId" : "create_Blocko_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Cloud_Homer_Server"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Homer_Server"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Cloud_Homer_Server.create_permission" : "create: User (Admin with privileges) can create public cloud cloud_blocko_server where the system uniformly creating Blocko instantiates or (Customer) can create private cloud_blocko_server for own projects"
        },
        "x-permission_required" : {
          "Cloud_Blocko_Server.create_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_creat"
        }
      }
    },
    "/project/blocko/server/{server_id}" : {
      "put" : {
        "tags" : [ "External Server" ],
        "summary" : "edit Compilation Server",
        "description" : "Edit basic information Compilation Server",
        "operationId" : "edit_Blocko_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server_id",
          "in" : "path",
          "description" : "server_id ",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Cloud_Homer_Server"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated successfully",
            "schema" : {
              "$ref" : "#/definitions/Cloud_Homer_Server"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Cloud_Homer_Server.edit_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_edit"
        }
      },
      "delete" : {
        "tags" : [ "External Server" ],
        "summary" : "remove Compilation Servers",
        "description" : "remove Compilation Servers",
        "operationId" : "delete_Blocko_Server",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "server_id",
          "in" : "path",
          "description" : "server_id ",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Cloud_Homer_Server.delete_permission" : "true",
          "Static Permission key" : "Cloud_Homer_Server_delete"
        }
      }
    },
    "/project/blockoBlock" : {
      "post" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "create new Block",
        "description" : "creating new independent Block object for Blocko tools",
        "operationId" : "new_Block",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlock"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlock_create_permission" : "create: If user have TypeOfBlock.update_permission = true, you can create new BlockoBlocks on this TypeOfBlock - Or you need static/dynamic permission key if user want create BlockoBlock in public TypeOfBlock"
        },
        "x-permission_required" : {
          "TypeOfBlocko.update_permission" : "true",
          "Static Permission key" : "BlockoBlock_create_permission"
        }
      }
    },
    "/project/blockoBlock/list/{page_number}" : {
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get BlockoBlock by Filter",
        "description" : "get BlockoBlock List",
        "operationId" : "get_BlockoBlock_by_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Blocko_Block_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Blocko_Block_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "BlockoBlock_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/project/blockoBlock/version/all/{blocko_block_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get all BlockoBlock version",
        "description" : "get all versions (content) from independent BlockoBlock",
        "operationId" : "get_BlockoBlock_all_versions",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_BlockoVersion_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BlockoBlockVersion"
              }
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_readd_permission" : "read: If user can read BlockoBlock, than can read all Versions from list of BlockoBlock ( You get ids of list of version in object \"BlockoBlocks\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "BlockoBlock.read_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_read_permission"
        }
      }
    },
    "/project/blockoBlock/version/{blocko_block_id}" : {
      "post" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "create BlockoBlock version",
        "description" : "new BlockoBlock version",
        "operationId" : "new_BlockoBlock_Version",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_BlockoVersion_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlockVersion"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_creat_permission" : "create: If user have BlockoBlock.update_permission = true, you can create new version of BlockoBlocks on this BlockoBlock - Or you need static/dynamic permission key if user want create version of BlockoBlock in public BlockoBlock in public TypeOfBlock"
        },
        "x-permission_required" : {
          "BlockoBlock.update_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_create_permission"
        }
      }
    },
    "/project/blockoBlock/version/{blocko_block_version_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get version of the BlockoBlock",
        "description" : "get version (content) from independent BlockoBlock",
        "operationId" : "get_BlockoBlock_Version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_version_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlockVersion"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlockVersion_read_permission" : "read: If user can read BlockoBlock, than can read all Versions from list of BlockoBlock ( You get ids of list of version in object \"BlockoBlocks\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "BlockoBlock.read_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_read_permission"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "delete BlockoBlock version",
        "description" : "delete BlockoBlock version",
        "operationId" : "delete_BlockoBlock_Version",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_version_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlockVersion.delete_permission" : "true",
          "Static Permission key" : "BlockoBlockVersion_delete_permission"
        }
      }
    },
    "/project/blockoBlock/{blocko_block_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get BlockoBlock",
        "description" : "get independent BlockoBlock object",
        "operationId" : "getBlockoBlock",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlock"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "BlockoBlock_read_permission" : "read: If user can read TypeOfBlock, than can read all BlockoBlocks from list of TypeOfBlock ( You get ids of list of BlockoBlocks in object \"BlockoBlocks\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "BlockoBlock.read_permission" : "true",
          "Static Permission key" : "BlockoBlock_read_permission"
        }
      },
      "put" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "edit basic information of the BlockoBlock",
        "description" : "update basic information (name, and desription) of the independent BlockoBlock",
        "operationId" : "edit_Block",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BlockoBlock_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/BlockoBlock"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlock.edit_permission" : "true",
          "Static Permission key" : "BlockoBlock_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "delete BlockoBlock",
        "description" : "delete BlockoBlock",
        "operationId" : "deleteBlock",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "blocko_block_id",
          "in" : "path",
          "description" : "blocko_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "BlockoBlock.delete_permission" : "true",
          "Static Permission key" : "BlockoBlock_delete_permission"
        }
      }
    },
    "/project/board/all_details/{project_id}" : {
      "get" : {
        "tags" : [ "Blocko", "B_Program" ],
        "summary" : "get Boards details for integration to Blocko program",
        "description" : "get all boards that user can integrate to Blocko program",
        "operationId" : "board_all_details_for_blocko",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Boards_For_Blocko"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "project.read_permission" : "true",
          "Static Permission key" : "Project_read_permission"
        }
      }
    },
    "/project/homer" : {
      "post" : {
        "tags" : [ "Homer" ],
        "summary" : "create new Homer",
        "description" : "create new Homer",
        "operationId" : "newHomer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Homer_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Private_Homer_Server"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Private_Homer_Server.create_permission" : "Its not allowed to create Homer by user. Homer (installed on PC or created in cloud) must build itself in DB - there are private APIs for Homer-Js! User can only connect this homer with own Project in Homer program (there is Login and buttons for connect to project"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "Private_Homer_Server_create"
        }
      }
    },
    "/project/homer/filter/{page_number}" : {
      "put" : {
        "tags" : [ "Homer" ],
        "summary" : "get Homers with Filters parameters",
        "description" : "If you want get all or only some Homers you can use filter parameters in Json. But EveryTime server return maximal 25 objects \n\nso, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... in Json we help you with pages list \n ",
        "operationId" : "get_Homers_by_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Homer_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok result",
            "schema" : {
              "$ref" : "#/definitions/Homer_List"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "Permission: " : "Permission is not required!"
        }
      }
    },
    "/project/homer/{homer_id}" : {
      "get" : {
        "tags" : [ "Homer" ],
        "summary" : "remove Homer",
        "description" : "remove Homer",
        "operationId" : "getHomer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "homer_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Private_Homer_Server"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Private_Homer_Server.read_permission" : "read: If user have Project.update_permission = true, you can create Private_Homer_Server on this Project - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Private_Homer_Server.read_permission" : "true",
          "Static Permission key" : "Private_Homer_Server_read"
        }
      },
      "delete" : {
        "tags" : [ "Homer" ],
        "summary" : "remove Homer",
        "description" : "remove Homer",
        "operationId" : "removeHomer",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "homer_id",
          "in" : "path",
          "description" : "b_program_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Private_Homer_Server.delete_permission" : "true"
        }
      }
    },
    "/project/homer/{project_id}/{homer_id}" : {
      "put" : {
        "tags" : [ "Homer", "Project" ],
        "summary" : "connect Homer with Project",
        "description" : "remove Homer",
        "operationId" : "connectHomerWithProject",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "homer_id",
          "in" : "path",
          "description" : "id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission" : "It requires both permission"
        },
        "x-permission_required" : {
          "Homer.update_permission" : "true",
          "Project.update_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "Homer", "Project" ],
        "summary" : "connect Homer with Project",
        "description" : "remove Homer",
        "operationId" : "disconnectHomerWithProject",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "homer_id",
          "in" : "path",
          "description" : "id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Permission" : "It requires both permission"
        },
        "x-permission_required" : {
          "Homer.update_permission" : "true",
          "Project.update_permission" : "true"
        }
      }
    },
    "/project/listOfHomersWaitingForUpload/{id}" : {
      "get" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "listOfHomersWaitingForUpload",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/project/listOfUploadedHomers/{id}" : {
      "get" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "listOfUploadedHomers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/project/project" : {
      "get" : {
        "tags" : [ "Project" ],
        "summary" : "get Project by logged Person",
        "description" : "get all Projects by logged Person",
        "operationId" : "getProjectsByUserAccount",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Project"
              }
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Project" ],
        "summary" : "create new Project",
        "description" : "create new Project",
        "operationId" : "postNewProject",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      }
    },
    "/project/project/addParticipant/{invitation_id}/{decision}" : {
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "add participant to a Project",
        "description" : "adds Person to a Project, every piece of information is held in Invitation",
        "operationId" : "addParticipantToProject",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "invitation_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "decision",
          "in" : "path",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Objects not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/project/project/shareProject/{project_id}" : {
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "share Project with Users",
        "description" : "sends Invitation to all users in list: List<persons_mail>",
        "operationId" : "shareProjectWithUsers",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ShareProject_Person"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.share_permission" : "true"
        }
      }
    },
    "/project/project/unshareProject/{project_id}" : {
      "put" : {
        "tags" : [ "Project", "Board" ],
        "summary" : "unshare Project with Persons",
        "description" : "unshare Project with all users in list: List<person_id>",
        "operationId" : "unshareProjectWithUsers",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ShareProject_Person"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.unshare_permission" : "true"
        }
      }
    },
    "/project/project/{project_id}" : {
      "get" : {
        "tags" : [ "Project" ],
        "summary" : "get Project",
        "description" : "get Projects by project_id",
        "operationId" : "getProject",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Project.read_permission" : "read: For all project: User can read project on API: {GET /project/project) - get Project by logged Person "
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Dynamic Permission key" : "Project_read.{project_id}",
          "Static Permission key" : "Project_read"
        }
      },
      "put" : {
        "tags" : [ "Project" ],
        "summary" : "edit Project",
        "description" : "edit ne Project",
        "operationId" : "edit_Project",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Project_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.edit_permission" : "true"
        }
      },
      "delete" : {
        "tags" : [ "Project" ],
        "summary" : "delete Project",
        "description" : "delete Projects by project_id",
        "operationId" : "deleteProject",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "project_id",
          "in" : "path",
          "description" : "project_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Something is wrong - details in message ",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "Project.delete_permission" : "true"
        }
      }
    },
    "/project/typeOfBlock" : {
      "get" : {
        "tags" : [ "Type of Block" ],
        "summary" : "get all Type of Block list",
        "description" : "delete group for BlockoBlocks -> Type of block",
        "operationId" : "getAllTypeOfBlocks",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TypeOfBlock"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Type of Block" ],
        "summary" : "create new Type of Block",
        "description" : "creating group for BlockoBlocks -> Type of block",
        "operationId" : "newTypeOfBlock",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBlock_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBlock"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "TypeOfBlock_create_permission" : "create: If user have Project.update_permission = true, you can create TypeOfBlock on this Project - Or you need static/dynamic permission key if user want create public TypeOfBlock"
        },
        "x-permission_required" : {
          "Project.update_permission" : "true",
          "Static Permission key" : "TypeOfBlock_create_permission"
        }
      }
    },
    "/project/typeOfBlock/list/{page_number}" : {
      "put" : {
        "tags" : [ "Type of Block" ],
        "summary" : "get TypeOfBlock by Filter",
        "description" : "get TypeOfBlock List",
        "operationId" : "get_TypeOfBlock_by_Filter",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_number",
          "in" : "path",
          "description" : "page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Type_Of_Block_Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Type_Of_Block_List"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        },
        "x-permission_description" : {
          "TypeOfBlock_read_permission" : "No need to check permission, because Tyrion returns only those results which user owns"
        }
      }
    },
    "/project/typeOfBlock/{type_of_block_id}" : {
      "get" : {
        "tags" : [ "Blocko-Block" ],
        "summary" : "get TypeOfBlock ",
        "description" : "get BlockoBlock ",
        "operationId" : "get_TypeOfBlock",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBlock"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "TypeOfBlock_read_permission" : "read: If user have Project.read_permission = true, you can read TypeOfBlock on this Project ( You get ids of list of TypeOfBLocks in object \"project\" in json)  - Or you need static/dynamic permission key"
        },
        "x-permission_required" : {
          "Project.read_permission" : "true",
          "Project == null - Public TypeOfBlock" : "Permission not Required!",
          "Static Permission key" : "TypeOfBlock_create_permission"
        }
      },
      "put" : {
        "tags" : [ "Type of Block" ],
        "summary" : "edit Type of Block",
        "description" : "edit Type of block object",
        "operationId" : "editTypeOfBlock",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "type_of_block_id String path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TypeOfBlock_New"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/TypeOfBlock"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBlock.edit_permission" : "true",
          "Static Permission key" : "TypeOfBlock_edit_permission"
        }
      },
      "delete" : {
        "tags" : [ "Type of Block" ],
        "summary" : "delete Type of Block",
        "description" : "delete group for BlockoBlocks -> Type of block",
        "operationId" : "deleteTypeOfBlock",
        "schemes" : [ "https" ],
        "consumes" : [ "text/html" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type_of_block_id",
          "in" : "path",
          "description" : "type_of_block_id String path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "TypeOfBlock.delete_permission" : "true",
          "Static Permission key" : "TypeOfBlock_delete_permission"
        }
      }
    },
    "/secure/permission/all" : {
      "get" : {
        "tags" : [ "Permission" ],
        "summary" : "get all system Permissions",
        "description" : "Get all user Permission. You need permission for that or have right system Roles",
        "operationId" : "get_Permission_All",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PersonPermission"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Public" : "Without Permission"
        }
      }
    },
    "/secure/person/system_acces/{person_id}" : {
      "get" : {
        "tags" : [ "Role", "Permission", "Person" ],
        "summary" : "get all system person_permissions & Roles",
        "description" : "This api return List of Roles and List of Permission",
        "operationId" : "get_System_Acces",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "person_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/System_Access"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Person.all_permission" : "Its public information"
        },
        "x-permission_required" : {
          "public" : "true"
        }
      }
    },
    "/secure/role" : {
      "post" : {
        "tags" : [ "Role" ],
        "summary" : "create new Role",
        "description" : "If you want create new Role in system. You need permission for that or have right system Roles",
        "operationId" : "new_Role",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SecurityRole_New"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "schema" : {
              "$ref" : "#/definitions/SecurityRole"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "SecurityRole_create" : "true"
        }
      }
    },
    "/secure/role/all" : {
      "get" : {
        "tags" : [ "Role" ],
        "summary" : "get all Role from system",
        "description" : "If you set Role to Person. You need permission for that or have right system Roles",
        "operationId" : "get_Role_All",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SecurityRole"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_description" : {
          "Public" : "Without Permisison"
        }
      }
    },
    "/secure/role/person/{mail}/{role_id}" : {
      "put" : {
        "tags" : [ "Role", "Person" ],
        "summary" : "add Person to Role (Group) ",
        "description" : "If you set Role to Person. You need permission for that or have right system Roles",
        "operationId" : "add_Role_Person",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mail",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "role_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok Result",
            "schema" : {
              "$ref" : "#/definitions/Result ok"
            }
          },
          "400" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/Object not found"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          },
          "403" : {
            "description" : "Need required permission",
            "schema" : {
              "$ref" : "#/definitions/PermissionRequired"
            }
          }
        },
        "x-permission_required" : {
          "SecurityRole_update" : "true"
        }
      }
    },
    "/test1" : {
      "get" : {
        "tags" : [ "Not Documented API - InProgress or Stuck" ],
        "operationId" : "test1",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Result"
            },
            "headers" : { }
          }
        }
      }
    },
    "/websocket/access_token" : {
      "get" : {
        "tags" : [ "Access", "WebSocket" ],
        "summary" : "get temporary Connection Token",
        "description" : "for connection to websocket, you have to connect with temporary unique token. This Api return ",
        "operationId" : "get_Websocket_token",
        "schemes" : [ "https" ],
        "consumes" : [ "text/plain" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Token succesfuly generated",
            "schema" : {
              "$ref" : "#/definitions/WebSocket_Token"
            }
          },
          "401" : {
            "description" : "Unauthorized request",
            "schema" : {
              "$ref" : "#/definitions/Result_Unauthorized"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/websocket/becki/{secure_token}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "FrontEnd Becki Connection",
        "description" : "",
        "operationId" : "becki_website_connection",
        "parameters" : [ {
          "name" : "secure_token",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/websocket/blocko_server/{identificator}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "Homer Server Connection",
        "description" : "",
        "operationId" : "blocko_cloud_server_connection",
        "parameters" : [ {
          "name" : "identificator",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/websocket/compilation_server/{identificator}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "Compilation Server Conection",
        "description" : "",
        "operationId" : "compilator_server_connection",
        "parameters" : [ {
          "name" : "identificator",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/websocket/mobile/{m_project_id}/{mac_adress}" : {
      "get" : {
        "tags" : [ "WebSocket" ],
        "summary" : "Terminal connection",
        "description" : "",
        "operationId" : "mobile_connection",
        "parameters" : [ {
          "name" : "m_project_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mac_adress",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/WebSocketString"
            }
          }
        }
      }
    },
    "/websocket/terminal/identificator" : {
      "put" : {
        "tags" : [ "APP-Api" ],
        "summary" : "get Terminal terminal_id",
        "description" : "Only for Grid Terminals! Before when you want connect terminal (grid) application with Tyrion throw WebSocker. You need unique identification key. If Person loggs to you application Tyrion connects this device with Person. Try to save this key to cookies or on mobile device, or you have to ask every time again",
        "operationId" : "get_identificator",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Grid_Terminal_Identf"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successful created",
            "schema" : {
              "$ref" : "#/definitions/Grid_Terminal"
            }
          },
          "400" : {
            "description" : "Some Json value Missing",
            "schema" : {
              "$ref" : "#/definitions/Json_Value_Missing_Result"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    },
    "/websocket/terminal/identificator/{terminal_id}" : {
      "put" : {
        "tags" : [ "APP-Api" ],
        "summary" : "check Terminal terminal_id",
        "description" : "For every app (terminal) opening you have to valid your terminal_id.",
        "operationId" : "check_identifiactor",
        "schemes" : [ "https" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "terminal_id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Contains Json with values",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Grid_Terminal_Identf"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Valid Identification",
            "schema" : {
              "$ref" : "#/definitions/Grid_Terminal"
            }
          },
          "400" : {
            "description" : "Invalid Identification",
            "schema" : {
              "$ref" : "#/definitions/Bad Request"
            }
          },
          "500" : {
            "description" : "Server side Error"
          }
        }
      }
    }
  },
  "definitions" : {
    "SecurityRole" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "id", "name", "person_permissions_id", "persons_id", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "persons_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "person_permissions_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Boards_For_Blocko" : {
      "type" : "object",
      "required" : [ "boards", "c_programs", "typeOfBoards" ],
      "properties" : {
        "c_programs" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program"
          }
        },
        "typeOfBoards" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/TypeOfBoard"
          }
        },
        "boards" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Board"
          }
        }
      },
      "description" : "Json Model for Blocko in Becki for accessible hardware and firmware versions"
    },
    "Invoice" : {
      "type" : "object",
      "required" : [ "payment_method", "payment_status" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "invoice_number" : {
          "type" : "string"
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time"
        },
        "payment_method" : {
          "type" : "string",
          "readOnly" : true
        },
        "pdf_link" : {
          "type" : "string",
          "description" : "Visible only when the invoice is available",
          "readOnly" : true
        },
        "require_payment" : {
          "type" : "boolean",
          "description" : "Visible only when the invoice is not paid",
          "readOnly" : true,
          "default" : false
        },
        "payment_status" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Screen_Size_Type_Combination" : {
      "type" : "object",
      "required" : [ "private_types", "public_types" ],
      "properties" : {
        "private_types" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Screen_Size_Type"
          }
        },
        "public_types" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Screen_Size_Type"
          }
        }
      },
      "description" : "Json Model with two lists<Screen_Size_Type>"
    },
    "Bad Request" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "error" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "When is something wrong"
    },
    "Swagger_Tariff_Details_Edit" : {
      "type" : "object",
      "required" : [ "city", "company_account", "country", "street", "street_number", "zip_code" ],
      "properties" : {
        "street" : {
          "type" : "string",
          "description" : "Required: alwaysThe street must have at least 4 characters"
        },
        "street_number" : {
          "type" : "string",
          "description" : "Required: alwaysBut The street_number can be empty"
        },
        "city" : {
          "type" : "string",
          "description" : "Required: alwaysThe city must have at least 4 characters"
        },
        "zip_code" : {
          "type" : "string",
          "description" : "Required: alwaysThe zip_code must have at least 5 digits"
        },
        "country" : {
          "type" : "string",
          "description" : "Required: alwaysThe country must have at least 4 characters"
        },
        "company_account" : {
          "type" : "boolean",
          "description" : "Required: only if user want have business account",
          "default" : false
        },
        "registration_no" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_registration_no must have at least 4 characters"
        },
        "vat_number" : {
          "type" : "string",
          "example" : "CZ28496639",
          "description" : "Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters"
        },
        "company_name" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_name must have at least 4 characters"
        },
        "company_authorized_email" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_authorized_email must have at least 4 characters"
        },
        "company_authorized_phone" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters"
        },
        "company_web" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueThe company_web url must be valid "
        },
        "company_invoice_email" : {
          "type" : "string",
          "description" : "Required: only if company_account = trueEmail must be valid"
        }
      }
    },
    "Product" : {
      "type" : "object",
      "required" : [ "currency", "payment_method", "payment_mode", "product_type" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "product_individual_name" : {
          "type" : "string"
        },
        "paid_until_the_day" : {
          "type" : "string",
          "format" : "date-time"
        },
        "remaining_credit" : {
          "type" : "number",
          "format" : "double"
        },
        "currency" : {
          "type" : "string",
          "enum" : [ "CZK", "EUR" ]
        },
        "invoices" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Invoice"
          }
        },
        "payment_details" : {
          "$ref" : "#/definitions/Payment_Details"
        },
        "product_type" : {
          "type" : "string",
          "readOnly" : true
        },
        "payment_mode" : {
          "type" : "string",
          "readOnly" : true
        },
        "payment_method" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "ScreeSizeType_New" : {
      "type" : "object",
      "required" : [ "height_lock", "landscape_height", "landscape_max_screens", "landscape_min_screens", "landscape_square_height", "landscape_square_width", "landscape_width", "name", "portrait_height", "portrait_max_screens", "portrait_min_screens", "portrait_square_height", "portrait_square_width", "portrait_width", "touch_screen", "width_lock" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name must have at least 3 characters. Must be unique if its not private!"
        },
        "height_lock" : {
          "type" : "boolean",
          "default" : false
        },
        "width_lock" : {
          "type" : "boolean",
          "default" : false
        },
        "touch_screen" : {
          "type" : "boolean",
          "default" : false
        },
        "project_id" : {
          "type" : "string",
          "description" : "When you want create private screen"
        },
        "landscape_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_square_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_square_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_max_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_min_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_square_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_square_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_max_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_min_screens" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "description" : "Json Model for new Scree Size Type "
    },
    "LibraryGroup_Version" : {
      "type" : "object",
      "required" : [ "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "MinLength >= 2"
        },
        "version_description" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for new Version for LibraryGroup"
    },
    "JsonNode" : {
      "type" : "object",
      "properties" : {
        "array" : {
          "type" : "boolean",
          "default" : false
        },
        "null" : {
          "type" : "boolean",
          "default" : false
        },
        "object" : {
          "type" : "boolean",
          "default" : false
        },
        "binary" : {
          "type" : "boolean",
          "default" : false
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "float" : {
          "type" : "boolean",
          "default" : false
        },
        "number" : {
          "type" : "boolean",
          "default" : false
        },
        "long" : {
          "type" : "boolean",
          "default" : false
        },
        "double" : {
          "type" : "boolean",
          "default" : false
        },
        "valueNode" : {
          "type" : "boolean",
          "default" : false
        },
        "short" : {
          "type" : "boolean",
          "default" : false
        },
        "pojo" : {
          "type" : "boolean",
          "default" : false
        },
        "missingNode" : {
          "type" : "boolean",
          "default" : false
        },
        "containerNode" : {
          "type" : "boolean",
          "default" : false
        },
        "integralNumber" : {
          "type" : "boolean",
          "default" : false
        },
        "floatingPointNumber" : {
          "type" : "boolean",
          "default" : false
        },
        "bigDecimal" : {
          "type" : "boolean",
          "default" : false
        },
        "bigInteger" : {
          "type" : "boolean",
          "default" : false
        },
        "textual" : {
          "type" : "boolean",
          "default" : false
        },
        "boolean" : {
          "type" : "boolean",
          "default" : false
        },
        "int" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ShareProject_Person" : {
      "type" : "object",
      "required" : [ "persons_mail" ],
      "properties" : {
        "persons_mail" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for sharing project with Persons"
    },
    "Program_Actualization" : {
      "type" : "object",
      "required" : [ "b_program_id", "b_program_name", "b_program_version_id", "b_program_version_name" ],
      "properties" : {
        "b_program_id" : {
          "type" : "string",
          "description" : "Can be empty"
        },
        "b_program_version_id" : {
          "type" : "string",
          "description" : "Can be empty"
        },
        "b_program_name" : {
          "type" : "string",
          "description" : "Can be empty"
        },
        "b_program_version_name" : {
          "type" : "string",
          "description" : "Can be empty"
        }
      }
    },
    "Board" : {
      "type" : "object",
      "required" : [ "delete_permission", "edit_permission", "id", "isActive", "personal_description", "project_id", "project_name", "read_permission", "status", "type_of_board_id", "type_of_board_name", "up_to_date", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "personal_description" : {
          "type" : "string"
        },
        "isActive" : {
          "type" : "boolean",
          "default" : false
        },
        "status" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Board_status"
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "up_to_date" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "first_connect_permission" : {
          "description" : "It will be visible in Json object, only if value is true. This is an extraordinary value",
          "readOnly" : true,
          "$ref" : "#/definitions/boolean"
        },
        "project_name" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "LibraryGroup_New" : {
      "type" : "object",
      "required" : [ "description", "group_name" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "The description must have at least 24 characters"
        },
        "group_name" : {
          "type" : "string",
          "description" : "The name must have at least 8 characters"
        }
      },
      "description" : "Json Model for new LibraryGroup"
    },
    "TypeOfBoard_New" : {
      "type" : "object",
      "required" : [ "connectible_to_internet", "description", "name", "processor_id", "producer_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name must have at least 8 characters"
        },
        "description" : {
          "type" : "string",
          "description" : "The description must have at least 10 characters"
        },
        "producer_id" : {
          "type" : "string",
          "description" : "Required valid producer_id"
        },
        "processor_id" : {
          "type" : "string",
          "description" : "Required valid processor_id"
        },
        "connectible_to_internet" : {
          "type" : "boolean",
          "description" : "If device can connect to internet",
          "default" : false
        }
      },
      "description" : "Json Model for new TypeOfBoard"
    },
    "Login_Token" : {
      "type" : "object",
      "required" : [ "authToken" ],
      "properties" : {
        "authToken" : {
          "type" : "string",
          "description" : "X-AUTH-TOKEN - used this token in HTML head for verifying the identities",
          "readOnly" : true
        }
      },
      "description" : "Json Model that you will get, if login was successful"
    },
    "Single_Library_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/SingleLibrary"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual SingleLibrary List"
    },
    "Post_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Post"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Post List"
    },
    "BlockoBlock" : {
      "type" : "object",
      "required" : [ "author_id", "delete_permission", "edit_permission", "general_description", "id", "name", "type_of_block_id", "update_permission", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "general_description" : {
          "type" : "string"
        },
        "versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "type_of_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "author_id" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "C_Program_Version" : {
      "type" : "object",
      "required" : [ "compilable", "compilation_in_progress", "compilation_restored", "runing_on_board", "successfully_compiled", "version_object", "virtual_input_output" ],
      "properties" : {
        "version_object" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Version_Object"
        },
        "successfully_compiled" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "compilation_in_progress" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "compilable" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "main" : {
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        },
        "user_files" : {
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        },
        "external_libraries" : {
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        },
        "virtual_input_output" : {
          "type" : "string",
          "description" : "Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf",
          "readOnly" : true
        },
        "compilation_restored" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "runing_on_board" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for Version of C_program"
    },
    "Homer_New" : {
      "type" : "object",
      "required" : [ "mac_address", "type_of_device" ],
      "properties" : {
        "mac_address" : {
          "type" : "string",
          "description" : "Required unique value - its MacAddress of Homer"
        },
        "type_of_device" : {
          "type" : "string",
          "example" : "Raspberry, ServerPC..",
          "description" : "Its a name of Device"
        },
        "project_id" : {
          "type" : "string",
          "description" : "Required if user want used Homer with project"
        }
      },
      "description" : "Json Model for new Homer"
    },
    "Person_Password_New" : {
      "type" : "object",
      "required" : [ "mail", "password", "password_recovery_token" ],
      "properties" : {
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        },
        "password" : {
          "type" : "string",
          "description" : "The password must have at least 8 characters"
        },
        "password_recovery_token" : {
          "type" : "string",
          "description" : "Required authToken"
        }
      },
      "description" : "Json Model for recovering person password"
    },
    "System_Access" : {
      "type" : "object",
      "required" : [ "permissions", "roles" ],
      "properties" : {
        "roles" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/SecurityRole"
          }
        },
        "permissions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/PersonPermission"
          }
        }
      },
      "description" : "Json Model for System Access>"
    },
    "Board_Filter" : {
      "type" : "object",
      "properties" : {
        "typeOfBoards" : {
          "type" : "array",
          "description" : "List of typeOfBoard.id",
          "items" : {
            "type" : "string"
          }
        },
        "active" : {
          "type" : "string",
          "description" : "Boolean - required in String! \"true\" or \"false \""
        },
        "projects" : {
          "type" : "array",
          "description" : "List of project.id",
          "items" : {
            "type" : "string"
          }
        },
        "producers" : {
          "type" : "array",
          "description" : "List of producer.id",
          "items" : {
            "type" : "string"
          }
        },
        "processors" : {
          "type" : "array",
          "description" : "List of processor.id",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for Filtering Boards"
    },
    "C_Program" : {
      "type" : "object",
      "required" : [ "dateOfCreate", "delete_permission", "edit_permission", "program_name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "program_name" : {
          "type" : "string",
          "description" : "minimal length is 8 characters"
        },
        "program_description" : {
          "type" : "string",
          "description" : "can be empty"
        },
        "dateOfCreate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "program_versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Version"
          }
        },
        "project_name" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Object represented C_Program in database"
    },
    "Type_Of_Block_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Type_Of_Block_Light"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Type_Of_Block List"
    },
    "Login" : {
      "type" : "object",
      "required" : [ "mail", "password" ],
      "properties" : {
        "mail" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for new Basic Login"
    },
    "PersonPermission" : {
      "type" : "object",
      "required" : [ "description", "edit_permission", "edit_person_permission", "value" ],
      "properties" : {
        "value" : {
          "type" : "string",
          "description" : "Permission key - \"(static key)\"",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Description for \"(static key)\"",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "edit_person_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Project" : {
      "type" : "object",
      "required" : [ "actual_procedures_id", "b_programs_id", "boards_id", "bugs", "c_programs_id", "delete_permission", "edit_permission", "errors", "homers_id", "m_projects_id", "participants", "product_id", "product_individual_name", "screen_size_types_id", "share_permission", "tier_name", "type_of_blocks_id", "unshare_permission", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "project_name" : {
          "type" : "string"
        },
        "project_description" : {
          "type" : "string"
        },
        "errors" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "bugs" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "product_id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "homers_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "boards_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "b_programs_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "c_programs_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "m_projects_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "type_of_blocks_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "screen_size_types_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "actual_procedures_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "product_individual_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "tier_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "participants" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project_participant"
          }
        },
        "unshare_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "share_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "LibraryGroup" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "group_name", "id", "processors_id", "update_permission", "versions_id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "group_name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "processors_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "versions_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Homer_Instance" : {
      "type" : "object",
      "required" : [ "running_from" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "macAddress" : {
          "type" : "string"
        },
        "running_from" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "private_instance_board" : {
          "$ref" : "#/definitions/Board"
        }
      }
    },
    "FloatingPersonToken" : {
      "type" : "object",
      "required" : [ "access_age", "connection_id", "created", "delete_permission", "notification_subscriber", "providerKey", "providerUserId", "read_permission", "returnUrl", "social_tokenVerified", "typeOfConnection", "user_agent" ],
      "properties" : {
        "connection_id" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "access_age" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "user_agent" : {
          "type" : "string"
        },
        "providerUserId" : {
          "type" : "string"
        },
        "providerKey" : {
          "type" : "string"
        },
        "typeOfConnection" : {
          "type" : "string"
        },
        "returnUrl" : {
          "type" : "string"
        },
        "social_tokenVerified" : {
          "type" : "boolean",
          "default" : false
        },
        "notification_subscriber" : {
          "type" : "boolean",
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Social_Login" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "Facebook", "GitHub" ]
        },
        "redirect_url" : {
          "type" : "string",
          "description" : "URL that you have to redirect user",
          "readOnly" : true
        },
        "authToken" : {
          "type" : "string",
          "description" : "token, that you have to used in HTML head for verifying the identities",
          "readOnly" : true
        }
      },
      "description" : "Json Model for new Basic Login throw the social networks"
    },
    "Person" : {
      "type" : "object",
      "required" : [ "full_name", "id", "mail", "nick_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "mail" : {
          "type" : "string"
        },
        "nick_name" : {
          "type" : "string"
        },
        "full_name" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Processor_New" : {
      "type" : "object",
      "required" : [ "description", "processor_code", "processor_name", "speed" ],
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "The description must have at least 24 characters"
        },
        "processor_code" : {
          "type" : "string",
          "description" : "The Processor Code must have at least 4 characters"
        },
        "processor_name" : {
          "type" : "string",
          "description" : "The Processor name must have at least 4 characters"
        },
        "speed" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "description" : "Json Model for new Processor"
    },
    "Person_Password_RecoveryEmail" : {
      "type" : "object",
      "required" : [ "mail" ],
      "properties" : {
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        }
      },
      "description" : "Json Model for sending password recovery email"
    },
    "Board_New" : {
      "type" : "object",
      "required" : [ "hardware_unique_ids", "type_of_board_id" ],
      "properties" : {
        "type_of_board_id" : {
          "type" : "string",
          "description" : "Required valid type_of_post_id"
        },
        "hardware_unique_ids" : {
          "type" : "array",
          "description" : "Must be unique!!!, The hardware_id must have 8 hexadecimal characters!",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for create new Board"
    },
    "B_Program_state_cloud" : {
      "type" : "object",
      "properties" : {
        "instance" : {
          "$ref" : "#/definitions/Homer_Instance"
        },
        "server_name" : {
          "type" : "string"
        }
      }
    },
    "Additional_package" : {
      "type" : "object",
      "required" : [ "identificator", "labels", "package_name", "price" ],
      "properties" : {
        "package_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "identificator" : {
          "type" : "string",
          "readOnly" : true
        },
        "price" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Price"
        },
        "labels" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Tariff_Label"
          }
        }
      }
    },
    "Result_Unauthorized" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "Unauthorized" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 401 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Unauthorized access - please log in",
          "readOnly" : true
        }
      }
    },
    "Processor" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "libraryGroups", "processor_code", "processor_name", "singleLibraries", "speed" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "processor_name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "processor_code" : {
          "type" : "string"
        },
        "speed" : {
          "type" : "integer",
          "format" : "int32"
        },
        "libraryGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "singleLibraries" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "File_Lib" : {
      "type" : "object",
      "properties" : {
        "file_name" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string"
        }
      }
    },
    "C_Program_Version_Edit" : {
      "type" : "object",
      "required" : [ "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for edit basic information of C_program Version"
    },
    "Grid_Terminal_Identf" : {
      "type" : "object",
      "required" : [ "device_name", "device_type" ],
      "properties" : {
        "device_type" : {
          "type" : "string",
          "example" : "Mobile, WebBrowser"
        },
        "device_name" : {
          "type" : "string",
          "example" : "Iphone 5S, Chrome 4"
        }
      },
      "description" : "Json Model for Identificator"
    },
    "LibraryGroup_Filter" : {
      "type" : "object",
      "properties" : {
        "processors_id" : {
          "type" : "array",
          "description" : "List of processor.id",
          "items" : {
            "type" : "string"
          }
        },
        "group_name" : {
          "type" : "string"
        },
        "order" : {
          "type" : "string",
          "description" : "Value of order",
          "enum" : [ "group_name", "id", "date_of_create" ]
        },
        "value" : {
          "type" : "string",
          "description" : "Set type of Order -> ascending / descending, If you used order - its required!!!",
          "enum" : [ "asc OR desc" ]
        }
      },
      "description" : "Json Model for Filtering LibraryGroups"
    },
    "SingleLibrary_Version" : {
      "type" : "object",
      "required" : [ "version_description", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        },
        "version_description" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        }
      },
      "description" : "Json Model for new Version for SingleLibrary"
    },
    "TypeOfBlock" : {
      "type" : "object",
      "required" : [ "blockoBlocks", "delete_permission", "edit_permission", "general_description", "id", "name", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "general_description" : {
          "type" : "string"
        },
        "blockoBlocks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BlockoBlock"
          }
        },
        "project_id" : {
          "type" : "string",
          "description" : "This value will be in Json only if TypeOfBlock is private!",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Project_participant" : {
      "type" : "object",
      "required" : [ "state", "user_email" ],
      "properties" : {
        "full_name" : {
          "type" : "string",
          "description" : "Only if the user is already part of the project"
        },
        "user_email" : {
          "type" : "string",
          "description" : "Its in object always"
        },
        "id" : {
          "type" : "string",
          "description" : "Only if the user is already part of the project (for click operations)"
        },
        "state" : {
          "type" : "string",
          "description" : "Its in object always"
        }
      }
    },
    "TypeOfPost" : {
      "type" : "object",
      "required" : [ "delete_permission", "edit_permission", "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Actualization_procedure" : {
      "type" : "object",
      "required" : [ "b_program_actualization", "date_of_create", "date_of_finish", "state", "state_fraction", "state_percentage", "updates" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "enum" : [ "successful_complete", "complete", "complete_with_error", "canceled", "in_progress" ]
        },
        "updates" : {
          "type" : "array",
          "description" : "Can be empty",
          "items" : {
            "$ref" : "#/definitions/C_Program_Update_Plan"
          }
        },
        "date_of_create" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970"
        },
        "date_of_finish" : {
          "type" : "string",
          "format" : "date-time",
          "example" : "1466163478925",
          "description" : "can be empty, which means that the procedure is not done yet. UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970"
        },
        "b_program_actualization" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Program_Actualization"
        },
        "state_percentage" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "state_fraction" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Notification" : {
      "type" : "object",
      "required" : [ "Its not possible document that throw swagger. Please visit documentation.byzance.cz", "confirmation_required", "created", "id", "level", "was_read" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "level" : {
          "type" : "string",
          "enum" : [ "info", "success", "warning", "error", "question" ]
        },
        "confirmation_required" : {
          "type" : "boolean",
          "default" : false
        },
        "was_read" : {
          "type" : "boolean",
          "default" : false
        },
        "created" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "Its not possible document that throw swagger. Please visit documentation.byzance.cz" : {
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        }
      }
    },
    "Board_Personal_Description" : {
      "type" : "object",
      "required" : [ "personal_description" ],
      "properties" : {
        "personal_description" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for update personal description of Board"
    },
    "C_Program_Update_program" : {
      "type" : "object",
      "required" : [ "c_program_id", "c_program_program_name", "c_program_version_id", "c_program_version_name" ],
      "properties" : {
        "c_program_id" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "c_program_version_id" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "c_program_program_name" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "c_program_version_name" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        }
      }
    },
    "Payment_Details" : {
      "type" : "object",
      "required" : [ "city", "country", "street", "street_number", "zip_code" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "company_account" : {
          "type" : "boolean",
          "default" : false
        },
        "company_name" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_authorized_email" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_authorized_phone" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_invoice_email" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_web" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_registration_no" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "company_vat_number" : {
          "type" : "string",
          "description" : "Only if Product is for business"
        },
        "street" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "street_number" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "city" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "zip_code" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "country" : {
          "type" : "string",
          "description" : "Used for billing and invoices"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Project_New" : {
      "type" : "object",
      "required" : [ "product_id", "project_name" ],
      "properties" : {
        "project_name" : {
          "type" : "string",
          "description" : "The name must have at least 8 characters, must be unique!"
        },
        "project_description" : {
          "type" : "string",
          "description" : "The description must have at least 24 characters"
        },
        "product_id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Id of Product (Tariff) where the project will be registered"
        }
      },
      "description" : "Json Model for new General Project"
    },
    "Blocko_Block_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Blocko_Block_Light"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Blocko Block List"
    },
    "Swagger_Tariff_General_Edit" : {
      "type" : "object",
      "required" : [ "product_individual_name" ],
      "properties" : {
        "product_individual_name" : {
          "type" : "string",
          "description" : "Required: always.The street must have at least 4 characters"
        },
        "currency_type" : {
          "type" : "string"
        }
      }
    },
    "Result ok" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "Ok Status" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 200 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User. Server fills the message only when it is important.",
          "readOnly" : true
        }
      },
      "description" : "Some Json value missing - don't show that to users.. "
    },
    "Connected_Board" : {
      "type" : "object",
      "required" : [ "board_id", "c_program_version_id" ],
      "properties" : {
        "board_id" : {
          "type" : "string"
        },
        "c_program_version_id" : {
          "type" : "string"
        }
      }
    },
    "TypeOfConfirms_New" : {
      "type" : "object",
      "required" : [ "color", "size", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        },
        "color" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "must be positive"
        }
      },
      "description" : "Json Model for new TypeOfConfirms"
    },
    "Notification_Read" : {
      "type" : "object",
      "required" : [ "notification_id" ],
      "properties" : {
        "notification_id" : {
          "type" : "array",
          "description" : "List of notification.id",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for List with ids of read notifications"
    },
    "B_Program_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get b_programs of given project"
        }
      },
      "description" : "Json Model for getting B_Program Filter List"
    },
    "Json_Value_Missing_Result" : {
      "type" : "object",
      "required" : [ "code", "exception", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "Some Json value missing" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "message",
          "readOnly" : true
        },
        "exception" : {
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        }
      },
      "description" : "Some Json value missing - don't show that to users.. SERVER IS LOGGING THIS FRONTEND ISSUE"
    },
    "Notification_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total", "unread_total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Notification"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "unread_total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total unread subjects",
          "readOnly" : true
        }
      },
      "description" : "Individual Notification List"
    },
    "TypeOfBlock_New" : {
      "type" : "object",
      "required" : [ "general_description", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        },
        "general_description" : {
          "type" : "string",
          "description" : "The description must have at least 8 characters"
        },
        "project_id" : {
          "type" : "string",
          "description" : "\n \n if you want make private TypeOfBlock group. You have to have \"project_id\" parameter in Json.",
          "enum" : [ "Value can be null or contains project_id" ]
        }
      },
      "description" : "Json Model for new TypeOfBlock"
    },
    "WebSocket_Token" : {
      "type" : "object",
      "required" : [ "websocket_token" ],
      "properties" : {
        "websocket_token" : {
          "type" : "string",
          "description" : "Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. ",
          "readOnly" : true
        }
      },
      "description" : "Json Model that you will get, if login was successful"
    },
    "LibraryGroup_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/LibraryGroup"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Library Group List"
    },
    "C_Program_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/C_Program_Light"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual C_Program List"
    },
    "TypeOfConfirms" : {
      "type" : "object",
      "required" : [ "color", "delete_permission", "edit_permission", "id", "size", "type" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "color" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Post_New" : {
      "type" : "object",
      "required" : [ "name", "text_of_post", "type_of_post_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name must have at least 8 characters"
        },
        "text_of_post" : {
          "type" : "string",
          "description" : "The text must have at least 24 characters"
        },
        "type_of_post_id" : {
          "type" : "string",
          "description" : "Required valid type_of_post_id"
        },
        "hash_tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for new Post"
    },
    "Entity_Validation_Out" : {
      "type" : "object",
      "required" : [ "valid" ],
      "properties" : {
        "valid" : {
          "type" : "boolean",
          "description" : "Entity (Email, NickName.. etc) is valid if valid = true",
          "readOnly" : true,
          "default" : false
        },
        "message" : {
          "type" : "string",
          "example" : "Email is used",
          "description" : "If valid = false, Json probably contains message for user",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Validation of *-some Entity"
    },
    "Post_Answer" : {
      "type" : "object",
      "required" : [ "text_of_post" ],
      "properties" : {
        "text_of_post" : {
          "type" : "string",
          "description" : "The text of post must have at least 4 characters"
        },
        "hash_tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for new Post"
    },
    "External cloud_blocko_server is offline" : {
      "type" : "object",
      "required" : [ "code", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "Object not Found" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "External servers (compilation, blocko cloud_blocko_server etc.) are offline"
    },
    "BlockoBlockVersion" : {
      "type" : "object",
      "required" : [ "create_permission", "date_of_create", "delete_permission", "design_json", "edit_permission", "id", "logic_json", "read_permission", "version_description", "version_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "design_json" : {
          "type" : "string"
        },
        "logic_json" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "create_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "read_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Homer_Filter" : {
      "type" : "object",
      "properties" : {
        "project_ids" : {
          "type" : "array",
          "description" : "Required valid project_id",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model representing Homer filter"
    },
    "Result" : {
      "type" : "object"
    },
    "Grid_Terminal" : {
      "type" : "object",
      "required" : [ "device_name", "device_type", "m_program_access", "terminal_id", "up_to_date", "ws_permission" ],
      "properties" : {
        "terminal_id" : {
          "type" : "string",
          "example" : "Mobile, WebBrowser",
          "readOnly" : true
        },
        "user_agent" : {
          "type" : "string",
          "readOnly" : true
        },
        "device_type" : {
          "type" : "string",
          "example" : "Mobile, WebBrowser"
        },
        "device_name" : {
          "type" : "string",
          "example" : "Iphone 5S, Chrome 4"
        },
        "ws_permission" : {
          "type" : "boolean",
          "default" : false
        },
        "m_program_access" : {
          "type" : "boolean",
          "default" : false
        },
        "up_to_date" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "C_Program_Light" : {
      "type" : "object",
      "required" : [ "c_program_id", "c_program_name", "c_program_version_id", "c_program_version_name", "type_of_board_id", "type_of_board_name" ],
      "properties" : {
        "c_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "C_Program Light (only few properties)"
    },
    "Financial_Summary" : {
      "type" : "object",
      "required" : [ "products" ],
      "properties" : {
        "products" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Product"
          }
        }
      },
      "description" : "Json Model for details about Tariff - all financial details in one Json"
    },
    "Login_Result" : {
      "type" : "object",
      "properties" : {
        "person" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Person"
        },
        "roles" : {
          "type" : "array",
          "description" : "List of roles, that",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/SecurityRole"
          }
        },
        "permissions" : {
          "type" : "array",
          "description" : "List of all person permission (private and all collections from Person Roles (\"SecurityRole\") ",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model that you will get, if login was successful"
    },
    "Cloud_Homer_Server" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "server_name" : {
          "type" : "string"
        },
        "destination_address" : {
          "type" : "string"
        },
        "is_private" : {
          "type" : "boolean",
          "default" : false
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "server_is_online" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "B_Program" : {
      "type" : "object",
      "required" : [ "dateOfCreate", "lastUpdate" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "program_description" : {
          "type" : "string"
        },
        "lastUpdate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "dateOfCreate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "program_versions" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/B_Program_Version"
          }
        },
        "program_state" : {
          "readOnly" : true,
          "$ref" : "#/definitions/B_Program_State"
        }
      }
    },
    "M_Program" : {
      "type" : "object",
      "required" : [ "date_of_create", "height_lock", "last_update", "m_project_id", "qr_token", "screen_size_type_id", "width_lock" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "program_name" : {
          "type" : "string"
        },
        "program_description" : {
          "type" : "string"
        },
        "height_lock" : {
          "type" : "boolean",
          "default" : false
        },
        "width_lock" : {
          "type" : "boolean",
          "default" : false
        },
        "qr_token" : {
          "type" : "string"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1458315085338",
          "description" : "UNIX time stamp in millis",
          "readOnly" : true
        },
        "last_update" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1458315085338",
          "description" : "UNIX time stamp in millis",
          "readOnly" : true
        },
        "m_code" : {
          "type" : "string",
          "description" : "Visible here only when the object IS specifically required. Inversion value for \"m_code_url\" THIS or THAT!"
        },
        "screen_size_type_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "m_project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "m_code_id" : {
          "type" : "string",
          "description" : "Visible here only when the object is NOT specifically required. Inversion value for \"m_code\" ",
          "readOnly" : true
        },
        "websocket_address" : {
          "type" : "string",
          "description" : "Its here only if its possible to connect to B_Program",
          "readOnly" : true
        },
        "read_qrToken_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Object not found" : {
      "type" : "object",
      "required" : [ "code", "message", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "Object not Found" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 400 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "Called object is missing. You can show that to Person"
    },
    "SingleLibrary_Filter" : {
      "type" : "object",
      "properties" : {
        "processors_id" : {
          "type" : "array",
          "description" : "List of processor.id",
          "items" : {
            "type" : "string"
          }
        },
        "library_name" : {
          "type" : "string"
        },
        "order" : {
          "type" : "string",
          "description" : "Value of order",
          "enum" : [ "group_name", "id" ]
        },
        "value" : {
          "type" : "string",
          "description" : "Set type of Order -> ascending / descending, If you used order - its required!!!",
          "enum" : [ "asc OR desc" ]
        }
      },
      "description" : "Json Model for getting Single Library by Filter"
    },
    "Main_Board" : {
      "type" : "object",
      "required" : [ "board_id", "c_program_version_id" ],
      "properties" : {
        "board_id" : {
          "type" : "string",
          "description" : "TypeofBoard of this Board must be connectible_to_internet = true "
        },
        "c_program_version_id" : {
          "type" : "string"
        }
      }
    },
    "B_Program_Version_New" : {
      "type" : "object",
      "required" : [ "program", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "program" : {
          "type" : "string"
        },
        "main_board" : {
          "description" : "This board must be connectible_to_internet = true! User can create new version without Main Board, but its not possible to upload that to cloud like new Instance",
          "$ref" : "#/definitions/Main_Board"
        },
        "boards" : {
          "type" : "array",
          "description" : "Connected boards (padavans)",
          "items" : {
            "$ref" : "#/definitions/Connected_Board"
          }
        }
      },
      "description" : "Json Model for new Version of B_Program"
    },
    "LinkedPost" : {
      "type" : "object",
      "required" : [ "answer", "delete_permission", "linkId" ],
      "properties" : {
        "linkId" : {
          "type" : "string"
        },
        "answer" : {
          "$ref" : "#/definitions/Post"
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "User_Files" : {
      "type" : "object",
      "properties" : {
        "file_name" : {
          "type" : "string"
        },
        "code" : {
          "type" : "string"
        }
      }
    },
    "Tariff" : {
      "type" : "object",
      "required" : [ "packages", "tariffs" ],
      "properties" : {
        "tariffs" : {
          "type" : "array",
          "description" : "List of Individual Tariffs",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Individuals_Tariff"
          }
        },
        "packages" : {
          "type" : "array",
          "description" : "List of Additional Packages - More Slots for IoT, Projects etc..",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Additional_package"
          }
        }
      },
      "description" : "Json Model for specific Tariff and price plan"
    },
    "FileRecord" : {
      "type" : "object",
      "required" : [ "file_name", "id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "file_name" : {
          "type" : "string"
        }
      }
    },
    "Version_Object" : {
      "type" : "object",
      "required" : [ "date_of_create", "id", "version_description", "version_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        }
      }
    },
    "SingleLibrary_New" : {
      "type" : "object",
      "required" : [ "library_name" ],
      "properties" : {
        "library_name" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        },
        "description" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        }
      },
      "description" : "Json Model for new Single Library"
    },
    "SecurityRole_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "description" : "Not required, But strongly recommended"
        }
      },
      "description" : "Json Model for new SecurityRole (Group)"
    },
    "List of Boards" : {
      "type" : "object",
      "required" : [ "board_id" ],
      "properties" : {
        "board_id" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model with List of Board ID"
    },
    "Compilation_Ok" : {
      "type" : "object",
      "required" : [ "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "Value is success",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Compilation Result"
    },
    "Producer" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "name", "type_of_boards_id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "type_of_boards_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Price" : {
      "type" : "object",
      "required" : [ "CZK", "EUR" ],
      "properties" : {
        "CZK" : {
          "type" : "number",
          "format" : "double",
          "description" : "in Double - show CZK",
          "readOnly" : true
        },
        "EUR" : {
          "type" : "number",
          "format" : "double",
          "description" : "in Double - show â‚¬",
          "readOnly" : true
        }
      }
    },
    "BlockoBlock_BlockoVersion_New" : {
      "type" : "object",
      "required" : [ "design_json", "logic_json", "version_description", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string"
        },
        "version_description" : {
          "type" : "string"
        },
        "design_json" : {
          "type" : "string"
        },
        "logic_json" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for crating new version and also content of BlockoBlock Model"
    },
    "PermissionRequired" : {
      "type" : "object",
      "required" : [ "code", "state" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "state",
          "readOnly" : true,
          "enum" : [ "Permission required" ]
        },
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "code",
          "readOnly" : true,
          "enum" : [ 403 ]
        },
        "message" : {
          "type" : "string",
          "description" : "Can be null! If not, you can show that to User",
          "readOnly" : true
        }
      },
      "description" : "Some Json value missing - don't show that to users.. SERVER IS LOGGING THIS FRONTEND ISSUE"
    },
    "C_Program_Version_New" : {
      "type" : "object",
      "required" : [ "main", "version_name" ],
      "properties" : {
        "version_name" : {
          "type" : "string",
          "description" : "The name must have at least 8 characters"
        },
        "version_description" : {
          "type" : "string"
        },
        "main" : {
          "type" : "string"
        },
        "user_files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/User_Files"
          }
        },
        "external_libraries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/External_Libraries"
          }
        }
      },
      "description" : "Json Model for new Version of C_Program"
    },
    "Tariff_Label" : {
      "type" : "object",
      "required" : [ "description", "label" ],
      "properties" : {
        "label" : {
          "type" : "string",
          "description" : "Basic Text value - for each line",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "If not null or empty description=\"\" value - Show this text under the mouse pointer",
          "readOnly" : true
        }
      },
      "description" : "Json Model for details about Tariff"
    },
    "C_Program_Version_Update" : {
      "type" : "object",
      "required" : [ "main" ],
      "properties" : {
        "type_of_board_id" : {
          "type" : "string",
          "description" : "Required only if user compile code not under C++ code version (where compilation can found type_of_board)"
        },
        "main" : {
          "type" : "string"
        },
        "user_files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/User_Files"
          }
        },
        "external_libraries" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/External_Libraries"
          }
        }
      },
      "description" : "Json Model for new Version of C_Program"
    },
    "Blocko_Block_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get Blocks of given project"
        }
      },
      "description" : "Json Model for getting Blocko_Block Filter List"
    },
    "External_Libraries" : {
      "type" : "object",
      "properties" : {
        "library_name" : {
          "type" : "string"
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/File_Lib"
          }
        }
      }
    },
    "Blocko_Block_Light" : {
      "type" : "object",
      "required" : [ "blocko_block_description", "blocko_block_id", "blocko_block_name", "blocko_block_type_of_block_description", "blocko_block_type_of_block_id", "blocko_block_type_of_block_name", "blocko_block_version_description", "blocko_block_version_id", "blocko_block_version_name" ],
      "properties" : {
        "blocko_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_version_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_type_of_block_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_type_of_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "blocko_block_type_of_block_description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Blocko_Block Light (only few properties)"
    },
    "B_Program_State" : {
      "type" : "object",
      "required" : [ "m_project_id", "online", "online_boards", "uploaded" ],
      "properties" : {
        "uploaded" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "m_project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "where" : {
          "type" : "string",
          "readOnly" : true
        },
        "cloud" : {
          "readOnly" : true,
          "$ref" : "#/definitions/B_Program_state_cloud"
        },
        "local" : {
          "readOnly" : true,
          "$ref" : "#/definitions/B_Program_state_local"
        },
        "online" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "online_boards" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Board"
          }
        }
      },
      "description" : "Json Model for B_Program state"
    },
    "Type_Of_Block_Light" : {
      "type" : "object",
      "required" : [ "type_of_block_description", "type_of_block_id", "type_of_block_name" ],
      "properties" : {
        "type_of_block_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_block_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_block_description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Type_Of_Block Light (only few properties)"
    },
    "Applicable_Product" : {
      "type" : "object",
      "required" : [ "product_id", "product_individual_name", "product_type" ],
      "properties" : {
        "product_id" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "product_individual_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "product_type" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model for selecting Product for registration new project"
    },
    "TypeOfPost_New" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "MinLength >= 3"
        }
      },
      "description" : "Json Model for create new TypeOfPost"
    },
    "Cloud_Compilation_Server" : {
      "type" : "object",
      "required" : [ "delete_permission", "destination_address", "edit_permission", "id", "server_is_online", "server_name" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "server_name" : {
          "type" : "string"
        },
        "destination_address" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "server_is_online" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "BlockoBlock_New" : {
      "type" : "object",
      "required" : [ "general_description", "name", "type_of_block_id" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name must have at least 8 characters"
        },
        "general_description" : {
          "type" : "string",
          "description" : "The name must have at least 24 characters"
        },
        "type_of_block_id" : {
          "type" : "string",
          "description" : "Required valid type_of_block_id"
        }
      },
      "description" : "Json Model for crating new BlockoBlock Model"
    },
    "C_Program_New" : {
      "type" : "object",
      "required" : [ "program_name", "type_of_board_id" ],
      "properties" : {
        "program_name" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        },
        "program_description" : {
          "type" : "string"
        },
        "type_of_board_id" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for new C_Program"
    },
    "C_Program_Update_Plan" : {
      "type" : "object",
      "required" : [ "board_detail", "id", "server_detail", "state" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "description" : "Description on Model C_ProgramUpdater_State",
          "enum" : [ "complete", "canceled", "in_progress", "overwritten", "waiting_for_device", "instance_inaccessible", "homer_server_is_offline", "critical_error" ]
        },
        "c_program_detail" : {
          "description" : "Is visible only if user send compilation under C_program in system  ( OR state for binary_file)",
          "readOnly" : true,
          "$ref" : "#/definitions/C_Program_Update_program"
        },
        "server_detail" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Server_detail"
        },
        "board_detail" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Board_detail"
        },
        "binary_file_detail" : {
          "description" : "Is visible only if user send own binary file ( OR state for c_program_detail)",
          "readOnly" : true,
          "$ref" : "#/definitions/FileRecord"
        }
      }
    },
    "M_Program_New" : {
      "type" : "object",
      "required" : [ "height_lock", "m_code", "program_name", "screen_type_id", "width_lock" ],
      "properties" : {
        "screen_type_id" : {
          "type" : "string",
          "description" : "Required valid screen_type_id"
        },
        "program_description" : {
          "type" : "string",
          "description" : "Can be null"
        },
        "program_name" : {
          "type" : "string",
          "description" : "The description must have at least 8 characters"
        },
        "m_code" : {
          "type" : "string",
          "description" : "Code in converted to String"
        },
        "height_lock" : {
          "type" : "boolean",
          "description" : "If true - its possible turn on that on height",
          "default" : false
        },
        "width_lock" : {
          "type" : "boolean",
          "description" : "If true - its possible turn on that on width",
          "default" : false
        }
      },
      "description" : "Json Model for new M_Program"
    },
    "SingleLibrary" : {
      "type" : "object",
      "required" : [ "delete_permission", "description", "edit_permission", "id", "library_name", "update_permission", "versions_id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "library_name" : {
          "type" : "string"
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "versions_id" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Private_Homer_Server" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "mac_address" : {
          "type" : "string"
        },
        "type_of_device" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "online" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Server_detail" : {
      "type" : "object",
      "required" : [ "instnace_id", "is_private", "server_id", "server_name" ],
      "properties" : {
        "server_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "is_private" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "server_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "instnace_id" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        }
      }
    },
    "Person_Update" : {
      "type" : "object",
      "required" : [ "full_name", "nick_name" ],
      "properties" : {
        "nick_name" : {
          "type" : "string",
          "description" : "min length = 4"
        },
        "full_name" : {
          "type" : "string",
          "description" : "min length = 4"
        }
      },
      "description" : "Json Model for update Person. (For password or email, you have to used separate API)"
    },
    "Compilation_Build_Error" : {
      "type" : "object",
      "required" : [ "adjustedColumn", "code", "codeWhitespace", "column", "endIndex", "filename", "line", "startIndex", "state", "text", "type" ],
      "properties" : {
        "state" : {
          "type" : "string",
          "description" : "Value is build_error",
          "readOnly" : true
        },
        "filename" : {
          "type" : "string",
          "readOnly" : true
        },
        "line" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "column" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "readOnly" : true
        },
        "text" : {
          "type" : "string",
          "readOnly" : true
        },
        "codeWhitespace" : {
          "type" : "string",
          "readOnly" : true
        },
        "code" : {
          "type" : "string",
          "readOnly" : true
        },
        "adjustedColumn" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "startIndex" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "endIndex" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      },
      "description" : "Json Model for Compilation Result"
    },
    "B_Pair" : {
      "type" : "object",
      "properties" : {
        "board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "c_program_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "virtual_input_output" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "WebSocketString" : {
      "type" : "object",
      "properties" : {
        "actor" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Homer_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Private_Homer_Server"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Homer List"
    },
    "Post_Comment" : {
      "type" : "object",
      "required" : [ "text_of_post" ],
      "properties" : {
        "text_of_post" : {
          "type" : "string",
          "description" : "The text of post must have at least 4 characters"
        },
        "hash_tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Json Model for new Comment"
    },
    "Board_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Board"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual Board List"
    },
    "Tariff_Register" : {
      "type" : "object",
      "required" : [ "city", "country", "payment_method", "payment_mode", "product_individual_name", "street", "street_number", "zip_code" ],
      "properties" : {
        "tariff_type" : {
          "type" : "string"
        },
        "product_individual_name" : {
          "type" : "string",
          "description" : "Required: always.The street must have at least 4 characters"
        },
        "currency_type" : {
          "type" : "string"
        },
        "payment_mode" : {
          "type" : "string",
          "description" : "Required: only in if required_payment_mode is true"
        },
        "payment_method" : {
          "type" : "string",
          "description" : "Required: only in if required_payment_mode is true"
        },
        "street" : {
          "type" : "string",
          "description" : "Required: alwaysThe street must have at least 4 characters"
        },
        "street_number" : {
          "type" : "string",
          "description" : "Required: alwaysBut The street_number can be empty"
        },
        "city" : {
          "type" : "string",
          "description" : "Required: alwaysThe city must have at least 4 characters"
        },
        "zip_code" : {
          "type" : "string",
          "description" : "Required: alwaysThe zip_code must have at least 5 digits"
        },
        "country" : {
          "type" : "string",
          "description" : "Required: alwaysThe country must have at least 4 characters"
        },
        "registration_no" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_registration_no must have at least 4 characters"
        },
        "vat_number" : {
          "type" : "string",
          "description" : "Required: only if account is business & from EU!!! CZ28496639 The VAT_number must have at least 4 characters"
        },
        "company_name" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_name must have at least 4 characters"
        },
        "company_authorized_email" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_authorized_email must have at least 4 characters"
        },
        "company_authorized_phone" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_authorized_phone must have at least 4 characters"
        },
        "company_web" : {
          "type" : "string",
          "description" : "Required: only if account is businessThe company_web must have at least 4 characters"
        },
        "company_invoice_email" : {
          "type" : "string",
          "description" : "Required: only if account is businessEmail must be valid"
        }
      },
      "description" : "Json Model if user want create new Tariff for projects"
    },
    "C_Program_Filter" : {
      "type" : "object",
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get C_Programs of given project"
        }
      },
      "description" : "Json Model for getting C_Program Filter List"
    },
    "Post" : {
      "type" : "object",
      "required" : [ "answer_permission", "author", "comment_permission", "date_of_create", "delete_permission", "edit_confirms_permission", "edit_permission", "hashTags", "id", "likes", "text_of_post", "updated" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "description" : "Only if Post is Main (not answers or comments)"
        },
        "likes" : {
          "type" : "integer",
          "format" : "int32"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "1466163478925",
          "description" : "UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970",
          "readOnly" : true
        },
        "updated" : {
          "type" : "boolean",
          "default" : false
        },
        "views" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Only if Post is Main"
        },
        "text_of_post" : {
          "type" : "string"
        },
        "type" : {
          "description" : "Only if Post is Main",
          "$ref" : "#/definitions/TypeOfPost"
        },
        "author" : {
          "$ref" : "#/definitions/Person"
        },
        "answers" : {
          "type" : "array",
          "description" : "Only if Post is Main",
          "items" : {
            "$ref" : "#/definitions/Post"
          }
        },
        "comments" : {
          "type" : "array",
          "description" : "Only if Post is Main or Answare",
          "items" : {
            "$ref" : "#/definitions/Post"
          }
        },
        "hashTags" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "type_of_confirms" : {
          "type" : "array",
          "description" : "Only if Post is Main",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/TypeOfConfirms"
          }
        },
        "linked_answers" : {
          "type" : "array",
          "description" : "Only if Post is Main",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/LinkedPost"
          }
        },
        "answer_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "comment_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "edit_confirms_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Individuals_Tariff" : {
      "type" : "object",
      "required" : [ "company_details_required", "identificator", "labels", "price", "required_payment_mode", "tariff_name" ],
      "properties" : {
        "tariff_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "identificator" : {
          "type" : "string",
          "description" : "return this value for registration new Product Tariff",
          "readOnly" : true
        },
        "company_details_required" : {
          "type" : "boolean",
          "description" : "This value indicates that for creating new Product Tariff, you have to send all value with \"company_\"  ",
          "readOnly" : true,
          "default" : false
        },
        "required_payment_mode" : {
          "type" : "boolean",
          "description" : "This value indicates that for creating new Product Tariff  User have to pay throw the Credit-Card Gateway or send money via Bank Account",
          "readOnly" : true,
          "default" : false
        },
        "price" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Price"
        },
        "labels" : {
          "type" : "array",
          "description" : "Show each record in Product Tariff Object",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Tariff_Label"
          }
        }
      }
    },
    "M_Project" : {
      "type" : "object",
      "required" : [ "auto_incrementing", "b_progam_connected_version_id", "b_program_id", "date_of_create", "delete_permission", "edit_permission", "id", "m_programs", "program_name", "project_id", "update_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "program_name" : {
          "type" : "string"
        },
        "program_description" : {
          "type" : "string",
          "description" : "can be empty"
        },
        "date_of_create" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "14618543121234",
          "description" : "UNIX time stamp in millis",
          "readOnly" : true
        },
        "auto_incrementing" : {
          "type" : "boolean",
          "default" : false
        },
        "m_programs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/M_Program"
          }
        },
        "project_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_id" : {
          "type" : "string",
          "description" : "can be empty",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "update_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "b_progam_connected_version_id" : {
          "type" : "string",
          "description" : "can be empty",
          "readOnly" : true
        }
      }
    },
    "Type_Of_Block_Filter" : {
      "type" : "object",
      "required" : [ "private_type" ],
      "properties" : {
        "project_id" : {
          "type" : "string",
          "description" : "Include only if you want to get Type_Of_Blocks of given project"
        },
        "private_type" : {
          "type" : "boolean",
          "description" : "Use 'true' for private Type_Of_Block or 'false' for non-private",
          "default" : false
        }
      },
      "description" : "Json Model for getting Type_Of_Block Filter List"
    },
    "B_Program_Light" : {
      "type" : "object",
      "required" : [ "b_program_description", "b_program_id", "b_program_name", "b_program_version_description", "b_program_version_id", "b_program_version_name" ],
      "properties" : {
        "b_program_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_description" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_version_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_version_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "b_program_version_description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "B_Program Light (only few properties)"
    },
    "Entity_Validation_In" : {
      "type" : "object",
      "required" : [ "key", "value" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "This field is required"
        },
        "value" : {
          "type" : "string",
          "description" : "This field is required"
        }
      },
      "description" : "Json Model for Validation of *-some Entity"
    },
    "TypeOfBoard" : {
      "type" : "object",
      "required" : [ "connectible_to_internet", "delete_permission", "description", "edit_permission", "id", "name", "register_new_device_permission" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "connectible_to_internet" : {
          "type" : "boolean",
          "default" : false
        },
        "processor_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "producer_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "processor_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "producer_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "register_new_device_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "Screen_Size_Type" : {
      "type" : "object",
      "required" : [ "delete_permission", "edit_permission", "height_lock", "id", "landscape_height", "landscape_max_screens", "landscape_min_screens", "landscape_square_height", "landscape_square_width", "landscape_width", "name", "portrait_height", "portrait_max_screens", "portrait_min_screens", "portrait_square_height", "portrait_square_width", "portrait_width", "touch_screen", "width_lock" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "portrait_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_square_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_square_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_min_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "portrait_max_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_square_height" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_square_width" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_min_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "landscape_max_screens" : {
          "type" : "integer",
          "format" : "int32"
        },
        "height_lock" : {
          "type" : "boolean",
          "default" : false
        },
        "width_lock" : {
          "type" : "boolean",
          "default" : false
        },
        "touch_screen" : {
          "type" : "boolean",
          "default" : false
        },
        "edit_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        },
        "delete_permission" : {
          "type" : "boolean",
          "readOnly" : true,
          "default" : false
        }
      }
    },
    "B_Program_state_local" : {
      "type" : "object",
      "properties" : {
        "instance" : {
          "$ref" : "#/definitions/Homer_Instance"
        },
        "server" : {
          "$ref" : "#/definitions/Private_Homer_Server"
        }
      }
    },
    "M_Project_New" : {
      "type" : "object",
      "required" : [ "program_name" ],
      "properties" : {
        "program_description" : {
          "type" : "string"
        },
        "program_name" : {
          "type" : "string",
          "description" : "MinLength >= 4"
        }
      },
      "description" : "Json Model for update M_Project"
    },
    "B_Program_Version" : {
      "type" : "object",
      "required" : [ "connected_boards", "master_board", "program", "version_Object" ],
      "properties" : {
        "version_Object" : {
          "readOnly" : true,
          "$ref" : "#/definitions/Version_Object"
        },
        "connected_boards" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/B_Pair"
          }
        },
        "master_board" : {
          "readOnly" : true,
          "$ref" : "#/definitions/B_Pair"
        },
        "program" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model of Version of B_Program"
    },
    "B_Program_New" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "program_description" : {
          "type" : "string",
          "description" : "program_description can be null"
        },
        "name" : {
          "type" : "string",
          "description" : "MinLength >= 8"
        }
      },
      "description" : "Json Model for new B_Program"
    },
    "Board_detail" : {
      "type" : "object",
      "required" : [ "board_id", "personal_description", "type_of_board_id", "type_of_board_name" ],
      "properties" : {
        "board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "personal_description" : {
          "type" : "string",
          "description" : "Can be empty",
          "readOnly" : true
        },
        "type_of_board_id" : {
          "type" : "string",
          "readOnly" : true
        },
        "type_of_board_name" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "GoPay_Url" : {
      "type" : "object",
      "required" : [ "gw_url" ],
      "properties" : {
        "gw_url" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Json Model with url for GoPay Terminal"
    },
    "Person_New" : {
      "type" : "object",
      "required" : [ "mail", "nick_name", "password" ],
      "properties" : {
        "nick_name" : {
          "type" : "string",
          "description" : "The nick_name must have at least 8 characters"
        },
        "mail" : {
          "type" : "string",
          "description" : "Required valid mail "
        },
        "password" : {
          "type" : "string",
          "description" : "The password must have at least 8 characters"
        }
      },
      "description" : "Json Model for creating new Person"
    },
    "B_Program_List" : {
      "type" : "object",
      "required" : [ "content", "from", "pages", "to", "total" ],
      "properties" : {
        "content" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/B_Program_Light"
          }
        },
        "from" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "First value position from all subjects. Minimum is 0.",
          "readOnly" : true
        },
        "to" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Minimum is \"from\" Maximum is \"total\"",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total subjects",
          "readOnly" : true
        },
        "pages" : {
          "type" : "array",
          "description" : "Numbers of pages, which you can call",
          "readOnly" : true,
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "description" : "Individual B_Program List"
    },
    "Compilation_Server" : {
      "type" : "object",
      "required" : [ "server_name" ],
      "properties" : {
        "server_name" : {
          "type" : "string",
          "description" : "Unique name For Compiler cloud_blocko_server, The name must have at least 6 characters"
        }
      },
      "description" : "Json Model for new Compilation Server"
    },
    "Board_status" : {
      "type" : "object",
      "required" : [ "actual_c_program_id", "actual_c_program_version_id", "b_program_id", "b_program_version_id", "where" ],
      "properties" : {
        "where" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "b_program_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "b_program_version_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_program" : {
          "type" : "string",
          "description" : "It in Object only if user upload own binary firmware to hardware and cloud_blocko_server used file name for naming of this valueIf user used classic build with Byzance - its not visible in Json!",
          "readOnly" : true
        },
        "actual_c_program_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "actual_c_program_version_id" : {
          "type" : "string",
          "description" : "Can be with null value",
          "readOnly" : true
        },
        "required_c_program_id" : {
          "type" : "string"
        },
        "required_c_program_version_id" : {
          "type" : "string"
        }
      },
      "description" : "Json Model for Status and all information about embedded Hardware"
    }
  }
}