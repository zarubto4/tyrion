# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page - for testing connected device
# Home page

GET             /                                           @controllers.SecurityController.index
GET             /test                                       @controllers.WikyController.test
GET             /test2                                      @controllers.WikyController.test2(fields)


#  WEB SOCET  //////////////////////////////////////////////////////////////////////////////
GET              /websocket/:id                              @controllers.WebSocketController.connection(id: String)
POST             /websocket/webSocketStats                   @controllers.WebSocketController.getWebSocketStats()
POST             /websocket/sendTo/:id                       @controllers.WebSocketController.sendTo(id: String)
#API - CoreClient ##############################################################################################################################################################

#Login page
POST            /coreClient/person/permission/login         @controllers.SecurityController.login()
POST            /coreClient/person/permission/logout        @controllers.SecurityController.logout

GET             /login/facebook                             @controllers.SecurityController.Facebook()
GET             /login/twitter                              @controllers.SecurityController.Twitter()
GET             /login/github                               @controllers.SecurityController.GitHub()
GET             /login/vkontakte                            @controllers.SecurityController.Vkontakte()

GET             /login/person                               @controllers.SecurityController.getPersonByToken()

GET             /oauth_callback                             @controllers.SecurityController.GET_facebook_oauth(code, state)
GET             /login/facebook/oauth_callback              @controllers.SecurityController.GET_facebook_oauth(code, state)
#GET             /login/twitter/oauth_callback              @controllers.SecurityController.GET_twitter_oauth(code, state)
GET             /login/github/oauth_callback                @controllers.SecurityController.GET_github_oauth(code, state)
#GET             /login/vkontakte/oauth_callback             @controllers.SecurityController.GET_vkontakte_oauth(code, state)
### PERSON ############ PERSON ############### PERSON ################ PERSON ################# PERSON ############ PERSON #####################################################
################################################################################################################################################################################

#Peron CRUD
POST           /coreClient/person/developer                @controllers.PersonCreateController.developerRegistration()
POST           /coreClient/person/person                   @controllers.PersonCreateController.standartRegistration()
PUT            /coreClient/person/person                   @controllers.PersonCreateController.updatePersonInformation()
GET            /coreClient/person/person/:id               @controllers.PersonCreateController.getPerson(id: String)

DELETE         /coreClient/person/person/:id               @controllers.PersonCreateController.deletePerson(id: String)

GET            /emailPersonAuthentication/                 @controllers.PersonCreateController.emailPersonAuthentitaction(mail,authToken)




### PERMISSION ############ PERMISSION ############### PERMISSION ################ PERMISSION ################# PERMISSION #####################################################
################################################################################################################################################################################
GET            /permission/permisionKeys                   @controllers.PermissionController.getAllPermissions()
GET            /permission/permisionGroups                 @controllers.PermissionController.getAllGroups()
POST           /permission/group                           @controllers.PermissionController.createGroup()

GET            /permission/personPermission                @controllers.PermissionController.getAllPersonPermission()
DELETE         /permission/personPermission                @controllers.PermissionController.removeAllPersonPermission()
PUT            /permission/personPermission                @controllers.PermissionController.addAllPersonPermission()

### OVERFLOW ############ OVERFLOW ############### OVERFLOW ################ OVERFLOW ################# OVERFLOW ###############################################################
################################################################################################################################################################################

POST           /overflow/post                              @controllers.OverFlowController.newPost()
GET            /overflow/post/:id                          @controllers.OverFlowController.getPost(id: String)
DELETE         /overflow/post/:id                          @controllers.OverFlowController.deletePost(id: String)
PUT            /overflow/post                              @controllers.OverFlowController.editPost()
GET            /overflow/postAll                           @controllers.OverFlowController.getLatestPost()
POST           /overflow/postFilter                        @controllers.OverFlowController.getPostByFilter()
GET            /overflow/linkedAnswers/:id                 @controllers.OverFlowController.getPostLinkedAnswers(id: String)

GET           /overflow/post/hashTags/:id                  @controllers.OverFlowController.hashTagsListOnPost(id: String)
GET           /overflow/post/comments/:id                  @controllers.OverFlowController.commentsListOnPost(id: String)
GET           /overflow/post/answers/:id                   @controllers.OverFlowController.answereListOnPost(id: String)
GET           /overflow/post/textOfPost/:id                @controllers.OverFlowController.textOfPost(id: String)

POST           /overflow/typeOfPost                        @controllers.OverFlowController.newTypeOfPost()
GET            /overflow/typeOfPost                        @controllers.OverFlowController.getTypeOfPost()

POST           /overflow/typeOfConfirm                     @controllers.OverFlowController.newTypeOfConfirms()
GET            /overflow/typeOfConfirm                     @controllers.OverFlowController.getTypeOfConfirms()
PUT            /overflow/typeOfConfirm/:conf/:pst          @controllers.OverFlowController.putTypeOfConfirmToPost(conf: String, pst: String)

POST           /overflow/comment                           @controllers.OverFlowController.addComment()
PUT            /overflow/comment/:id                       @controllers.OverFlowController.updateComment(id: String)
DELETE         /overflow/comment/:id                       @controllers.OverFlowController.deletePost(id: String)

POST           /overflow/answer                            @controllers.OverFlowController.addAnswer()
PUT            /overflow/answer/:id                        @controllers.OverFlowController.updateComment(id: String)
DELETE         /overflow/answer/:id                        @controllers.OverFlowController.deletePost(id: String)

PUT            /overflow/likePlus/:id                      @controllers.OverFlowController.likePlus(id: String)
PUT            /overflow/likeMinus/:id                     @controllers.OverFlowController.likeMinus(id: String)
POST           /overflow/link                              @controllers.OverFlowController.linkWithPreviousAnswer()
DELETE         /overflow/link/:id                          @controllers.OverFlowController.unlinkWithPreviousAnswer(id: String)
PUT            /overflow/removeLink                        @controllers.OverFlowController.removeHashTag()
POST           /overflow/hashTag                           @controllers.OverFlowController.addHashTag()
PUT            /overflow/removeHashTag                     @controllers.OverFlowController.removeHashTag()





### PROJECT ############ PROJECT ############### PROJECT ################ PROJECT ################# PROJECT ####################################################################
################################################################################################################################################################################
#Project
POST           /project/project                            @controllers.ProgramingPackageController.postNewProject()
PUT            /project/project/:id                        @controllers.ProgramingPackageController.updateProject(id: String)
GET            /project/project/:id                        @controllers.ProgramingPackageController.getProject(id: String)
GET            /project/project                            @controllers.ProgramingPackageController.getProjectsByUserAccount()
DELETE         /project/project/:id                        @controllers.ProgramingPackageController.deleteProject(id: String)
PUT            /project/project/shareProject/:id           @controllers.ProgramingPackageController.shareProjectWithUsers(id: String)
PUT            /project/project/unshareProject/:id         @controllers.ProgramingPackageController.unshareProjectWithUsers(id: String)
GET            /project/project/programs/:id               @controllers.ProgramingPackageController.getProgramPrograms(id: String)
GET            /project/project/homerList/:id              @controllers.ProgramingPackageController.getProgramhomerList(id: String)
GET            /project/project/owners/:id                 @controllers.ProgramingPackageController.getProjectOwners(id: String)

#Homer
POST           /project/homer                              @controllers.ProgramingPackageController.newHomer()
DELETE         /project/homer/:id                          @controllers.ProgramingPackageController.removeHomer(id: String)
GET            /project/homer/:id                          @controllers.ProgramingPackageController.getHomer(id: String)
GET            /project/homer                              @controllers.ProgramingPackageController.getAllHomers()
GET            /project/homer/getAllConnectedHomers/:id    @controllers.ProgramingPackageController.getConnectedHomers(id: String)



#Project - connection
PUT            /project/connectHomerWithProject            @controllers.ProgramingPackageController.connectHomerWithProject()
PUT            /project/unconnectHomerWithProject          @controllers.ProgramingPackageController.unConnectHomerWithProject()

#Program
POST           /project/program                            @controllers.ProgramingPackageController.postNewProgram()
GET            /project/program/:id                        @controllers.ProgramingPackageController.getProgram(id: String)
PUT            /project/program/:id                        @controllers.ProgramingPackageController.editProgram(id: String)
DELETE         /project/program/:id                        @controllers.ProgramingPackageController.removeProgram(id: String)
GET            /project/programInJson/:id                  @controllers.ProgramingPackageController.getProgramInJson(id: String)


GET            /project/getallprograms/:id                 @controllers.ProgramingPackageController.getAllPrograms(id: String)
GET            /project/listOfUploadedHomers/:id           @controllers.ProgramingPackageController.listOfUploadedHomers(id: String)
GET            /project/listOfHomersWaitingForUpload/:id   @controllers.ProgramingPackageController.listOfHomersWaitingForUpload(id: String)
GET            /project/getProgramInJson/:id               @controllers.ProgramingPackageController.getProgramInJson(id: String)
GET            /project/boards/:id                         @controllers.ProgramingPackageController.getProjectsBoard(id: String)
PUT            /project/uploudtohomerImmediately           @controllers.ProgramingPackageController.uploadProgramToHomer_Immediately()
PUT            /project/uploudtohomerAsSoonAsPossible      @controllers.ProgramingPackageController.uploadProgramToHomer_AsSoonAsPossible()
PUT            /project/uploudtohomerGivenTime             @controllers.ProgramingPackageController.uploadProgramToHomer_GivenTimeAsSoonAsPossible()

#Blocks
POST           /project/blockoBlock                         @controllers.ProgramingPackageController.newBlock()
PUT            /project/blockoBlock/:id                     @controllers.ProgramingPackageController.newVersionOfBlock(id: String)
GET            /project/blockoBlock/logicJson/:id/:version  @controllers.ProgramingPackageController.logicJsonVersion(id: String, version: Double)
GET            /project/blockoBlock/designJson/:id/:version @controllers.ProgramingPackageController.designJsonVersion(id: String, version: Double)
GET            /project/blockoBlock/logicJson/:id           @controllers.ProgramingPackageController.logicJsonLast(id: String)
GET            /project/blockoBlock/designJson/:id          @controllers.ProgramingPackageController.designJsonLast(id: String)
GET            /project/blockoBlock/generalDescription/:id  @controllers.ProgramingPackageController.generalDescription(id: String)
GET            /project/blockoBlock/versionDescription/:id  @controllers.ProgramingPackageController.versionDescription(id: String)
GET            /project/blockoBlock/:id/:version            @controllers.ProgramingPackageController.getBlockVersion(id: String, version: Double)
GET            /project/blockoBlock/:id                     @controllers.ProgramingPackageController.getBlockLast(id: String)

GET            /project/blockoBlock/allPrevVersions/:id    @controllers.ProgramingPackageController.allPrevVersions(id: String)
DELETE         /project/blockoBlock/*url                   @controllers.ProgramingPackageController.deleteBlock(url: String)
POST           /project/blockoBlock/filter                 @controllers.ProgramingPackageController.getByFilter()




### COMPILATION & LIBRARIES ############ COMPILATION & LIBRARIES ############### COMPILATION & LIBRARIES ################ COMPILATION & LIBRARIES ##############################
################################################################################################################################################################################

#C:Program
POST            /compilation/program                        @controllers.CompilationLibrariesController.newCProgram()
GET             /compilation/program/:id                    @controllers.CompilationLibrariesController.getCProgram(id: String)
GET             /compilation/program/project/:id            @controllers.CompilationLibrariesController.gellAllProgramFromProject(id: String)

PUT             /compilation/program/update/:id             @controllers.CompilationLibrariesController.updateCProgramDescription(id: String)
PUT             /compilation/program/newVersion/:id         @controllers.CompilationLibrariesController.newVersionOfCProgram(id: String)

DELETE          /compilation/program/:id                    @controllers.CompilationLibrariesController.deleteCProgram(id: String)
DELETE          /compilation/program/:id/:version           @controllers.CompilationLibrariesController.deleteVersionOfCProgram(id: String, version: String)

GET             /compilation/project/eclipse                @controllers.CompilationLibrariesController.generateProjectForEclipse()
POST            /compilation/project/uploud/:id/:board      @controllers.CompilationLibrariesController.uploudCompilationToBoard(id: String, board: String)
POST            /compilation/project/binary/:id             @controllers.CompilationLibrariesController.uploudBinaryFileToBoard(id: String)

#Processor
POST            /compilation/processor                      @controllers.CompilationLibrariesController.newProcessor()
GET             /compilation/processor/:id                  @controllers.CompilationLibrariesController.getProcessor(id: String)
GET             /compilation/processor                      @controllers.CompilationLibrariesController.getProcessorAll()
PUT             /compilation/processor/:id                  @controllers.CompilationLibrariesController.updateProcessor(id: String)
DELETE          /compilation/processor/:id                  @controllers.CompilationLibrariesController.deleteProcessor(id: String)

PUT             /compilation/processor/lbr/:id/:lbrId       @controllers.CompilationLibrariesController.connectProcessorWithLibrary(id: String, lbrId: String)
PUT             /compilation/processor/lbrgrp/:id/:lbrgId   @controllers.CompilationLibrariesController.connectProcessorWithLibraryGroup(id: String, lbrgId: String)
DELETE          /compilation/processor/lbr/:id/:lbrId       @controllers.CompilationLibrariesController.unconnectProcessorWithLibrary(id: String, lbrId: String)
DELETE          /compilation/processor/lbrgrp/:id/:lbrgId   @controllers.CompilationLibrariesController.unconnectProcessorWithLibraryGroup(id: String, lbrgId: String)

GET            /compilation/processor/description/:id       @controllers.CompilationLibrariesController.getProcessorDescription(id: String)
GET            /compilation/processor/libraryGroups/:id     @controllers.CompilationLibrariesController.getProcessorLibraryGroups(id: String)
GET            /compilation/processor/singleLibrary/:id     @controllers.CompilationLibrariesController.getProcessorSingleLibraries(id: String)

#Board
POST            /compilation/board                          @controllers.CompilationLibrariesController.newBoard()
PUT             /compilation/board/userDescription/:id      @controllers.CompilationLibrariesController.addUserDescription(id: String)
GET             /compilation/board/:id                      @controllers.CompilationLibrariesController.getBoard(id: String)
DELETE          /compilation/board/deactivateBoard:id       @controllers.CompilationLibrariesController.deactivateBoard(id: String)
GET             /compilation/board/userDescription/:id      @controllers.CompilationLibrariesController.getUserDescription(id: String)
PUT             /compilation/board/connect/:id/:pr          @controllers.CompilationLibrariesController.connectBoardWthProject(id: String, pr: String)
PUT             /compilation/board/unconnect/:id/:pr        @controllers.CompilationLibrariesController.unconnectBoardWthProject(id: String, pr: String)
GET             /compilation/board/projects/:id             @controllers.CompilationLibrariesController.getBoardProjects(id: String)

#Producer
POST            /compilation/producer                       @controllers.CompilationLibrariesController.newProducers()
PUT             /compilation/producer/:id                   @controllers.CompilationLibrariesController.updateProducers(id: String)
GET             /compilation/producer                       @controllers.CompilationLibrariesController.getProducers()
GET             /compilation/producer/:id                   @controllers.CompilationLibrariesController.getProducer(id: String)
GET             /compilation/producer/description/:id       @controllers.CompilationLibrariesController.getProducerDescription(id: String)
GET             /compilation/producer/typeOfBoards/:id      @controllers.CompilationLibrariesController.getProducerTypeOfBoards(id: String)

#TypeOfBoard
POST            /compilation/typeOfBoard                    @controllers.CompilationLibrariesController.newTypeOfBoard()
PUT             /compilation/typeOfBoard/:id                @controllers.CompilationLibrariesController.updateTypeOfBoard(id: String)
GET             /compilation/typeOfBoard                    @controllers.CompilationLibrariesController.getTypeOfBoards()
GET             /compilation/typeOfBoard/:id                @controllers.CompilationLibrariesController.getTypeOfBoard(id: String)
GET             /compilation/typeOfBoard/description/:id    @controllers.CompilationLibrariesController.getTypeOfBoardDescription(id: String)
GET             /compilation/typeOfBoard/boards/:id         @controllers.CompilationLibrariesController.getTypeOfBoardAllBoards(id: String)

#LibraryGroups
POST            /compilation/libraryGroup                               @controllers.CompilationLibrariesController.newLibraryGroup()
GET             /compilation/libraryGroup/:id                           @controllers.CompilationLibrariesController.getLibraryGroup(id: String)
DELETE          /compilation/libraryGroup/:id                           @controllers.CompilationLibrariesController.deleteLibraryGroup(id: String)
GET             /compilation/libraryGroup                               @controllers.CompilationLibrariesController.getLibraryGroupAll()
PUT             /compilation/libraryGroup/:id                           @controllers.CompilationLibrariesController.updateLibraryGroup(id: String)
GET             /compilation/libraryGroup/generalDescription/:id        @controllers.CompilationLibrariesController.getLibraryGroupDescription(id: String)
GET             /compilation/libraryGroup/processors/:id                @controllers.CompilationLibrariesController.getLibraryGroupProcessors(id: String)
GET             /compilation/libraryGroup/libraries/:libraryId/:version @controllers.CompilationLibrariesController.getLibraryGroupLibraries(libraryId: String, version: String)
POST            /compilation/libraryGroup/versions/:id                  @controllers.CompilationLibrariesController.createNewVersionLibraryGroup(id: String)
GET             /compilation/libraryGroup/versions/:id                  @controllers.CompilationLibrariesController.getVersionLibraryGroup(id: String)
POST            /compilation/libraryGroup/upload/:libraryId/:version    @controllers.CompilationLibrariesController.uploudLibraryToLibraryGroup(libraryId: String, version: Double)

GET             /compilation/library/listOfFiles/:id       @controllers.CompilationLibrariesController.listOfFilesInVersion(id: String)
GET             /compilation/library/fileRecord/:id        @controllers.CompilationLibrariesController.fileRecord(id: String)

#FileRecord
POST            /compilation/library                       @controllers.CompilationLibrariesController.newSingleLibrary()
POST            /compilation/library/version/:id           @controllers.CompilationLibrariesController.newVersionSingleLibrary(id: String)
GET             /compilation/library/version/:id           @controllers.CompilationLibrariesController.getAllVersionSingleLibrary(id: String)
GET             /compilation/library/filter                @controllers.CompilationLibrariesController.getSingleLibraryFilter()
GET             /compilation/library/:id                   @controllers.CompilationLibrariesController.getSingleLibrary(id: String)
GET             /compilation/library                       @controllers.CompilationLibrariesController.getSingleLibraryAll()

PUT             /compilation/library/:id                   @controllers.CompilationLibrariesController.updateSingleLibrary(id: String)
DELETE          /compilation/library/:id                   @controllers.CompilationLibrariesController.deleteSingleLibrary(id: String)
POST            /compilation/library/uploud/:id/:version   @controllers.CompilationLibrariesController.uploadSingleLibraryWithVersion(id: String, version: Double)
POST            /compilation/library/uploud/:id            @controllers.CompilationLibrariesController.uploadSingleLibrary(id: String)
GET             /compilation/library/description/:id       @controllers.CompilationLibrariesController.getSingleLibraryDescription(id: String)

### TOOLS ############ TOOLS ############### TOOLS ################ TOOLS ######################################################################################################
################################################################################################################################################################################

#SWAGGER API
GET            /api-docs                                   @utilities.swagger.ApiHelpController.getResources

#CORS
OPTIONS        /*all                                       @controllers.SecurityController.optionLink(all)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file               controllers.Assets.at(path="/public", file)

