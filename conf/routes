# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page - for testing connected device
# Home page

#CORS
OPTIONS        /*all                                        @controllers.Controller_Security.optionLink(all)

POST              /test                                     @controllers.Controller_Wiky.test1()

### WEBSOCKET ############ WEBSOCKET ############### WEBSOCKET ################ WEBSOCKET ###########################################################################
###################################################################################f#################################################################################

GET              /websocket/homer_server/:identificator        @controllers.Controller_WebSocket.homer_cloud_server_connection(identificator)
GET              /websocket/compilation_server/:identificator  @controllers.Controller_WebSocket.compilator_server_connection(identificator)
GET              /websocket/becki/:secure_token                @controllers.Controller_WebSocket.becki_website_connection(secure_token)
GET              /websocket/access_token                       @controllers.Controller_WebSocket.get_Websocket_token()


#API - CoreClient ####################################################################################################################################################
###################################################################################f##################################################################################

#Login page
POST            /login          @controllers.Controller_Security.login()
POST            /logout         @controllers.Controller_Security.logout()

GET             /login/facebook                             @controllers.Controller_Security.Facebook(return_link)
GET             /login/twitter                              @controllers.Controller_Security.Twitter(return_link)
GET             /login/github                               @controllers.Controller_Security.GitHub(return_link)
GET             /login/vkontakte                            @controllers.Controller_Security.Vkontakte(return_link)

GET             /login/person                               @controllers.Controller_Security.getPersonByToken

GET             /login/facebook/*url                        @controllers.Controller_Security.GET_facebook_oauth(url)
GET             /login/github/*url                          @controllers.Controller_Security.GET_github_oauth(url)

### NOTIFICATION ############ NOTIFICATION ############### NOTIFICATION ################ NOTIFICATION ################################################################
######################################################################################################################################################################

GET             /notification/list/:page_number             @controllers.Controller_Notification.get_notification_page(page_number: Integer)
DELETE          /notification/:notification_id              @controllers.Controller_Notification.delete_notification(notification_id)

GET             /notification/unconfirmed                   @controllers.Controller_Notification.get_unconfirmed_notifications()
PUT             /notification/confirm/:notification_id      @controllers.Controller_Notification.notification_confirm(notification_id)

PUT             /notification/read                          @controllers.Controller_Notification.mark_as_read_notification()

POST            /notification/test/:mail                    @controllers.Controller_Notification.test_notifications(mail)

### PERSON ############ PERSON ############### PERSON ################ PERSON ################# PERSON ############ PERSON ###########################################
######################################################################################################################################################################

#Peron CRUD
POST           /person                                           @controllers.Controller_Person.person_create()
PUT            /person/:person_id                                @controllers.Controller_Person.person_update(person_id)
GET            /person/all                                       @controllers.Controller_Person.person_getAll()
GET            /person/:person_id                                @controllers.Controller_Person.person_get(person_id)
DELETE         /person/:id                                       @controllers.Controller_Person.person_delete(id: String)

POST           /person/validate_entity                           @controllers.Controller_Person.person_validateProperty()
POST           /person/authentication_email                      @controllers.Controller_Person.person_authenticationSendEmail()

GET            /person/connection/all                            @controllers.Controller_Person.person_getAllConnections()
DELETE         /person/connection/:connection_id                 @controllers.Controller_Person.remove_Person_Connection(connection_id)

PUT            /person/deactivate/:person_id                     @controllers.Controller_Person.person_deactivate(person_id)
PUT            /person/activate/:person_id                       @controllers.Controller_Person.person_activate(person_id)
DELETE         /person/clean_all_tokens/:person_id               @controllers.Controller_Person.person_removeAllConnections(person_id)
PUT            /person/valid_email/:person_id                    @controllers.Controller_Person.person_validEmail(person_id)

GET            /person/mail_authentication/:token                @controllers.Controller_Person.person_emailAuthentication(token)

POST           /person/change_property                           @controllers.Controller_Person.person_changeLoginProperty()
GET            /person/authorize_change/:token                   @controllers.Controller_Person.person_authorizePropertyChange(token)

#Password recovery
POST           /person/password/recovery_mail                    @controllers.Controller_Person.person_passwordRecoverySendEmail()
PUT            /person/password/recovery                         @controllers.Controller_Person.person_passwordRecovery()

#Personal Picture
PUT            /person/picture/upload                            @controllers.Controller_Person.person_uploadPicture()
PUT            /person/picture/remove                            @controllers.Controller_Person.person_removePicture()

### PERMISSION ############ PERMISSION ############### PERMISSION ################ PERMISSION ################# PERMISSION #####################################################
################################################################################################################################################################################

PUT            /secure/permission/person/:person_id/:permission_id         @controllers.Controller_Permission.add_Permission_Person(person_id,permission_id)
DELETE         /secure/permission/person/:person_id/:permission_id         @controllers.Controller_Permission.remove_Permission_Person(person_id,permission_id)
PUT            /secure/permission/:permission_id                           @controllers.Controller_Permission.edit_permission_desciption(permission_id)

GET            /secure/permission/all                                      @controllers.Controller_Permission.get_Permission_All()
GET            /secure/role/all                                            @controllers.Controller_Permission.get_Role_All()

PUT            /secure/role/permission/:permission_id/:role_id             @controllers.Controller_Permission.add_Permission_to_Role(permission_id,role_id)
DELETE         /secure/role/permission/:permission_id/:role_id             @controllers.Controller_Permission.remove_Permission_from_Role(permission_id,role_id)

PUT            /secure/role/person/:mail/:role_id                          @controllers.Controller_Permission.add_Role_Person(mail,role_id)
DELETE         /secure/role/person/:person_id/:role_id                     @controllers.Controller_Permission.remove_Role_Person(person_id,role_id)

POST           /secure/role                                                @controllers.Controller_Permission.new_Role()
DELETE         /secure/role/:role_id                                       @controllers.Controller_Permission.delete_Role(role_id)
PUT            /secure/role/:role_id                                       @controllers.Controller_Permission.edit_Role(role_id)

GET            /secure/person/system_acces/:person_id                      @controllers.Controller_Permission.get_System_Acces(person_id)

### OVERFLOW ############ OVERFLOW ############### OVERFLOW ################ OVERFLOW ################# OVERFLOW ###############################################################
################################################################################################################################################################################

POST           /overflow/post                                            @controllers.Controller_Overflow.new_Post()
GET            /overflow/post/:post_id                                   @controllers.Controller_Overflow.get_Post(post_id)
DELETE         /overflow/post/:post_id                                   @controllers.Controller_Overflow.delete_Post(post_id)
PUT            /overflow/post/:post_id                                   @controllers.Controller_Overflow.edit_Post(post_id)
POST           /overflow/filter/:page_number                             @controllers.Controller_Overflow.get_Post_ByFilter(page_number:Int)

POST           /overflow/typeOfPost                                      @controllers.Controller_Overflow.new_TypeOfPost()
GET            /overflow/typeOfPost/all                                  @controllers.Controller_Overflow.get_TypeOfPost_all()
GET            /overflow/typeOfPost/:type_of_post_id                     @controllers.Controller_Overflow.get_TypeOfPost(type_of_post_id)
PUT            /overflow/typeOfPost/:type_of_post_id                     @controllers.Controller_Overflow.edit_TypeOfPost(type_of_post_id)
DELETE         /overflow/typeOfPost/:type_of_post_id                     @controllers.Controller_Overflow.delete_TypeOfPost(type_of_post_id)

POST           /overflow/typeOfConfirm                                   @controllers.Controller_Overflow.new_TypeOfConfirms()
PUT            /overflow/typeOfConfirm/:type_of_confirm_id               @controllers.Controller_Overflow.edit_TypeOfConfirms(type_of_confirm_id)
GET            /overflow/typeOfConfirm/all                               @controllers.Controller_Overflow.get_TypeOfConfirms_all()
GET            /overflow/typeOfConfirm/:type_of_confirm_id               @controllers.Controller_Overflow.get_TypeOfConfirms(type_of_confirm_id)
DELETE         /overflow/typeOfConfirm/:type_of_confirm_id               @controllers.Controller_Overflow.delete_TypeOfConfirms(type_of_confirm_id)

PUT            /overflow/typeOfConfirm/:post_id/:type_of_confirm_id      @controllers.Controller_Overflow.set_TypeOfConfirm_to_Post(post_id, type_of_confirm_id)
DELETE         /overflow/typeOfConfirm/:post_id/:type_of_confirm_id      @controllers.Controller_Overflow.remove_TypeOfConfirm_to_Post(post_id, type_of_confirm_id)


POST           /overflow/comment/:post_id                                @controllers.Controller_Overflow.addComment(post_id)
PUT            /overflow/comment/:post_id                                @controllers.Controller_Overflow.edit_Comment_or_Answer(post_id)

POST           /overflow/answer/:post_id                                 @controllers.Controller_Overflow.addAnswer(post_id)
PUT            /overflow/answer/:post_id                                 @controllers.Controller_Overflow.edit_Comment_or_Answer(post_id)


PUT            /overflow/likePlus/:post_id                               @controllers.Controller_Overflow.likePlus(post_id)
PUT            /overflow/likeMinus/:post_id                              @controllers.Controller_Overflow.likeMinus(post_id)
POST           /overflow/link/:question_post_id/:answer_post_id          @controllers.Controller_Overflow.linkWithPreviousAnswer(question_post_id, answer_post_id)
DELETE         /overflow/link/:linked_post_id                            @controllers.Controller_Overflow.unlinkWithPreviousAnswer(linked_post_id)


PUT            /overflow/hashTag/:post_id/:hashTag                       @controllers.Controller_Overflow.add_HashTag_to_Post(post_id,hashTag)
DELETE         /overflow/hashTag/:post_id/:hashTag                       @controllers.Controller_Overflow.remove_HashTag_from_Post(post_id,hashTag)


### PROJECT ############ PROJECT ############### PROJECT ################ PROJECT ################# PROJECT ####################################################################
################################################################################################################################################################################

#Tarrifs
GET            /tarifs/for_registration                                                     @controllers.Controller_Finance.get_products_tariffs()


#CRUD Tarrifs
POST           /product                                                                     @controllers.Controller_Finance.product_create()
GET            /product/all                                                                 @controllers.Controller_Finance.product_get_all()
PUT            /product/deactivate/:product_id                                              @controllers.Controller_Finance.product_deactivate(product_id: Long)
PUT            /product/activate/:product_id                                                @controllers.Controller_Finance.product_activate(product_id: Long)
DELETE         /product/:product_id                                                         @controllers.Controller_Finance.product_delete(product_id: Long)

GET            /product/user_applicable                                                     @controllers.Controller_Finance.get_applicable_products_for_creating_new_project()

PUT            /product/details/:payment_details_id                                         @controllers.Controller_Finance.edit_payment_details(payment_details_id: Long)
PUT            /product/general/:product_id                                                 @controllers.Controller_Finance.edit_general_product_details(product_id: Long)


#GoPay
GET            /go_pay/notification_url                                                     @utilities.goPay.GoPay_Controller.call_back_Notification(id: Long)
GET            /go_pay/return_url                                                           @utilities.goPay.GoPay_Controller.call_back_Return_Url(id: Long)


#Fakturoid
GET             /invoice/get/:invoice_id                                                    @controllers.Controller_Finance.invoice_get(invoice_id: Long)
GET             /invoice/pdf/:invoice_id                                                    @controllers.Controller_Finance.invoice_get_pdf(invoice_id: Long)

# Obsluha pouze pro Byzance zaměstnance
PUT             /invoice/set_pay/:invoice_id                                                @controllers.Controller_Finance.invoice_set_as_paid(invoice_id: Long)
PUT             /invoice/send_remainder/:invoice_id                                         @controllers.Controller_Finance.send_remainder_to_custumer(invoice_id: Long)
DELETE          /invoice/:invoice_id                                                        @controllers.Controller_Finance.invoice_remove(invoice_id: Long)

#Project
POST           /project                                                                     @controllers.Controller_ProgramingPackage.project_create()
PUT            /project/:project_id                                                         @controllers.Controller_ProgramingPackage.project_update(project_id)
GET            /project/:project_id                                                         @controllers.Controller_ProgramingPackage.project_get(project_id)
GET            /project                                                                     @controllers.Controller_ProgramingPackage.project_getByUser
DELETE         /project/:project_id                                                         @controllers.Controller_ProgramingPackage.project_delete(project_id)
PUT            /project/shareProject/:project_id                                            @controllers.Controller_ProgramingPackage.project_invite(project_id)
PUT            /project/unshareProject/:project_id                                          @controllers.Controller_ProgramingPackage.project_removeParticipant(project_id)
PUT            /project/addParticipant/:invitation_id/:decision                             @controllers.Controller_ProgramingPackage.project_addParticipant(invitation_id, decision: Boolean)
PUT            /project/change_participant_state/:project_id                                @controllers.Controller_ProgramingPackage.project_changeParticipantStatus(project_id)
DELETE         /project/deleteInvitation/:invitation_id                                     @controllers.Controller_ProgramingPackage.project_deleteInvitation(invitation_id)

#Program
POST           /b_program/:project_id                                                       @controllers.Controller_ProgramingPackage.new_b_Program(project_id)
GET            /b_program/:b_program_id                                                     @controllers.Controller_ProgramingPackage.get_b_Program(b_program_id)
PUT            /b_program/:b_program_id                                                     @controllers.Controller_ProgramingPackage.edit_b_Program(b_program_id)
DELETE         /b_program/:b_program_id                                                     @controllers.Controller_ProgramingPackage.remove_b_Program(b_program_id)
PUT            /b_program/list/:page_number                                                 @controllers.Controller_ProgramingPackage.get_b_Program_by_Filter(page_number:Int )
        
PUT            /b_program/version/:b_program_id                                             @controllers.Controller_ProgramingPackage.update_b_program_new_version(b_program_id)
GET            /b_program/version/:version_id                                               @controllers.Controller_ProgramingPackage.get_b_Program_version(version_id)
DELETE         /b_program/version/:version_id                                               @controllers.Controller_ProgramingPackage.remove_b_Program_version(version_id)

#Instance


GET            /instance/project/:project_id                            @controllers.Controller_ProgramingPackage.get_b_program_instance_under_project(project_id)
GET            /instance/get/:instance_id                               @controllers.Controller_ProgramingPackage.get_b_program_instance(instance_id)

PUT            /instance/command/:instance_id/:target_id/:command       @controllers.Controller_ProgramingPackage.send_command_to_instance(instance_id, target_id, command)
PUT            /instance/program/:instance_id                           @controllers.Controller_ProgramingPackage.update_blocko_code_in_instance_with_code(instance_id)
PUT            /instance/ping/:instance_id                              @controllers.Controller_ProgramingPackage.ping_instance(instance_id)
PUT            /instance/temporary_instance                             @controllers.Controller_ProgramingPackage.instance_add_temporary_instance()
PUT            /instance/add_yoda/:instance_id/:yoda_id                 @controllers.Controller_ProgramingPackage.instance_add_yoda(instance_id, yoda_id)
PUT            /instance/remove_yoda/:instance_id/:yoda_id              @controllers.Controller_ProgramingPackage.instance_remove_yoda(instance_id, yoda_id)
PUT            /instance/add_device/:instance_id/:yoda_id/:device_id    @controllers.Controller_ProgramingPackage.instance_add_device(instance_id, yoda_id, device_id)
PUT            /instance/remove_device/:instance_id/:yoda_id/:device_id @controllers.Controller_ProgramingPackage.instance_remove_device(instance_id, yoda_id, device_id)
PUT            /instance/uploadToCloud/:version_id                      @controllers.Controller_ProgramingPackage.upload_b_Program_ToCloud(version_id)
PUT            /instance/shut_down/:instance_name                       @controllers.Controller_ProgramingPackage.instance_shut_down(instance_name)


#Blocks
POST           /blockoBlock                                                         @controllers.Controller_ProgramingPackage.blockoBlock_create()
PUT            /blockoBlock/:blocko_block_id                                        @controllers.Controller_ProgramingPackage.blockoBlock_update(blocko_block_id)
GET            /blockoBlock/:blocko_block_id                                        @controllers.Controller_ProgramingPackage.blockoBlock_get(blocko_block_id)
DELETE         /blockoBlock/:blocko_block_id                                        @controllers.Controller_ProgramingPackage.blockoBlock_delete(blocko_block_id)
PUT            /blockoBlock/list/:page_number                                       @controllers.Controller_ProgramingPackage.blockoBlock_getByFilter(page_number:Int )

POST           /blockoBlock/version/:blocko_block_id                                @controllers.Controller_ProgramingPackage.blockoBlockVersion_create(blocko_block_id)
PUT            /blockoBlock/version/:blocko_block_version_id                        @controllers.Controller_ProgramingPackage.blockoBlockVersion_update(blocko_block_version_id)
PUT            /blockoBlock/version/make_public/:blocko_block_version_id            @controllers.Controller_ProgramingPackage.blockoBlockVersion_makePublic(blocko_block_version_id)
GET            /blockoBlock/version/all/:blocko_block_id                            @controllers.Controller_ProgramingPackage.blockoBlockVersion_getAll(blocko_block_id)
GET            /blockoBlock/version/:blocko_block_version_id                        @controllers.Controller_ProgramingPackage.blockoBlockVersion_get(blocko_block_version_id)
DELETE         /blockoBlock/version/:blocko_block_version_id                        @controllers.Controller_ProgramingPackage.blockoBlockVersion_delete(blocko_block_version_id)

POST           /blockoBlock/scheme/version                                          @controllers.Controller_ProgramingPackage.blockoBlockVersion_createScheme()
GET            /blockoBlock/scheme/version                                          @controllers.Controller_ProgramingPackage.blockoBlockVersion_getScheme()
PUT            /blockoBlock/scheme/version                                          @controllers.Controller_ProgramingPackage.blockoBlockVersion_editScheme()

#TypeOfBlocko
POST           /typeOfBlock                                                         @controllers.Controller_ProgramingPackage.typeOfBlock_create()
GET            /typeOfBlock                                                         @controllers.Controller_ProgramingPackage.typeOfBlock_getAll
PUT            /typeOfBlock/list/:page_number                                       @controllers.Controller_ProgramingPackage.typeOfBlock_getByFilter(page_number: Int)
GET            /typeOfBlock/:type_of_block_id                                       @controllers.Controller_ProgramingPackage.typeOfBlock_get(type_of_block_id)
PUT            /typeOfBlock/:type_of_block_id                                       @controllers.Controller_ProgramingPackage.typeOfBlock_update(type_of_block_id)
DELETE         /typeOfBlock/:type_of_block_id                                       @controllers.Controller_ProgramingPackage.typeOfBlock_delete(type_of_block_id)


#BLocko Server
POST            /blocko_server                                                      @controllers.Controller_ProgramingPackage.create_Homer_Server()
PUT             /blocko_server/:server_id                                           @controllers.Controller_ProgramingPackage.edit_Homer_Server(server_id)
GET             /blocko_server                                                      @controllers.Controller_ProgramingPackage.get_All_Homer_Server()
DELETE          /blocko_server/:server_id                                           @controllers.Controller_ProgramingPackage.delete_Homer_Server(server_id)

#Blocko General
PUT             /blocko/disapprove                                                  @controllers.Controller_ProgramingPackage.blockoDisapprove()
PUT             /blocko/approval                                                    @controllers.Controller_ProgramingPackage.blockoApproval()

#Board on Project
GET             /blocko/all_details/:project_id                                     @controllers.Controller_CompilationLibraries.board_allDetailsForBlocko(project_id)


### ACTUALIZATION PROCEDURE ############ ACTUALIZATION PROCEDURE ############### ACTUALIZATION PROCEDURE ################ ACTUALIZATION PROCEDURE ##############################
################################################################################################################################################################################

#Actualization Procedure
GET             /actualization_procedure/:actualization_procedure_id                @controllers.Controller_Actualization.get_Actualization_Procedure(actualization_procedure_id)





### COMPILATION & LIBRARIES ############ COMPILATION & LIBRARIES ############### COMPILATION & LIBRARIES ################ COMPILATION & LIBRARIES ##############################
################################################################################################################################################################################

#C_Program
POST            /c_program                                                      @controllers.Controller_CompilationLibraries.c_program_create()
GET             /c_program/:c_program_id                                        @controllers.Controller_CompilationLibraries.c_program_get(c_program_id)
PUT             /c_program/list/:page_number                                    @controllers.Controller_CompilationLibraries.c_program_getByFilter(page_number: Int)

PUT             /c_program/:c_program_id                                        @controllers.Controller_CompilationLibraries.c_program_update(c_program_id)
DELETE          /c_program/:c_program_id                                        @controllers.Controller_CompilationLibraries.c_program_delete(c_program_id)

POST            /c_program/version/create/:c_program_id                         @controllers.Controller_CompilationLibraries.c_programVersion_create(c_program_id)
PUT             /c_program/version/edit/:version_id                             @controllers.Controller_CompilationLibraries.c_programVersion_update(version_id)

DELETE          /c_program/version/:version_id                                  @controllers.Controller_CompilationLibraries.c_programVersion_delete(version_id)
GET             /c_program/version/:version_id                                  @controllers.Controller_CompilationLibraries.c_programVersion_get(version_id)
POST            /c_program/version/compile                                      @controllers.Controller_CompilationLibraries.compile_C_Program_code()
PUT             /c_program/version/compile/:version_id                          @controllers.Controller_CompilationLibraries.compile_C_Program_version(version_id)


GET             /c_program/version/public/list/:page_number                     @controllers.Controller_CompilationLibraries.c_program_getPublicList(page_number: Int)

#C_Program/Public
GET             /c_program/version_for_decision/:version_id                     @controllers.Controller_CompilationLibraries.get_version_for_decision(version_id)
PUT             /c_program/version_for_aprove/approve_decision                  @controllers.Controller_CompilationLibraries.approve_decision()
PUT             /c_program/version/make_public/:version_id                      @controllers.Controller_CompilationLibraries.c_programVersion_makePublic(version_id)

#Libraries
POST            /library                                                        @controllers.Controller_CompilationLibraries.importLibrary_create()
GET             /library                                                        @controllers.Controller_CompilationLibraries.importLibrary_getAll()
GET             /library/:library_id                                            @controllers.Controller_CompilationLibraries.importLibrary_get(library_id)
PUT             /library/:library_id                                            @controllers.Controller_CompilationLibraries.importLibrary_update(library_id)
PUT             /library/list/:page_number                                      @controllers.Controller_CompilationLibraries.importLibrary_getByFilter(page_number: Int)
DELETE          /library/:library_id                                            @controllers.Controller_CompilationLibraries.importLibrary_delete(library_id)

POST            /library/version/:library_id                                    @controllers.Controller_CompilationLibraries.importLibraryVersion_create(library_id)
GET             /library/version/:version_id                                    @controllers.Controller_CompilationLibraries.importLibraryVersion_get(version_id)
PUT             /library/version/:version_id                                    @controllers.Controller_CompilationLibraries.importLibraryVersion_update(version_id)
DELETE          /library/version/:version_id                                    @controllers.Controller_CompilationLibraries.importLibraryVersion_delete(version_id)

PUT             /library/version/upload_file/:version_id                        @controllers.Controller_CompilationLibraries.importLibraryVersion_uploadFile(version_id)
PUT             /library/version/remove_file/:version_id                        @controllers.Controller_CompilationLibraries.importLibraryVersion_uploadFile(version_id)

POST            /library/version/upload_example/:version_id                     @controllers.Controller_CompilationLibraries.importLibraryVersion_uploadExample(version_id)

#Actualization
PUT             /c_program/version/upload/:version_id                           @controllers.Controller_CompilationLibraries.uploadCompilationToBoard(version_id)
POST            /admin_binary/:instance_id/:board_id/:build_id/:command         @controllers.Controller_CompilationLibraries.uploadBinaryFileToBoard_fake_board(instance_id: String, board_id: String, build_id: String, command: String)

#Processor
POST            /processor                                                      @controllers.Controller_CompilationLibraries.processor_create()
GET             /processor/:processor_id                                        @controllers.Controller_CompilationLibraries.processor_get(processor_id)
GET             /processor                                                      @controllers.Controller_CompilationLibraries.processor_getAll()
PUT             /processor/:processor_id                                        @controllers.Controller_CompilationLibraries.processor_update(processor_id)
DELETE          /processor/:processor_id                                        @controllers.Controller_CompilationLibraries.processor_delete(processor_id)

#Board
POST            /board                                                          @controllers.Controller_CompilationLibraries.board_create()
PUT             /board/userDescription/:type_of_board_id                        @controllers.Controller_CompilationLibraries.board_update(type_of_board_id)

PUT             /board/filter/:page_number                                      @controllers.Controller_CompilationLibraries.board_getByFilter(page_number:Int )
GET             /board/:board_id                                                @controllers.Controller_CompilationLibraries.board_get(board_id)
DELETE          /board/deactivateBoard/:board_id                                @controllers.Controller_CompilationLibraries.board_deactivate(board_id)
PUT             /board/:board_id/:project_id                                    @controllers.Controller_CompilationLibraries.board_connectProject(board_id, project_id)
DELETE          /board/:board_id                                                @controllers.Controller_CompilationLibraries.board_disconnectProject(board_id)


#Producer
POST            /producer                                                       @controllers.Controller_CompilationLibraries.new_Producer()
PUT             /producer/:producer_id                                          @controllers.Controller_CompilationLibraries.edit_Producer(producer_id)
GET             /producer/all                                                   @controllers.Controller_CompilationLibraries.get_Producers()
GET             /producer/:producer_id                                          @controllers.Controller_CompilationLibraries.get_Producer(producer_id)
DELETE          /producer/:producer_id                                          @controllers.Controller_CompilationLibraries.delete_Producer(producer_id)

#TypeOfBoard
POST            /typeOfBoard                                                    @controllers.Controller_CompilationLibraries.typeOfBoard_create()
PUT             /typeOfBoard/picture_up/:type_of_board_id                       @controllers.Controller_CompilationLibraries.typeOfBoard_uploadPicture(type_of_board_id)
PUT             /typeOfBoard/picture_remove/:type_of_board_id                   @controllers.Controller_CompilationLibraries.typeOfBoard_removePicture(type_of_board_id)
PUT             /typeOfBoard/:type_of_board_id                                  @controllers.Controller_CompilationLibraries.typeOfBoard_update(type_of_board_id)
DELETE          /typeOfBoard/:type_of_board_id                                  @controllers.Controller_CompilationLibraries.typeOfBoard_delete(type_of_board_id)
GET             /typeOfBoard/all                                                @controllers.Controller_CompilationLibraries.typeOfBoard_getAll()
GET             /typeOfBoard/:type_of_board_id                                  @controllers.Controller_CompilationLibraries.typeOfBoard_get(type_of_board_id)
PUT             /typeOfBoard/mark/c_version/:type_of_board_id/:version_id       @controllers.Controller_CompilationLibraries.typeOfBoard_mark_C_program_Version_as_main(type_of_board_id,version_id)

#Bootloader
POST            /bootloader/:type_of_board_id                                   @controllers.Controller_CompilationLibraries.boot_loader_create(type_of_board_id)
PUT             /bootloader/file/:boot_loader_id                                @controllers.Controller_CompilationLibraries.boot_loader_upload_file(boot_loader_id)
PUT             /bootloader/mark/bootloader/:boot_loader_id                     @controllers.Controller_CompilationLibraries.boot_loader_mark_as_main(boot_loader_id)


PUT             /bootloader/update_device_list/:instance_id                     @controllers.Controller_CompilationLibraries.boot_loader_update_instance(instance_id)

#File // Skryto ve swaggeru
GET             /file/fileRecord/:file_record_id                                @controllers.Controller_CompilationLibraries.fileRecord(file_record_id)


#Compilation Server
POST            /compilation_server                                             @controllers.Controller_CompilationLibraries.create_Compilation_Server()
PUT             /compilation_server/:server_id                                  @controllers.Controller_CompilationLibraries.edit_Compilation_Server(server_id)
GET             /compilation_server                                             @controllers.Controller_CompilationLibraries.get_All_Compilation_Server()
DELETE          /compilation_server/:server_id                                  @controllers.Controller_CompilationLibraries.delete_Compilation_Server(server_id)


### GRIDS ############ GRIDS ############### GRIDS ################ GRIDS ######################################################################################################
################################################################################################################################################################################

#M Project
GET             /m_project/interface_collection/:m_project_id                          @controllers.Controller_Grid.get_M_Project_Interface_collection(m_project_id)

POST            /m_project/:project_id                                                 @controllers.Controller_Grid.new_M_Project(project_id)
GET             /m_project/:m_project_id                                               @controllers.Controller_Grid.get_M_Project(m_project_id)
PUT             /m_project/:m_project_id                                               @controllers.Controller_Grid.edit_M_Project(m_project_id)
DELETE          /m_project/:m_project_id                                               @controllers.Controller_Grid.remove_M_Project(m_project_id)

#M Program
POST            /m_program/:m_project_id                                               @controllers.Controller_Grid.new_M_Program(m_project_id)
GET             /m_program/:m_progrm_id                                                @controllers.Controller_Grid.get_M_Program(m_progrm_id)
PUT             /m_program/:m_progrm_id                                                @controllers.Controller_Grid.edit_M_Program(m_progrm_id)
DELETE          /m_program/:m_progrm_id                                                @controllers.Controller_Grid.remove_M_Program(m_progrm_id)

POST            /m_program/version/:m_program_id                                       @controllers.Controller_Grid.new_M_Program_version(m_program_id)
GET             /m_program/version/:m_program_version_id                               @controllers.Controller_Grid.get_M_Program_version(m_program_version_id)
DELETE          /m_program/version/:m_program_version_id                               @controllers.Controller_Grid.remove_M_Program_version(m_program_version_id)

# Terminals Aps
GET             /m_program/app/token/:qr_token                                         @controllers.Controller_Grid.get_M_Program_byQR_Token_forMobile(qr_token)
GET             /m_program/app/all_m_programs                                          @controllers.Controller_Grid.get_M_Project_all_forTerminal()
PUT             /m_program/app/url                                                     @controllers.Controller_Grid.get_conection_url()

PUT             /websocket/terminal/identificator                                      @controllers.Controller_Grid.get_identificator()
PUT             /websocket/terminal/identificator/:terminal_id                         @controllers.Controller_Grid.check_identifiactor(terminal_id)

# Wigets
POST           /grid_widget                                                            @controllers.Controller_Grid.gridWidget_create()
PUT            /grid_widget/:grid_widget_id                                            @controllers.Controller_Grid.gridWidget_update(grid_widget_id)
GET            /grid_widget/:grid_widget_id                                            @controllers.Controller_Grid.gridWidget_get(grid_widget_id)
DELETE         /grid_widget/:grid_widget_id                                            @controllers.Controller_Grid.gridWidget_delete(grid_widget_id)
PUT            /grid_widget/list/:page_number                                          @controllers.Controller_Grid.gridWidget_getByFilter(page_number: Int)

POST           /grid_widget/version/:grid_widget_id                                    @controllers.Controller_Grid.gridWidgetVersion_create(grid_widget_id)
PUT            /grid_widget/version/:grid_widget_version_id                            @controllers.Controller_Grid.gridWidgetVersion_update(grid_widget_version_id)
PUT            /grid_widget/version/make_public/:grid_widget_version_id                @controllers.Controller_Grid.gridWidgetVersion_makePublic(grid_widget_version_id)
GET            /grid_widget/version/all/:grid_widget_id                                @controllers.Controller_Grid.gridWidgetVersion_getAll(grid_widget_id)
GET            /grid_widget/version/:grid_widget_version_id                            @controllers.Controller_Grid.gridWidgetVersion_get(grid_widget_version_id)
DELETE         /grid_widget/version/:grid_widget_version_id                            @controllers.Controller_Grid.gridWidgetVersion_delete(grid_widget_version_id)

POST           /grid_widget/scheme/version                                             @controllers.Controller_Grid.gridWidgetVersion_createScheme()
GET            /grid_widget/scheme/version                                             @controllers.Controller_Grid.gridWidgetVersion_getScheme()
PUT            /grid_widget/scheme/version                                             @controllers.Controller_Grid.gridWidgetVersion_editScheme()

#TypeOfWidget
POST           /type_of_widget                                                         @controllers.Controller_Grid.typeOfWidget_create()
GET            /type_of_widget                                                         @controllers.Controller_Grid.typeOfWidget_getAll()
PUT            /type_of_widget/list/:page_number                                       @controllers.Controller_Grid.typeOfWidget_getByFilter(page_number: Int)
GET            /type_of_widget/:type_of_widget_id                                      @controllers.Controller_Grid.typeOfWidget_get(type_of_widget_id)
PUT            /type_of_widget/:type_of_widget_id                                      @controllers.Controller_Grid.typeOfWidget_update(type_of_widget_id)
DELETE         /type_of_widget/:type_of_widget_id                                      @controllers.Controller_Grid.typeOfWidget_delete(type_of_widget_id)

# Approval
PUT             /grid/disapprove                                                  @controllers.Controller_Grid.gridDisapprove()
PUT             /grid/approval                                                    @controllers.Controller_Grid.gridApproval()

### TOOLS ############ TOOLS ############### TOOLS ################ TOOLS ######################################################################################################
################################################################################################################################################################################

#SWAGGER API
GET            /api-docs                                    @utilities.swagger.ApiHelpController.getResources
GET            /api-docs/:version                           @utilities.swagger.swagger_diff_tools.Swagger_diff_Controller.getResources_version(version)




# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                 controllers.Assets.at(path="/public", file)
GET           /assets/*file                                 controllers.Assets.versioned(path="/public", file: Asset)
GET           /.well-known/acme-challenge/:file             @utilities.certificate.CertificateCheck.check(file)

### HARDWARE - GENERATOR ############ HARDWARE - GENERATOR ############### HARDWARE - GENERATOR ################ HARDWARE - GENERATOR ###########################################
###################################################################################f#############################################################################################

PUT             /admin/embedded_hardware/request                      @utilities.hardware_generator.HardwareGeneratorController.new_hardware_request()
PUT             /admin/embedded_hardware/result                       @utilities.hardware_generator.HardwareGeneratorController.new_hardware_result()

### PUBLIC - ADMIN ############ PUBLIC  - ADMIN ############### PUBLIC  - ADMIN ################ PUBLIC  - ADMIN ################################################################
###################################################################################f#############################################################################################

# Basic Page Requests
GET             /                                               @controllers.Controller_Dashboard.index()
GET             /admin/login                                    @controllers.Controller_Dashboard.login()
GET             /admin/bugs                                     @controllers.Controller_Dashboard.show_all_logs()
GET             /admin/websocket/summary                        @controllers.Controller_Dashboard.show_web_socket_stats()
GET             /admin/websocket/server_detail/:server_name     @controllers.Controller_Dashboard.show_websocket_server_detail(server_name)
GET             /admin/websocket/instance_detail/:instance_id   @controllers.Controller_Dashboard.show_instance_detail(instance_id)
GET             /admin/show_readme                              @controllers.Controller_Dashboard.show_readme()
GET             /admin/show_diff_on_Api/                        @controllers.Controller_Dashboard.show_diff_on_Api(old_api: String?="",new_api: String?="")

# Admin - Hardware
GET             /admin/board_settings                           @controllers.Controller_Dashboard.basic_board_management()
GET             /admin/mac_adress_generator                     @controllers.Controller_Dashboard.mac_adress_generator()
GET             /admin/bootloader_settings/:type_of_board_id    @controllers.Controller_Dashboard.bootloader_management(type_of_board_id)

# Admin - External Servers
GET             /admin/external_servers                         @controllers.Controller_Dashboard.external_servers()

# Admin - Help Desk
GET             /admin/user_summary/                            @controllers.Controller_Dashboard.user_summary(email: String?="")
GET             /admin/user_summary/:mail                       @controllers.Controller_Dashboard.user_summary(mail)
GET             /admin/helpdesk_tool/project/:id                @controllers.Controller_Dashboard.project_detail(id)

# Admin - Permission
GET             /admin/permission/permission_summary            @controllers.Controller_Dashboard.permissions_summary()
GET             /admin/permission/role/:role_id                 @controllers.Controller_Dashboard.role(role_id)

GET             /admin/blocko_objects                           @controllers.Controller_Dashboard.blocko_objects()
GET             /admin/blocko_management                        @controllers.Controller_Dashboard.blocko_management()
GET             /admin/blocko_block_content                     @controllers.Controller_Dashboard.blocko_first_block_content()
GET             /admin/grid_public                              @controllers.Controller_Dashboard.grid_public()
GET             /admin/grid_management                          @controllers.Controller_Dashboard.grid_management()
GET             /admin/grid_widget_content                      @controllers.Controller_Dashboard.grid_first_widget_content()
GET             /admin/public_code                              @controllers.Controller_Dashboard.public_code()
GET             /admin/libraries                                @controllers.Controller_Dashboard.libraries()
GET             /admin/public_code_aproval                      @controllers.Controller_Dashboard.public_code_aprove_procedure()

# Admin - Tariff Management
GET             /admin/general_tariffs                          @controllers.Controller_Dashboard.general_tariffs_list()
GET             /admin/general_tariffs/:general_tariff_id       @controllers.Controller_Dashboard.general_tariff_edit(general_tariff_id)
GET             /admin/general_tariff_extension/:extension_id   @controllers.Controller_Dashboard.general_tariff_extension_edit(extension_id)

# Demo Data
GET             /admin/demo_data                                @controllers.Controller_Dashboard.demo_data()
PUT             /admin/demo_data/test                           @utilities.demo_data.Demo_Data_Controller.test()
PUT             /admin/demo_data/all_for_becki                  @utilities.demo_data.Demo_Data_Controller.all_for_becki()
PUT             /admin/demo_data/extendension_servers           @utilities.demo_data.Demo_Data_Controller.extendension_servers()
PUT             /admin/demo_data/basic_tarifs                   @utilities.demo_data.Demo_Data_Controller.basic_tariffs()
PUT             /admin/demo_data/producers                      @utilities.demo_data.Demo_Data_Controller.producers()
PUT             /admin/demo_data/type_of_board                  @utilities.demo_data.Demo_Data_Controller.type_of_board()
PUT             /admin/demo_data/test_boards                    @utilities.demo_data.Demo_Data_Controller.test_boards()
PUT             /admin/demo_data/c_program_configuration        @utilities.demo_data.Demo_Data_Controller.c_program_configuration()

PUT             /admin/demo_data/blocko_demo_data               @utilities.demo_data.Demo_Data_Controller.blocko_demo_data()
PUT             /admin/demo_data/grid_demo_data                 @utilities.demo_data.Demo_Data_Controller.grid_demo_data()

PUT             /admin/demo_data/person                         @utilities.demo_data.Demo_Data_Controller.person_test_user()
PUT             /admin/demo_data/person_project                 @utilities.demo_data.Demo_Data_Controller.person_project_and_programs()

PUT             /admin/demo_data/person_instancies              @utilities.demo_data.Demo_Data_Controller.person_instancies()



GET             /admin/test                                     @controllers.Controller_Dashboard.test()

# Test
GET             /admin/test/run/:cmd                            @utilities.test.TestLauncher.launch_test(cmd)
GET             /admin/test/log                                 @utilities.test.TestLog.get_test_log()
GET             /admin/test/log/clear                           @utilities.test.TestLog.clear_test_log()


# Tariff
POST            /admin/tariff                                   @controllers.Controller_Finance.tariff_general_create()
PUT             /admin/tariff                                   @controllers.Controller_Finance.tariff_general_edit()
PUT             /admin/tariff/deactive/:general_tariff_id       @controllers.Controller_Finance.tariff_general_deactivate(general_tariff_id)
PUT             /admin/tariff/active/:general_tariff_id         @controllers.Controller_Finance.tariff_general_activate(general_tariff_id)

POST            /admin/label/tariff                             @controllers.Controller_Finance.tariff_general_label_tariff_create()
POST            /admin/label/extension                          @controllers.Controller_Finance.tariff_general_label_extension_create()
PUT             /admin/label                                    @controllers.Controller_Finance.tariff_general_label_edit()
PUT             /admin/label/up/:label_id                       @controllers.Controller_Finance.tariff_general_label_edit_up(label_id)
PUT             /admin/label/down/:label_id                     @controllers.Controller_Finance.tariff_general_label_edit_down(label_id)
DELETE          /admin/label/:label_id                          @controllers.Controller_Finance.tariff_general_label_remove(label_id)

POST            /admin/extension                                @controllers.Controller_Finance.tariff_general_extension_create()
PUT             /admin/extension                                @controllers.Controller_Finance.tariff_general_extension_edit()
PUT             /admin/extension/up/:extension_id               @controllers.Controller_Finance.tariff_general_extension_edit_up(extension_id)
PUT             /admin/extension/down/:extension_id             @controllers.Controller_Finance.tariff_general_extension_edit_down(extension_id)
PUT             /admin/extension/deactive/:extension_id         @controllers.Controller_Finance.tariff_general_extension_deactivate(extension_id)
PUT             /admin/extension/active/:extension_id           @controllers.Controller_Finance.tariff_general_extension_activate(extension_id)
DELETE          /admin/extension/:extension_id                  @controllers.Controller_Finance.tariff_general_extension_delete(extension_id)

GET             /javascriptRoutes                               @controllers.Controller_Dashboard.javascriptRoutes()

# BUGS SERVISE PAGE
GET             /admin/bugs/deleteAll                      @controllers.Controller_Dashboard.loggy_remove_all_bugs()
GET             /admin/bug/remove/:id                      @controllers.Controller_Dashboard.loggy_remove_bug(id: String)
GET             /admin/bug/report/:id                      @controllers.Controller_Dashboard.loggy_report_bug_to_youtrack(id: String)

# WEBSOCKET SERVISE PAGE
GET             /admin/instance/ping/:id                   @controllers.Controller_Dashboard.ping_homer_instance(id: String)

GET             /admin/homer_server/ping/:id               @controllers.Controller_Dashboard.ping_homer_server(id)
GET             /admin/homer_server/disconnect/:id         @controllers.Controller_Dashboard.disconnect_blocko_server(id)

GET             /admin/compilator_server/ping/:id          @controllers.Controller_Dashboard.ping_compilation_server(id)
GET             /admin/compilator_server/disconnect/:id    @controllers.Controller_Dashboard.disconnect_compilation_server(id)

GET             /admin/becki/ping/:id/:token               @controllers.Controller_Dashboard.ping_becki(id, token)
GET             /admin/becki/disconnect/:id/:token         @controllers.Controller_Dashboard.disconnect_becki(id, token)




GET             /public/*file                               @controllers.Assets.versioned(path="/public", file: Asset)