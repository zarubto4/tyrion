# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /swagger.json                      controllers.ApiHelpController.getResources

#CORS
OPTIONS   /*all                                                         controllers.Controller_Security.optionLink(all)

### DEVELOPERS TEST ############ DEVELOPERS TEST ############### DEVELOPERS TEST ################ DEVELOPERS TEST ###################################################
POST      /test                                                         controllers.Controller_ZZZ_Tester.test1()
POST      /test2                                                        controllers.Controller_ZZZ_Tester.test2()
GET       /test3                                                        controllers.Controller_ZZZ_Tester.test3()
GET       /test4                                                        controllers.Controller_ZZZ_Tester.test4()
GET       /demodata                                                     utilities.demo_data.Utilities_Demo_data_Controller.all_for_becki()

### WEBSOCKET ############ WEBSOCKET ############### WEBSOCKET ################ WEBSOCKET ###########################################################################
###################################################################################f#################################################################################

GET       /websocket/portal/:token                                      controllers.Controller_WebSocket.portal(token)
GET       /websocket/homer/:token                                       controllers.Controller_WebSocket.homer(token)
GET       /websocket/compiler/:token                                    controllers.Controller_WebSocket.compiler(token)
GET       /websocket/access_token                                       controllers.Controller_WebSocket.get_Websocket_token()

#API - CoreClient ####################################################################################################################################################
###################################################################################f##################################################################################

#Login page
POST      /login                                                        controllers.Controller_Security.login()
POST      /logout                                                       controllers.Controller_Security.logout()

#GET       /login/facebook/*url                                          controllers.Controller_Security.facebook_oauth_get(url)
#GET       /login/github/*url                                            controllers.Controller_Security.github_oauth_get(url)

#POST      /facebook                                                     controllers.Controller_Security.Facebook()
#POST      /github                                                       controllers.Controller_Security.GitHub()

GET       /login/person                                                 controllers.Controller_Security.person_get_by_token()

### NOTIFICATION ############ NOTIFICATION ############### NOTIFICATION ################ NOTIFICATION ################################################################
######################################################################################################################################################################

GET       /notification/list/:page_number                               controllers.Controller_Notification.notification_getByFilter(page_number: Integer)
DELETE    /notification/:notification_id                                controllers.Controller_Notification.notification_delete(notification_id)

GET       /notification/unconfirmed                                     controllers.Controller_Notification.notifications_getUnconfirmed()
PUT       /notification/confirm/:notification_id                        controllers.Controller_Notification.notification_confirm(notification_id)

PUT       /notification/read                                            controllers.Controller_Notification.notification_read()

## Test - Private Api
POST      /test/notification/individual                                 utilities.notifications.NotificationTester.test_notifications()
POST      /test/notification/chain/:email                               utilities.notifications.NotificationTester.test_chain_notifications(email)

### PERSON ############ PERSON ############### PERSON ################ PERSON ################# PERSON ############ PERSON ###########################################
######################################################################################################################################################################

POST      /validate_entity                                              controllers.Controller_Person.something_validateProperty()

#Peron CRUD
POST      /person                                                       controllers.Controller_Person.person_create()
PUT       /person/:person_id                                            controllers.Controller_Person.person_update(person_id)
GET       /person/:person_id                                            controllers.Controller_Person.person_get(person_id)
DELETE    /person/:person_id                                            controllers.Controller_Person.person_delete(person_id)

POST      /person/authentication_email                                  controllers.Controller_Person.person_authenticationSendEmail()

GET       /person/connection/all                                        controllers.Controller_Person.person_getAllConnections()
DELETE    /person/connection/:connection_id                             controllers.Controller_Person.remove_Person_Connection(connection_id)

PUT       /person/deactivate/:person_id                                 controllers.Controller_Person.person_deactivate(person_id)
PUT       /person/activate/:person_id                                   controllers.Controller_Person.person_activate(person_id)
DELETE    /person/connections/:person_id                                controllers.Controller_Person.person_removeAllConnections(person_id)
PUT       /person/valid_email/:person_id                                controllers.Controller_Person.person_validEmail(person_id)

GET       /person/mail_authentication/:token                            controllers.Controller_Person.person_emailAuthentication(token)

POST      /person/change_property                                       controllers.Controller_Person.person_changeLoginProperty()
GET       /person/authorize_change/:token                               controllers.Controller_Person.person_authorizePropertyChange(token)

#Password recovery
POST      /person/password/recovery_mail                                controllers.Controller_Person.person_passwordRecoverySendEmail()
PUT       /person/password/recovery                                     controllers.Controller_Person.person_passwordRecovery()

#Personal Picture
PUT       /person/picture/upload                                        controllers.Controller_Person.person_uploadPicture()
PUT       /person/picture/remove                                        controllers.Controller_Person.person_removePicture()

### PERMISSION ############ PERMISSION ############### PERMISSION ################ PERMISSION ################# PERMISSION #####################################################
################################################################################################################################################################################

POST      /secure/rest_api_token_validation                             controllers.Controller_Security.get_status_request_token()

PUT       /secure/permission/person/:person_id/:permission_id           controllers.Controller_Permission.permission_person_add(person_id,permission_id)
DELETE    /secure/permission/person/:person_id/:permission_id           controllers.Controller_Permission.permission_person_remove(person_id,permission_id)
PUT       /secure/permission/:permission_id                             controllers.Controller_Permission.permission_edit(permission_id)

GET       /secure/permission/all                                        controllers.Controller_Permission.permission_get_all()


PUT       /secure/role/permission/:role_id                               controllers.Controller_Permission.permission_add_to_role(role_id)
DELETE    /secure/role/permission/:permission_id/:role_id               controllers.Controller_Permission.permission_remove_from_role(permission_id,role_id)

PUT       /secure/role/person/:role_id                                  controllers.Controller_Permission.role_add_person(role_id)
DELETE    /secure/role/person/:role_id/:person_id                       controllers.Controller_Permission.role_remove_person(role_id, person_id)

POST      /secure/role                                                  controllers.Controller_Permission.role_create()
DELETE    /secure/role/:role_id                                         controllers.Controller_Permission.role_delete(role_id)
PUT       /secure/role/:role_id                                         controllers.Controller_Permission.role_edit(role_id)
GET       /secure/role/:role_id                                         controllers.Controller_Permission.role_get(role_id)
GET       /secure/roles                                                 controllers.Controller_Permission.role_get_all()

GET       /secure/person/system_acces/:person_id                        controllers.Controller_Permission.system_access_get_everything(person_id)

### FINANCIAL ############ FINANCIAL ############### FINANCIAL ################ FINANCIAL ################# FINANCIAL ##########################################################
################################################################################################################################################################################

#Customer

POST      /company                                                      controllers.Controller_Finance.customer_create_company()
GET       /company                                                      controllers.Controller_Finance.customer_get_all()
PUT       /company/:customer_id                                         controllers.Controller_Finance.customer_update_company(customer_id)

POST      /employee                                                     controllers.Controller_Finance.customer_add_employee()
DELETE    /employee/:employee_id                                        controllers.Controller_Finance.customer_remove_employee(employee_id)

#CRUD Tarrifs
POST      /product                                                      controllers.Controller_Finance.product_create()
GET       /product/all                                                  controllers.Controller_Finance.product_getAll()
GET       /product/:product_id                                          controllers.Controller_Finance.product_get(product_id)
PUT       /product/deactivate/:product_id                               controllers.Controller_Finance.product_deactivate(product_id)
PUT       /product/activate/:product_id                                 controllers.Controller_Finance.product_activate(product_id)
PUT       /product/credit/:product_id                                   controllers.Controller_Finance.product_credit(product_id)
PUT       /product/terminate_ondemand/:product_id                       controllers.Controller_Finance.product_terminateOnDemand(product_id)
DELETE    /product/:product_id                                          controllers.Controller_Finance.product_delete(product_id)

POST      /product_extension/:product_id                                controllers.Controller_Finance.productExtension_create(product_id)
GET       /product_extension                                            controllers.Controller_Finance.productExtension_getAll()

GET       /product_extension/:extension_id                              controllers.Controller_Finance.productExtension_get(extension_id)
PUT       /product_extension/:extension_id                              controllers.Controller_Finance.productExtension_update(extension_id)
PUT       /product_extension/activate/:extension_id                     controllers.Controller_Finance.productExtension_activate(extension_id)
PUT       /product_extension/deactivate/:extension_id                   controllers.Controller_Finance.productExtension_deactivate(extension_id)
DELETE    /product_extension/:extension_id                              controllers.Controller_Finance.productExtension_delete(extension_id)



GET       /product/list/user_applicable                                 controllers.Controller_Finance.product_getActive()
POST      /product/details/:product_id                                  controllers.Controller_Finance.paymentDetails_create(product_id)
PUT       /product/details/:payment_details_id                          controllers.Controller_Finance.paymentDetails_update(payment_details_id)
PUT       /product/general/:product_id                                  controllers.Controller_Finance.product_update(product_id)

#GoPay
GET       /go_pay/notification                                          utilities.financial.goPay.GoPay.payment_notification(id: Long)
GET       /go_pay/return                                                utilities.financial.goPay.GoPay.payment_return(id: Long)

#Fakturoid
GET       /invoice/:invoice_id                                          controllers.Controller_Finance.invoice_get(invoice_id)
GET       /invoice/pdf/:kind/:invoice_id                                controllers.Controller_Finance.invoice_getPdf(kind, invoice_id)
POST      /invoice/reimbursement/:invoice_id                            controllers.Controller_Finance.invoice_reimbursement(invoice_id)
POST      /invoice/resend/:invoice_id                                   controllers.Controller_Finance.invoice_resend(invoice_id)
POST      /fakturoid/callback                                           utilities.financial.fakturoid.Fakturoid.fakturoid_callback()

#Obsluha pouze pro Byzance zaměstnance
PUT       /invoice/set_pay/:invoice_id                                  controllers.Controller_Finance.invoice_set_as_paid(invoice_id)
PUT       /invoice/send_remainder/:invoice_id                           controllers.Controller_Finance.invoice_reminder(invoice_id)
DELETE    /invoice/:invoice_id                                          controllers.Controller_Finance.invoice_delete(invoice_id)
PUT       /invoice/refund/:invoice_id                                   utilities.financial.goPay.GoPay.payment_refund(invoice_id)

#Tarrifs (Tvorba startovacích balíčků služeb)
GET       /tariff                                                       controllers.Controller_Finance.tariff_getAll()
POST      /admin/tariff                                                 controllers.Controller_Finance.tariff_create()
PUT       /admin/tariff/edit/:tariff_id                                 controllers.Controller_Finance.tariff_edit(tariff_id)
GET       /admin/tariff/get/:tariff_id                                  controllers.Controller_Finance.tariff_get(tariff_id)
PUT       /admin/tariff/deactive/:tariff_id                             controllers.Controller_Finance.tariff_deactivate(tariff_id)
PUT       /admin/tariff/active/:tariff_id                               controllers.Controller_Finance.tariff_activate(tariff_id)
PUT       /admin/tariff/up/:tariff_id                                   controllers.Controller_Finance.tariff_up(tariff_id)
PUT       /admin/tariff/down/:tariff_id                                 controllers.Controller_Finance.tariff_down(tariff_id)
DELETE    /admin/tariff/:tariff_id                                      controllers.Controller_Finance.tariff_delete(tariff_id)
GET       /admin/tariff/types                                           controllers.Controller_Finance.tariff_getAllTypes()

POST      /admin/tariff_extension/:tariff_id                            controllers.Controller_Finance.tariffExtension_create(tariff_id)
PUT       /admin/tariff_extension/:extension_id                         controllers.Controller_Finance.tariffExtension_update(extension_id)
PUT       /admin/tariff_extension/up/:extension_id                      controllers.Controller_Finance.tariffExtension_up(extension_id)
PUT       /admin/tariff_extension/down/:extension_id                    controllers.Controller_Finance.tariffExtension_down(extension_id)
PUT       /admin/tariff_extension/deactive/:extension_id                controllers.Controller_Finance.tariffExtension_deactivate(extension_id)
PUT       /admin/tariff_extension/active/:extension_id                  controllers.Controller_Finance.tariffExtension_activate(extension_id)
DELETE    /admin/tariff_extension/:extension_id                         controllers.Controller_Finance.tariffExtension_delete(extension_id)


### PROJECT ############ PROJECT ############### PROJECT ################ PROJECT ################# PROJECT ####################################################################
################################################################################################################################################################################

#Project
POST      /project                                                      controllers.Controller_Project.project_create()
PUT       /project/:project_id                                          controllers.Controller_Project.project_update(project_id)
GET       /project/:project_id                                          controllers.Controller_Project.project_get(project_id)
GET       /project                                                      controllers.Controller_Project.project_getByUser
DELETE    /project/:project_id                                          controllers.Controller_Project.project_delete(project_id)
PUT       /project/invite/:project_id                                   controllers.Controller_Project.project_invite(project_id)
PUT       /project/remove_participant/:project_id                       controllers.Controller_Project.project_removeParticipant(project_id)
PUT       /project/change_participant_state/:project_id                 controllers.Controller_Project.project_changeParticipantStatus(project_id)
PUT       /project/tags/add                                             controllers.Controller_Project.project_addTags()

#Program
POST      /b_program/version/:b_program_id                              controllers.Controller_Blocko.bProgramVersion_create(b_program_id)
PUT       /b_program/version/:version_id                                controllers.Controller_Blocko.bProgramVersion_update(version_id)
GET       /b_program/version/:version_id                                controllers.Controller_Blocko.bProgramVersion_get(version_id)
DELETE    /b_program/version/:version_id                                controllers.Controller_Blocko.bProgramVersion_delete(version_id)

POST      /b_program/:project_id                                        controllers.Controller_Blocko.bProgram_create(project_id)
GET       /b_program/:b_program_id                                      controllers.Controller_Blocko.bProgram_get(b_program_id)
PUT       /b_program/:b_program_id                                      controllers.Controller_Blocko.bProgram_update(b_program_id)
DELETE    /b_program/:b_program_id                                      controllers.Controller_Blocko.bProgram_delete(b_program_id)
PUT       /b_program/list/:page_number                                  controllers.Controller_Blocko.bProgram_getByFilter(page_number:Int )

#Instance
POST      /instance                                                     controllers.Controller_Blocko.instance_create
GET       /instance/:instance_id                                        controllers.Controller_Blocko.instance_get(instance_id)
PUT       /instance/:instance_id                                        controllers.Controller_Blocko.instance_update(instance_id)

GET       /instance/project/:project_id                                 controllers.Controller_Blocko.get_b_program_instance_under_project(project_id)
PUT       /instance/filter/:page_number                                 controllers.Controller_Blocko.get_b_program_instance_by_filter(page_number:Int)
PUT       /instance/grid_app                                            controllers.Controller_Blocko.instance_change_settings_grid_App()



#InstanceSnapshot
POST      /instance/snapshot                                            controllers.Controller_Blocko.instanceSnapshot_create
GET       /instance/snapshot/:snapshot_id                               controllers.Controller_Blocko.instanceSnapshot_get(snapshot_id)
PUT       /instance/snapshot/deploy                                     controllers.Controller_Blocko.instanceSnapshot_deploy()
PUT       /instance/snapshot/shutdown/:snapshot_id                      controllers.Controller_Blocko.instanceSnapshot_shutdown(snapshot_id)

PUT       /instance/start_or_shut_down/:instance_id                     controllers.Controller_Blocko.instance_start_or_shut_down(instance_id)

#Blocks
POST      /block                                                        controllers.Controller_Blocko.block_create()
POST      /block/clone                                                  controllers.Controller_Blocko.block_clone()
PUT       /block/order/up/:blocko_block_id                              controllers.Controller_Blocko.block_orderUp(blocko_block_id)
PUT       /block/order/down/:blocko_block_id                            controllers.Controller_Blocko.block_orderDown(blocko_block_id)
PUT       /block/:blocko_block_id                                       controllers.Controller_Blocko.block_update(blocko_block_id)
GET       /block/:blocko_block_id                                       controllers.Controller_Blocko.block_get(blocko_block_id)
DELETE    /block/:blocko_block_id                                       controllers.Controller_Blocko.block_delete(blocko_block_id)
PUT       /block/list/:page_number                                      controllers.Controller_Blocko.block_getByFilter(page_number:Int )
PUT       /admin/block/deactive/:blocko_block_id                        controllers.Controller_Blocko.block_deactivate(blocko_block_id)
PUT       /admin/block/active/:blocko_block_id                          controllers.Controller_Blocko.block_activate(blocko_block_id)
PUT       /admin/block/approval                                         controllers.Controller_Blocko.block_public_response()

POST      /block/version/:blocko_block_id                               controllers.Controller_Blocko.blockVersion_create(blocko_block_id)
PUT       /block/version/:blocko_block_version_id                       controllers.Controller_Blocko.blockVersion_update(blocko_block_version_id)
PUT       /block/version/make_public/:blocko_block_version_id           controllers.Controller_Blocko.blockVersion_makePublic(blocko_block_version_id)
GET       /block/version/:blocko_block_version_id                       controllers.Controller_Blocko.blockVersion_get(blocko_block_version_id)
DELETE    /block/version/:blocko_block_version_id                       controllers.Controller_Blocko.blockVersion_delete(blocko_block_version_id)
PUT       /admin/block/version/set_main/:blocko_block_version_id        controllers.Controller_Blocko.blockVersion_setMain(blocko_block_version_id)

#Blocko General
PUT       /blocko/disapprove                                            controllers.Controller_Blocko.blockoDisapprove()
PUT       /blocko/approval                                              controllers.Controller_Blocko.blockoApproval()

#Board on Project
GET       /blocko/all_details/:project_id                               controllers.Controller_Board.board_allDetailsForBlocko(project_id)

### EXTERNAL SERVER ############ EXTERNAL SERVER ############### EXTERNAL SERVER ################ EXTERNAL SERVER ##########################################################################
################################################################################################################################################################################

#Public Clasic Rest-Api

POST      /homer_server                                                 controllers.Controller_ExternalServer.homer_server_create()

PUT       /homer_server/set_backup/:server_id                           controllers.Controller_ExternalServer.homer_server_set_backup_server(server_id)
PUT       /homer_server/set_main/:server_id                             controllers.Controller_ExternalServer.homer_server_set_main_server(server_id)

GET       /homer_server/all                                             controllers.Controller_ExternalServer.homer_server_get_all()
DELETE    /homer_server/server/:server_id                               controllers.Controller_ExternalServer.homer_server_delete(server_id)
PUT       /homer_server/server/edit/:server_id                          controllers.Controller_ExternalServer.homer_server_edit(server_id)
GET       /homer_server/server/:server_id                               controllers.Controller_ExternalServer.homer_server_get(server_id)

#Super Private API (Secured by Server Hash-token)
GET       /cloud/homer_server/file/b_program/:b_program_version_id      controllers.Controller_ExternalServer.cloud_file_get_b_program_version(b_program_version_id)
GET       /cloud/homer_server/file/c_program/:compilation_id            controllers.Controller_ExternalServer.cloud_file_get_c_program_compilation(compilation_id)
GET       /cloud/homer_server/file/bootloader/:bootloader_version_id    controllers.Controller_ExternalServer.cloud_file_get_bootloader(bootloader_version_id)

#Compilation Server
POST      /compilation_server                                           controllers.Controller_ExternalServer.compilation_server_create()
PUT       /compilation_server/:server_id                                controllers.Controller_ExternalServer.compilation_server_edit(server_id)
GET       /compilation_server                                           controllers.Controller_ExternalServer.compilation_server_get_all()
GET       /compilation_server/:server_id                                controllers.Controller_ExternalServer.compilation_server_get(server_id)
DELETE    /compilation_server/:server_id                                controllers.Controller_ExternalServer.compilation_server_delete(server_id)


### ACTUALIZATION PROCEDURE ############ ACTUALIZATION PROCEDURE ############### ACTUALIZATION PROCEDURE ################ ACTUALIZATION PROCEDURE ##############################
################################################################################################################################################################################

#Actualization Procedure
PUT       /actualization_procedure/filter/:page_number                  controllers.Controller_Actualization.get_Actualization_Procedures_by_filter(page_number: Int)
GET       /actualization_procedure/object/:actualization_procedure_id   controllers.Controller_Actualization.get_Actualization_Procedure(actualization_procedure_id)
POST      /actualization_procedure/make                                 controllers.Controller_Actualization.make_actualization_procedure()
PUT       /actualization_procedure/cancel/:actualization_procedure_id   controllers.Controller_Actualization.canceled_procedure(actualization_procedure_id)

#Task
PUT       /actualization_task/filter/:page_number                       controllers.Controller_Actualization.get_Actualization_CProgramUpdatePlan_by_filter(page_number: Int)
PUT       /actualization_task/object/:task_id                           controllers.Controller_Actualization.get_Actualization_CProgramUpdatePlan(task_id)

### COMPILATION & LIBRARIES ############ COMPILATION & LIBRARIES ############### COMPILATION & LIBRARIES ################ COMPILATION & LIBRARIES ##############################
################################################################################################################################################################################

#C_Program
POST      /c_program/create                                             controllers.Controller_Code.c_program_create()
PUT       /c_program/clone                                              controllers.Controller_Code.c_program_clone()
GET       /c_program/get/:c_program_id                                  controllers.Controller_Code.c_program_get(c_program_id)
PUT       /c_program/filter/:page_number                                controllers.Controller_Code.c_program_getByFilter(page_number: Int)

PUT       /c_program/:c_program_id                                      controllers.Controller_Code.c_program_edit(c_program_id)
DELETE    /c_program/:c_program_id                                      controllers.Controller_Code.c_program_delete(c_program_id)

POST      /c_program/version/create/:c_program_id                       controllers.Controller_Code.c_program_version_create(c_program_id)
GET       /c_program/version/get/:version_id                            controllers.Controller_Code.c_program_version_get(version_id)
PUT       /c_program/version/edit/:version_id                           controllers.Controller_Code.c_program_version_edit(version_id)
DELETE    /c_program/version/delete/:version_id                         controllers.Controller_Code.c_program_version_delete(version_id)

POST      /c_program/version/compile                                    controllers.Controller_Code.compile_c_program_code()
PUT       /c_program/version/compile/:version_id                        controllers.Controller_Code.compile_c_program_version(version_id)

PUT       /c_program/default/mark/:version_id                           controllers.Controller_Code.c_program_markScheme(version_id)

#C_Program/Public
PUT       /c_program/version_for_aprove/approve_decision                controllers.Controller_Code.c_program_public_response()
PUT       /c_program/version/make_public/:version_id                    controllers.Controller_Code.c_program_version_make_public(version_id)

#Libraries
POST      /library                                                      controllers.Controller_Library.library_create()
PUT       /library/clone                                                controllers.Controller_Library.library_clone()
GET       /library/:library_id                                          controllers.Controller_Library.library_get(library_id)
PUT       /library/:library_id                                          controllers.Controller_Library.library_edit(library_id)
PUT       /library/filter/:page_number                                  controllers.Controller_Library.library_getByFilter(page_number: Int)
DELETE    /library/:library_id                                          controllers.Controller_Library.library_delete(library_id)

POST      /library/version/:library_id                                  controllers.Controller_Library.library_version_create(library_id)
GET       /library/version/:version_id                                  controllers.Controller_Library.library_version_get(version_id)
PUT       /library/version/:version_id                                  controllers.Controller_Library.library_version_edit(version_id)
DELETE    /library/version/:version_id                                  controllers.Controller_Library.library_version_delete(version_id)

#Libraries/Public
PUT       /library/version_for_aprove/approve_decision                  controllers.Controller_Library.library_public_response()
PUT       /library/version/make_public/:version_id                      controllers.Controller_Library.library_version_make_public(version_id)


#Actualization
GET       /board/ide_upload_hardware/:project_id                        controllers.Controller_Board.board_getForFastUpload(project_id)
PUT       /c_program/version/upload                                     controllers.Controller_Board.uploadCompilationToBoard()
#POST     /admin_binary/:instance_id/:board_id/:build_id/:command       controllers.Controller_CompilationLibraries.uploadBinaryFileToBoard_fake_board(instance_id: String, board_id: String, build_id: String, command: String)

#Processor
POST      /processor                                                    controllers.Controller_Board.processor_create()
GET       /processor/:processor_id                                      controllers.Controller_Board.processor_get(processor_id)
GET       /processor                                                    controllers.Controller_Board.processor_getAll()
PUT       /processor/:processor_id                                      controllers.Controller_Board.processor_edit(processor_id)
DELETE    /processor/:processor_id                                      controllers.Controller_Board.processor_delete(processor_id)

#Board
POST      /board/manual_registration                                    controllers.Controller_Board.board_create_manual()
POST      /board/automatic_registration                                 controllers.Controller_Board.board_create_garfield()
PUT       /board/userDescription/:board_id                              controllers.Controller_Board.board_update_description(board_id)
PUT       /board/parameters/:board_id                                   controllers.Controller_Board.board_update_parameters(board_id)
PUT       /board/backup                                                 controllers.Controller_Board.board_updateBackup()

PUT       /board/registration                                           controllers.Controller_Board.board_connectProject()
PUT       /board/filter/:page_number                                    controllers.Controller_Board.board_getByFilter(page_number: Int)
GET       /board/check/:hash_for_adding                                 controllers.Controller_Board.board_check(hash_for_adding)
GET       /board/:board_id                                              controllers.Controller_Board.board_get(board_id)
DELETE    /board/deactivateBoard/:board_id                              controllers.Controller_Board.board_deactivate(board_id)

DELETE    /board/:board_id                                              controllers.Controller_Board.board_disconnectProject(board_id)
PUT       /board/picture/upload/:board_id                               controllers.Controller_Board.board_uploadPicture(board_id)
PUT       /board/picture/remove/:board_id                               controllers.Controller_Board.board_removePicture(board_id)
PUT       /board/command                                                controllers.Controller_Board.board_command_execution()
PUT       /board/mqtt_password_reset/:board_id                          controllers.Controller_Board.board_generate_new_password(board_id)
PUT       /board/change_server/:board_id                                controllers.Controller_Board.board_redirect_to_server(board_id)


#Board_Group
POST      /board_group                                                  controllers.Controller_Board.board_group_create()
PUT       /board_group/group/:board_group_id                            controllers.Controller_Board.board_group_update(board_group_id)
PUT       /board_group/devices                                          controllers.Controller_Board.board_group_update_device_list()
GET       /board_group/project/:project_id                              controllers.Controller_Board.board_group_get_list_project(project_id)
GET       /board_group/individual/:board_group_id                       controllers.Controller_Board.board_group_get(board_group_id)
DELETE    /board_group/:board_group_id                                  controllers.Controller_Board.board_group_delete(board_group_id)

#Producer
POST      /producer                                                     controllers.Controller_Board.producer_create()
PUT       /producer/:producer_id                                        controllers.Controller_Board.producer_update(producer_id)
GET       /producer/all                                                 controllers.Controller_Board.producer_getAll()
GET       /producer/:producer_id                                        controllers.Controller_Board.producer_get(producer_id)
DELETE    /producer/:producer_id                                        controllers.Controller_Board.producer_delete(producer_id)

#TypeOfBoard
POST      /typeOfBoard                                                  controllers.Controller_Board.typeOfBoard_create()
PUT       /typeOfBoard/picture_up/:type_of_board_id                     controllers.Controller_Board.typeOfBoard_uploadPicture(type_of_board_id)
PUT       /typeOfBoard/:type_of_board_id                                controllers.Controller_Board.typeOfBoard_update(type_of_board_id)
DELETE    /typeOfBoard/:type_of_board_id                                controllers.Controller_Board.typeOfBoard_delete(type_of_board_id)
GET       /typeOfBoard/all                                              controllers.Controller_Board.typeOfBoard_getAll()
GET       /typeOfBoard/:type_of_board_id                                controllers.Controller_Board.typeOfBoard_get(type_of_board_id)

POST      /typeOfBoardBatch/:type_of_board_id                           controllers.Controller_Board.typeOfBoardBatch_create(type_of_board_id)
PUT       /typeOfBoardBatch/:type_of_board_batch_id                     controllers.Controller_Board.typeOfBoardBatch_edit(type_of_board_batch_id)
DELETE    /typeOfBoardBatch/:type_of_board_batch_id                     controllers.Controller_Board.typeOfBoardBatch_delete(type_of_board_batch_id)

#Bootloader
POST      /bootloader/:type_of_board_id                                 controllers.Controller_Board.bootLoader_create(type_of_board_id)
PUT       /bootloader/file/:boot_loader_id                              controllers.Controller_Board.bootLoader_uploadFile(boot_loader_id)
PUT       /bootloader/mark/bootloader/:boot_loader_id                   controllers.Controller_Board.bootLoader_markAsMain(boot_loader_id)
PUT       /bootloader/update_device_list                                controllers.Controller_Board.bootLoader_manualUpdate()
PUT       /bootloader/:boot_loader_id                                   controllers.Controller_Board.bootLoader_update(boot_loader_id)
DELETE    /bootloader/:boot_loader_id                                   controllers.Controller_Board.bootLoader_delete(boot_loader_id)

#File / Skryto ve swaggeru
GET       /file/bootloader/:bootloader_id                               controllers.Controller_Board.fileRecord_get_bootLoader(bootloader_id)
GET       /file/cprogram_version/:version_id                            controllers.Controller_Board.fileRecord_get_firmware(version_id)

### GRIDS ############ GRIDS ############### GRIDS ################ GRIDS ######################################################################################################
################################################################################################################################################################################

#M Project
GET       /m_project/interface_collection/:m_project_id                 controllers.Controller_Grid.get_M_Project_Interface_collection(m_project_id)

POST      /m_project/:project_id                                        controllers.Controller_Grid.new_M_Project(project_id)
GET       /m_project/:m_project_id                                      controllers.Controller_Grid.get_M_Project(m_project_id)
PUT       /m_project/:m_project_id                                      controllers.Controller_Grid.edit_M_Project(m_project_id)
DELETE    /m_project/:m_project_id                                      controllers.Controller_Grid.remove_M_Project(m_project_id)

#M Program
POST      /m_program/version/:m_program_id                              controllers.Controller_Grid.new_M_Program_version(m_program_id)
PUT       /m_program/version/:m_program_version_id                      controllers.Controller_Grid.edit_M_Program_version(m_program_version_id)
GET       /m_program/version/:m_program_version_id                      controllers.Controller_Grid.get_M_Program_version(m_program_version_id)
DELETE    /m_program/version/:m_program_version_id                      controllers.Controller_Grid.remove_M_Program_version(m_program_version_id)

POST      /m_program/:m_project_id                                      controllers.Controller_Grid.new_M_Program(m_project_id)
GET       /m_program/:m_progrm_id                                       controllers.Controller_Grid.get_M_Program(m_progrm_id)
PUT       /m_program/:m_progrm_id                                       controllers.Controller_Grid.edit_M_Program(m_progrm_id)
DELETE    /m_program/:m_progrm_id                                       controllers.Controller_Grid.remove_M_Program(m_progrm_id)


# Terminals Aps
GET       /m_program/app/token/*qr_token                                controllers.Controller_Grid.get_M_Program_byQR_Token_forMobile(qr_token)

PUT       /websocket/terminal/identificator                             controllers.Controller_Grid.get_identificator()
PUT       /websocket/terminal/identificator/:terminal_id                controllers.Controller_Grid.check_identifiactor(terminal_id)

# Wigets
POST      /widget                                                       controllers.Controller_Grid.widget_create()
PUT       /widget/order/up/:grid_widget_id                              controllers.Controller_Grid.widget_order_up(grid_widget_id)
PUT       /widget/order/down/:grid_widget_id                            controllers.Controller_Grid.widget_order_down(grid_widget_id)
POST      /widget/make_clone                                            controllers.Controller_Grid.widget_clone()

PUT       /widget/:grid_widget_id                                       controllers.Controller_Grid.widget_update(grid_widget_id)
GET       /widget/:grid_widget_id                                       controllers.Controller_Grid.widget_get(grid_widget_id)
DELETE    /widget/:grid_widget_id                                       controllers.Controller_Grid.widget_delete(grid_widget_id)
PUT       /widget/list/:page_number                                     controllers.Controller_Grid.widget_getByFilter(page_number: Int)
PUT       /admin/widget/deactive/:grid_widget_id                        controllers.Controller_Grid.widget_deactivate(grid_widget_id)
PUT       /admin/widget/active/:grid_widget_id                          controllers.Controller_Grid.widget_activate(grid_widget_id)
PUT       /admin/widget/approval                                        controllers.Controller_Grid.widget_public_response()

POST      /widget/version/:grid_widget_id                               controllers.Controller_Grid.widgetVersion_create(grid_widget_id)
PUT       /widget/version/:grid_widget_version_id                       controllers.Controller_Grid.widgetVersion_edit(grid_widget_version_id)
PUT       /widget/version/make_public/:grid_widget_version_id           controllers.Controller_Grid.widgetVersion_version_make_public(grid_widget_version_id)
GET       /widget/version/all/:grid_widget_id                           controllers.Controller_Grid.widgetVersion_getAll(grid_widget_id)
GET       /widget/version/:grid_widget_version_id                       controllers.Controller_Grid.widgetVersion_get(grid_widget_version_id)
DELETE    /widget/version/:grid_widget_version_id                       controllers.Controller_Grid.widgetVersion_delete(grid_widget_version_id)
PUT       /admin/widget/version/set_main/:grid_widget_id                controllers.Controller_Grid.widgetVersion_set_main(grid_widget_id)

### GARFIELD ############ GARFIELD ############### GARFIELD ################ GARFIELD ##########################################################################################
################################################################################################################################################################################

POST      /garfiled                                                      controllers.Controller_Garfield.create_Garfield()
GET       /garfield                                                      controllers.Controller_Garfield.get_Garfield_list()
PUT       /garfiled/:garfield_id                                         controllers.Controller_Garfield.edit_Garfield(garfield_id)
DELETE    /garfiled/:garfield_id                                         controllers.Controller_Garfield.remove_Garfield(garfield_id)
GET       /garfiled/:garfield_id                                         controllers.Controller_Garfield.get_Garfield(garfield_id)
GET       /admin/garfiled-synchronize                                    utilities.hardware_registration_auhtority.Hardware_Registration_Authority.synchronize_script()
GET       /admin/garfiled-print-labes/:board_id                          controllers.Controller_Garfield.print_label(board_id)

GET       /printer/printer/:garfield_id/:printer_id                      controllers.Controller_Garfield.online_state_Printer(garfield_id, printer_id: Integer)
POST      /printer/test/:garfield_id/:printer_id                         controllers.Controller_Garfield.print_test_Printer(garfield_id, printer_id: Integer)


### TOOLS ############ TOOLS ############### TOOLS ################ TOOLS ######################################################################################################
################################################################################################################################################################################

# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                                 controllers.Assets.at(path="/public", file)
GET       /assets/*file                                                 controllers.Assets.versioned(path="/public", file: Asset)
GET       /.well-known/acme-challenge/:file                             utilities.certificate.CertificateCheck.check(file)


### PUBLIC - ADMIN ############ PUBLIC  - ADMIN ############### PUBLIC  - ADMIN ################ PUBLIC  - ADMIN ################################################################
###################################################################################f#############################################################################################

# Basic Page Requests

GET       /admin/report/dashboard                                       controllers.Controller_Admin.report_admin_dashboard()

# Test
#POST      /admin/test                                                   utilities.test.Controller_Test.test_run()
#GET       /admin/test/run/:cmd                                          utilities.test.TestLauncher.launch_test(cmd)
#GET       /admin/test/log                                               utilities.test.TestLog.get_test_log()
#GET       /admin/test/log/clear                                         utilities.test.TestLog.clear_test_log()

# BUGS SERVISE PAGE
GET       /admin/bug                                                    controllers.Controller_Admin.serverError_getAll()
GET       /admin/bug/:bug_id                                            controllers.Controller_Admin.serverError_get(bug_id)
DELETE    /admin/bug                                                    controllers.Controller_Admin.serverError_deleteAll()
DELETE    /admin/bug/:bug_id                                            controllers.Controller_Admin.serverError_delete(bug_id)
PUT       /admin/bug/report/:bug_id                                     controllers.Controller_Admin.serverError_report(bug_id)

POST      /admin/update                                                 controllers.Controller_Admin.server_scheduleUpdate()
GET       /admin/update                                                 controllers.Controller_Admin.server_getUpdates()

