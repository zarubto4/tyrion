# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page - for testing connected device
# Home page

#CORS
OPTIONS        /*all                                        @controllers.SecurityController.optionLink(all)

### Testovací ############ Testovací ############### Testovací ################ Testovací ###########################################################################
###################################################################################f#################################################################################

GET             /test1                                      @controllers.WikyController.test1()
#GET            /test2                                      @controllers.WikyController.test2()


### WEBSOCKET ############ WEBSOCKET ############### WEBSOCKET ################ WEBSOCKET ###########################################################################
###################################################################################f#################################################################################

GET              /websocket/homer/:mac_adress                  @controllers.WebSocketController.homer_connection(mac_adress)
GET              /websocket/blocko_server/:identificator       @controllers.WebSocketController.homer_cloud_server_connection(identificator)
GET              /websocket/compilation_server/:identificator  @controllers.WebSocketController.compilator_server_connection(identificator)
GET              /websocket/becki/:secure_token                @controllers.WebSocketController.becki_website_connection(secure_token)
GET              /websocket/access_token                       @controllers.WebSocketController.get_Websocket_token()



#API - CoreClient ####################################################################################################################################################
###################################################################################f##################################################################################

#Login page
POST            /coreClient/person/permission/login         @controllers.SecurityController.login()
POST            /coreClient/person/permission/logout        @controllers.SecurityController.logout()

GET             /login/facebook                             @controllers.SecurityController.Facebook(return_link)
GET             /login/twitter                              @controllers.SecurityController.Twitter(return_link)
GET             /login/github                               @controllers.SecurityController.GitHub(return_link)
GET             /login/vkontakte                            @controllers.SecurityController.Vkontakte(return_link)

GET             /login/person                               @controllers.SecurityController.getPersonByToken

GET             /login/facebook/*url                        @controllers.SecurityController.GET_facebook_oauth(url)
GET             /login/github/*url                          @controllers.SecurityController.GET_github_oauth(url)

### NOTIFICATION ############ NOTIFICATION ############### NOTIFICATION ################ NOTIFICATION ################################################################
######################################################################################################################################################################

GET             /notification/list/:page_number             @controllers.NotificationController.get_notification_page(page_number: Integer)
DELETE          /notification/:notification_id              @controllers.NotificationController.delete_notification(notification_id)

GET             /notification/unconfirmed                   @controllers.NotificationController.get_unconfirmed_notifications()
PUT             /notification/confirm/:notification_id      @controllers.NotificationController.notification_confirm(notification_id)

PUT             /notification/read                          @controllers.NotificationController.mark_as_read_notification()

POST            /notification/test/:mail                    @controllers.NotificationController.test_notifications(mail)

### PERSON ############ PERSON ############### PERSON ################ PERSON ################# PERSON ############ PERSON ###########################################
######################################################################################################################################################################

#Peron CRUD
POST           /coreClient/person/person                                    @controllers.PersonController.registred_Person()
PUT            /coreClient/person/person/:person_id                         @controllers.PersonController.edit_Person_Information(person_id)
GET            /coreClient/person/person/all                                @controllers.PersonController.get_Person_all()
GET            /coreClient/person/person/:person_id                         @controllers.PersonController.get_Person(person_id)

POST           /coreClient/person/validate_entity                           @controllers.PersonController.validate_Entity()


GET            /coreClient/connections                                      @controllers.PersonController.get_Person_Connections()
DELETE         /coreClient/connection/:connection_id                        @controllers.PersonController.remove_Person_Connection(connection_id)


DELETE         /coreClient/person/person/remove/:id                         @controllers.PersonController.deletePerson(id: String)

PUT            /coreClient/person/person/deactivate/:person_id              @controllers.PersonController.deactivatePerson(person_id)
PUT            /coreClient/person/person/activate/:person_id                @controllers.PersonController.activatePerson(person_id)
DELETE         /coreClient/person/person/clean_all_tokens/:person_id        @controllers.PersonController.delete_all_tokens(person_id)
PUT            /coreClient/person/person/valid_email/:person_id             @controllers.PersonController.valid_email_Person(person_id)

GET            /mail_person_authentication/:mail/:token                     @controllers.PersonController.email_Person_authentitaction(mail,token)

POST           /coreClient/person/changeProperty                            @controllers.PersonController.changePersonLoginProperty()
GET            /coreClient/authorize_change/:token                          @controllers.PersonController.authorizePropertyChange(token)

#Password recovery
POST           /coreClient/mail_person_password_recovery                    @controllers.PersonController.sendPasswordRecoveryEmail()
PUT            /coreClient/person_password_recovery                         @controllers.PersonController.personPasswordRecovery()

#Personal Picture
PUT            /coreClient/person/uploadPicture                             @controllers.PersonController.uploadPersonPicture()
PUT            /coreClient/person/removePicture                             @controllers.PersonController.removePersonPicture()

### PERMISSION ############ PERMISSION ############### PERMISSION ################ PERMISSION ################# PERMISSION #####################################################
################################################################################################################################################################################

PUT            /secure/permission/person/:person_id/:permission_id                          @controllers.PermissionController.add_Permission_Person(person_id,permission_id)
DELETE         /secure/permission/person/:person_id/:permission_id                          @controllers.PermissionController.remove_Permission_Person(person_id,permission_id)
PUT            /secure/permission/:permission_id                                            @controllers.PermissionController.edit_permission_desciption(permission_id)

GET            /secure/permission/all                                                       @controllers.PermissionController.get_Permission_All()
GET            /secure/role/all                                                             @controllers.PermissionController.get_Role_All()

PUT            /secure/role/permission/:permission_id/:role_id                              @controllers.PermissionController.add_Permission_to_Role(permission_id,role_id)
DELETE         /secure/role/permission/:permission_id/:role_id                              @controllers.PermissionController.remove_Permission_from_Role(permission_id,role_id)

PUT            /secure/role/person/:mail/:role_id                                           @controllers.PermissionController.add_Role_Person(mail,role_id)
DELETE         /secure/role/person/:person_id/:role_id                                      @controllers.PermissionController.remove_Role_Person(person_id,role_id)

POST           /secure/role                                                                 @controllers.PermissionController.new_Role()
DELETE         /secure/role/:role_id                                                        @controllers.PermissionController.delete_Role(role_id)
PUT            /secure/role/:role_id                                                        @controllers.PermissionController.edit_Role(role_id)

GET            /secure/person/system_acces/:person_id                                       @controllers.PermissionController.get_System_Acces(person_id)

### OVERFLOW ############ OVERFLOW ############### OVERFLOW ################ OVERFLOW ################# OVERFLOW ###############################################################
################################################################################################################################################################################

POST           /overflow/post                                                               @controllers.OverFlowController.new_Post()
GET            /overflow/post/:post_id                                                      @controllers.OverFlowController.get_Post(post_id)
DELETE         /overflow/post/:post_id                                                      @controllers.OverFlowController.delete_Post(post_id)
PUT            /overflow/post/:post_id                                                      @controllers.OverFlowController.edit_Post(post_id)
POST           /overflow/filter/:page_number                                                @controllers.OverFlowController.get_Post_ByFilter(page_number: Integer)

POST           /overflow/typeOfPost                                                         @controllers.OverFlowController.new_TypeOfPost()
GET            /overflow/typeOfPost/all                                                     @controllers.OverFlowController.get_TypeOfPost_all()
GET            /overflow/typeOfPost/:type_of_post_id                                        @controllers.OverFlowController.get_TypeOfPost(type_of_post_id)
PUT            /overflow/typeOfPost/:type_of_post_id                                        @controllers.OverFlowController.edit_TypeOfPost(type_of_post_id)
DELETE         /overflow/typeOfPost/:type_of_post_id                                        @controllers.OverFlowController.delete_TypeOfPost(type_of_post_id)

POST           /overflow/typeOfConfirm                                                      @controllers.OverFlowController.new_TypeOfConfirms()
PUT            /overflow/typeOfConfirm/:type_of_confirm_id                                  @controllers.OverFlowController.edit_TypeOfConfirms(type_of_confirm_id)
GET            /overflow/typeOfConfirm/all                                                  @controllers.OverFlowController.get_TypeOfConfirms_all()
GET            /overflow/typeOfConfirm/:type_of_confirm_id                                  @controllers.OverFlowController.get_TypeOfConfirms(type_of_confirm_id)
DELETE         /overflow/typeOfConfirm/:type_of_confirm_id                                  @controllers.OverFlowController.delete_TypeOfConfirms(type_of_confirm_id)

PUT            /overflow/typeOfConfirm/:post_id/:type_of_confirm_id                         @controllers.OverFlowController.set_TypeOfConfirm_to_Post(post_id, type_of_confirm_id)
DELETE         /overflow/typeOfConfirm/:post_id/:type_of_confirm_id                         @controllers.OverFlowController.remove_TypeOfConfirm_to_Post(post_id, type_of_confirm_id)


POST           /overflow/comment/:post_id                                                   @controllers.OverFlowController.addComment(post_id)
PUT            /overflow/comment/:post_id                                                   @controllers.OverFlowController.edit_Comment_or_Answer(post_id)

POST           /overflow/answer/:post_id                                                    @controllers.OverFlowController.addAnswer(post_id)
PUT            /overflow/answer/:post_id                                                    @controllers.OverFlowController.edit_Comment_or_Answer(post_id)


PUT            /overflow/likePlus/:post_id                                                  @controllers.OverFlowController.likePlus(post_id)
PUT            /overflow/likeMinus/:post_id                                                 @controllers.OverFlowController.likeMinus(post_id)
POST           /overflow/link/:question_post_id/:answer_post_id                             @controllers.OverFlowController.linkWithPreviousAnswer(question_post_id, answer_post_id)
DELETE         /overflow/link/:linked_post_id                                               @controllers.OverFlowController.unlinkWithPreviousAnswer(linked_post_id)


PUT            /overflow/hashTag/:post_id/:hashTag                                           @controllers.OverFlowController.add_HashTag_to_Post(post_id,hashTag)
DELETE         /overflow/hashTag/:post_id/:hashTag                                           @controllers.OverFlowController.remove_HashTag_from_Post(post_id,hashTag)


### PROJECT ############ PROJECT ############### PROJECT ################ PROJECT ################# PROJECT ####################################################################
################################################################################################################################################################################

#Tarrifs
GET            /tarifs/for_registration                                                     @controllers.Finance_Controller.get_products_tariffs()


#CRUD Tarrifs
POST           /product                                                                     @controllers.Finance_Controller.product_create()
GET            /product/all                                                                 @controllers.Finance_Controller.product_get_all()
PUT            /product/deactivate/:product_id                                              @controllers.Finance_Controller.product_deactivate(product_id: Long)
PUT            /product/activate/:product_id                                                @controllers.Finance_Controller.product_activate(product_id: Long)
DELETE         /product/:product_id                                                         @controllers.Finance_Controller.product_delete(product_id: Long)

GET            /product/user_applicable                                                     @controllers.Finance_Controller.get_applicable_products_for_creating_new_project()

PUT            /product/details/:payment_details_id                                         @controllers.Finance_Controller.edit_payment_details(payment_details_id: Long)
PUT            /product/general/:product_id                                                 @controllers.Finance_Controller.edit_general_product_details(product_id: Long)


#GoPay
GET            /go_pay/notification_url                                                     @utilities.goPay.GoPay_Controller.call_back_Notification(id: Long)
GET            /go_pay/return_url                                                           @utilities.goPay.GoPay_Controller.call_back_Return_Url(id: Long)


#Fakturoid
GET             /invoice/get/:invoice_id                                                    @controllers.Finance_Controller.invoice_get(invoice_id: Long)
GET             /invoice/pdf/:invoice_id                                                    @utilities.fakturoid.Fakturoid_Controller.invoice_get_pdf(invoice_id: Long)

# Obsluha pouze pro Byzance zaměstnance
PUT             /invoice/set_pay/:invoice_id                                                @controllers.Finance_Controller.invoice_set_as_paid(invoice_id: Long)
PUT             /invoice/send_remainder/:invoice_id                                         @controllers.Finance_Controller.send_remainder_to_custumer(invoice_id: Long)
DELETE          /invoice/:invoice_id                                                        @controllers.Finance_Controller.invoice_remove(invoice_id: Long)

#Project
POST           /project                                                                     @controllers.ProgramingPackageController.postNewProject()
PUT            /project/:project_id                                                         @controllers.ProgramingPackageController.edit_Project(project_id)
GET            /project/:project_id                                                         @controllers.ProgramingPackageController.getProject(project_id)
GET            /project                                                                     @controllers.ProgramingPackageController.getProjectsByUserAccount
DELETE         /project/:project_id                                                         @controllers.ProgramingPackageController.deleteProject(project_id)
PUT            /project/shareProject/:project_id                                            @controllers.ProgramingPackageController.shareProjectWithUsers(project_id)
PUT            /project/unshareProject/:project_id                                          @controllers.ProgramingPackageController.unshareProjectWithUsers(project_id)
PUT            /project/addParticipant/:invitation_id/:decision                             @controllers.ProgramingPackageController.addParticipantToProject(invitation_id, decision: Boolean)
DELETE         /project/deleteInvitation/:invitation_id                                     @controllers.ProgramingPackageController.deleteProjectInvitation(invitation_id)

#Homer
POST           /homer                                                                       @controllers.ProgramingPackageController.newHomer()
PUT            /homer/filter/:page_number                                                   @controllers.ProgramingPackageController.get_Homers_by_Filter(page_number: Integer)
DELETE         /homer/:homer_id                                                             @controllers.ProgramingPackageController.removeHomer(homer_id)
GET            /homer/:homer_id                                                             @controllers.ProgramingPackageController.getHomer(homer_id)

#Project - connection
PUT            /homer/:project_id/:homer_id                                                 @controllers.ProgramingPackageController.connectHomerWithProject(project_id, homer_id)
DELETE         /homer/:project_id/:homer_id                                                 @controllers.ProgramingPackageController.disconnectHomerWithProject(project_id, homer_id)


#Program
POST           /b_program/:project_id                                                       @controllers.ProgramingPackageController.new_b_Program(project_id)
GET            /b_program/:b_program_id                                                     @controllers.ProgramingPackageController.get_b_Program(b_program_id)
PUT            /b_program/:b_program_id                                                     @controllers.ProgramingPackageController.edit_b_Program(b_program_id)
DELETE         /b_program/:b_program_id                                                     @controllers.ProgramingPackageController.remove_b_Program(b_program_id)
PUT            /b_program/list/:page_number                                                 @controllers.ProgramingPackageController.get_b_Program_by_Filter(page_number: Integer)
        
PUT            /b_program/version/:b_program_id                                             @controllers.ProgramingPackageController.update_b_program_new_version(b_program_id)
GET            /b_program/version/:version_id                                               @controllers.ProgramingPackageController.get_b_Program_version(version_id)
DELETE         /b_program/version/:version_id                                               @controllers.ProgramingPackageController.remove_b_Program_version(version_id)

#Instance
PUT            /b_program/uploadToCloud/:version_id                                         @controllers.ProgramingPackageController.upload_b_Program_ToCloud(version_id)

GET            /instance/project/:project_id                            @controllers.ProgramingPackageController.get_b_program_instance_under_project(project_id)
GET            /instance/get/:instance_id                               @controllers.ProgramingPackageController.get_b_program_instance(instance_id)

PUT            /instance/command/:instance_id/:target_id/:command       @controllers.ProgramingPackageController.send_command_to_instance(instance_id, target_id, command)
PUT            /instance/program/:instance_id                           @controllers.ProgramingPackageController.update_blocko_code_in_instance_with_code(instance_id)
PUT            /instance/ping/:instance_id                              @controllers.ProgramingPackageController.ping_instance(instance_id)
PUT            /instance/temporary_instance                             @controllers.ProgramingPackageController.instance_add_temporary_instance()
PUT            /instance/add_yoda/:instance_id/:yoda_id                 @controllers.ProgramingPackageController.instance_add_yoda(instance_id, yoda_id)
PUT            /instance/remove_yoda/:instance_id/:yoda_id              @controllers.ProgramingPackageController.instance_remove_yoda(instance_id, yoda_id)
PUT            /instance/add_device/:instance_id/:yoda_id/:device_id    @controllers.ProgramingPackageController.instance_add_device(instance_id, yoda_id, device_id)
PUT            /instance/remove_device/:instance_id/:yoda_id/:device_id @controllers.ProgramingPackageController.instance_remove_device(instance_id, yoda_id, device_id)
PUT            /instance/shut_down/:instance_id                         @controllers.ProgramingPackageController.instance_shut_down(instance_id)


#Blocks
POST           /blockoBlock                                                         @controllers.ProgramingPackageController.new_Block()
PUT            /blockoBlock/:blocko_block_id                                        @controllers.ProgramingPackageController.edit_Block(blocko_block_id)
GET            /blockoBlock/:blocko_block_id                                        @controllers.ProgramingPackageController.getBlockoBlock(blocko_block_id)
DELETE         /blockoBlock/:blocko_block_id                                        @controllers.ProgramingPackageController.deleteBlock(blocko_block_id)
PUT            /blockoBlock/list/:page_number                                       @controllers.ProgramingPackageController.get_BlockoBlock_by_Filter(page_number: Integer)

POST           /blockoBlock/version/:blocko_block_id                                @controllers.ProgramingPackageController.new_BlockoBlock_Version(blocko_block_id)
PUT            /blockoBlock/version/:blocko_block_version_id                        @controllers.ProgramingPackageController.edit_BlockoBlock_Version(blocko_block_version_id)
PUT            /blockoBlock/version/make_public/:blocko_block_version_id            @controllers.ProgramingPackageController.make_BlockoBlock_Version_public(blocko_block_version_id)
GET            /blockoBlock/version/all/:blocko_block_id                            @controllers.ProgramingPackageController.get_BlockoBlock_all_versions(blocko_block_id)
GET            /blockoBlock/version/:blocko_block_version_id                        @controllers.ProgramingPackageController.get_BlockoBlock_Version(blocko_block_version_id)
DELETE         /blockoBlock/version/:blocko_block_version_id                        @controllers.ProgramingPackageController.delete_BlockoBlock_Version(blocko_block_version_id)

GET            /blockoBlock/scheme/version                                          @controllers.ProgramingPackageController.get_BlockoBlock_Version_scheme()
PUT            /blockoBlock/scheme/version                                          @controllers.ProgramingPackageController.edit_BlockoBlock_Version_scheme()

#TypeOfBlocko
POST           /typeOfBlock                                                         @controllers.ProgramingPackageController.newTypeOfBlock()
GET            /typeOfBlock                                                         @controllers.ProgramingPackageController.getAllTypeOfBlocks
GET            /typeOfBlock/:type_of_block_id                                       @controllers.ProgramingPackageController.get_TypeOfBlock(type_of_block_id)
PUT            /typeOfBlock/:type_of_block_id                                       @controllers.ProgramingPackageController.editTypeOfBlock(type_of_block_id)
DELETE         /typeOfBlock/:type_of_block_id                                       @controllers.ProgramingPackageController.deleteTypeOfBlock(type_of_block_id)
PUT            /typeOfBlock/list/:page_number                                       @controllers.ProgramingPackageController.get_TypeOfBlock_by_Filter(page_number: Integer)


#BLocko Server
POST            /blocko_server                                                      @controllers.ProgramingPackageController.create_Blocko_Server()
PUT             /blocko_server/:server_id                                           @controllers.ProgramingPackageController.edit_Blocko_Server(server_id)
GET             /blocko_server                                                      @controllers.ProgramingPackageController.get_All_Blocko_Server()
DELETE          /blocko_server/:server_id                                           @controllers.ProgramingPackageController.delete_Blocko_Server(server_id)

#Blocko General
PUT             /blocko/disapprove                                                  @controllers.ProgramingPackageController.blockoDisapprove()
PUT             /blocko/approval                                                    @controllers.ProgramingPackageController.blockoApproval()

### ACTUALIZATION PROCEDURE ############ ACTUALIZATION PROCEDURE ############### ACTUALIZATION PROCEDURE ################ ACTUALIZATION PROCEDURE ##############################
################################################################################################################################################################################

#Actualization Procedure
GET             /actualization_procedure/:actualization_procedure_id                @controllers.ActualizationController.get_Actualization_Procedure(actualization_procedure_id)





### COMPILATION & LIBRARIES ############ COMPILATION & LIBRARIES ############### COMPILATION & LIBRARIES ################ COMPILATION & LIBRARIES ##############################
################################################################################################################################################################################

#C_Program
POST            /compilation/c_program/c_program                                            @controllers.CompilationLibrariesController.create_C_Program()
GET             /compilation/c_program/c_program/:c_program_id                              @controllers.CompilationLibrariesController.get_C_Program(c_program_id)
PUT             /compilation/c_program/list/:page_number                                    @controllers.CompilationLibrariesController.get_C_Program_by_Filter(page_number: Integer)

PUT             /compilation/c_program/c_program/:c_program_id                              @controllers.CompilationLibrariesController.edit_C_Program_Description(c_program_id)
DELETE          /compilation/c_program/c_program/:c_program_id                              @controllers.CompilationLibrariesController.delete_C_Program(c_program_id)

POST            /compilation/c_program/version/create/:c_program_id                         @controllers.CompilationLibrariesController.new_C_Program_Version(c_program_id)
PUT             /compilation/c_program/version/edit/:version_id                             @controllers.CompilationLibrariesController.edit_C_Program_version(version_id)

DELETE          /compilation/c_program/version/:version_id                                  @controllers.CompilationLibrariesController.delete_C_Program_Version(version_id)
GET             /compilation/c_program/version/:version_id                                  @controllers.CompilationLibrariesController.get_C_Program_Version(version_id)
POST            /compilation/c_program/version/compile                                      @controllers.CompilationLibrariesController.compile_C_Program_code()
PUT             /compilation/c_program/version/compile/:version_id                          @controllers.CompilationLibrariesController.compile_C_Program_version(version_id)

PUT             /compilation/c_program/version/make_public/:version_id                      @controllers.CompilationLibrariesController.make_C_Program_Version_public(version_id)
GET             /compilation/c_program/version/public/list/:page_number                     @controllers.CompilationLibrariesController.get_C_Program_public_list(page_number: Integer)

PUT             /compilation/c_program/version/approval                                     @controllers.CompilationLibrariesController.changeApprovalState()
PUT             /compilation/c_program/version/approve_with_changes                         @controllers.CompilationLibrariesController.approveWithChanges()

#Actualization
PUT             /compilation/c_program/version/upload/:version_id                           @controllers.CompilationLibrariesController.uploadCompilationToBoard(version_id)
POST            /compilation/c_program/binary/:board_id/:command                            @controllers.CompilationLibrariesController.uploadBinaryFileToBoard(board_id, command)
POST            /admin_binary/:instance_id/:board_id/:build_id/:command                     @controllers.CompilationLibrariesController.uploadBinaryFileToBoard_fake_board(instance_id: String, board_id: String, build_id: String, command: String)

#Processor
POST            /processor                                                                  @controllers.CompilationLibrariesController.new_Processor()
GET             /processor/:processor_id                                                    @controllers.CompilationLibrariesController.get_Processor(processor_id)
GET             /processor                                                                  @controllers.CompilationLibrariesController.get_Processor_All()
PUT             /processor/:processor_id                                                    @controllers.CompilationLibrariesController.update_Processor(processor_id)
DELETE          /processor/:processor_id                                                    @controllers.CompilationLibrariesController.delete_Processor(processor_id)

#Board
POST            /board                                                          @controllers.CompilationLibrariesController.new_Board()
PUT             /board/userDescription/:type_of_board_id                        @controllers.CompilationLibrariesController.edit_Board_User_Description(type_of_board_id)

PUT             /board/filter/:page_number                                      @controllers.CompilationLibrariesController.get_Board_Filter(page_number: Integer)
GET             /board/:board_id                                                @controllers.CompilationLibrariesController.get_Board(board_id)
DELETE          /board/deactivateBoard/:board_id                                @controllers.CompilationLibrariesController.deactivate_Board(board_id)
PUT             /board/:board_id/:project_id                                    @controllers.CompilationLibrariesController.connect_Board_with_Project(board_id, project_id)
DELETE          /board/:board_id                                                @controllers.CompilationLibrariesController.disconnect_Board_from_Project(board_id)

#Board on Project
GET             /project/board/all_details/:project_id                          @controllers.CompilationLibrariesController.board_all_details_for_blocko(project_id)

#Producer
POST            /producer                                                       @controllers.CompilationLibrariesController.new_Producer()
PUT             /producer/:producer_id                                          @controllers.CompilationLibrariesController.edit_Producer(producer_id)
GET             /producer/all                                                   @controllers.CompilationLibrariesController.get_Producers()
GET             /producer/:producer_id                                          @controllers.CompilationLibrariesController.get_Producer(producer_id)
DELETE          /producer/:producer_id                                          @controllers.CompilationLibrariesController.delete_Producer(producer_id)

#TypeOfBoard
POST            /typeOfBoard                                                    @controllers.CompilationLibrariesController.new_TypeOfBoard()
PUT             /typeOfBoard/:type_of_board_id                                  @controllers.CompilationLibrariesController.edit_TypeOfBoard(type_of_board_id)
DELETE          /typeOfBoard/:type_of_board_id                                  @controllers.CompilationLibrariesController.delete_TypeOfBoard(type_of_board_id)
GET             /typeOfBoard/all                                                @controllers.CompilationLibrariesController.get_TypeOfBoard_all()
GET             /typeOfBoard/:type_of_board_id                                  @controllers.CompilationLibrariesController.get_TypeOfBoard(type_of_board_id)
PUT             /typeOfBoard/mark/c_version/:type_of_board_id/:version_id       @controllers.CompilationLibrariesController.typeOfBoard_mark_C_program_Version_as_main(type_of_board_id,version_id)

#Bootloader
POST            /bootloader/:type_of_board_id                                               @controllers.CompilationLibrariesController.new_Boot_loader(type_of_board_id)
PUT             /bootloader/file/:boot_loader_id                                            @controllers.CompilationLibrariesController.boot_loader_uploud_file(boot_loader_id)
PUT             /bootloader/mark/bootloader/:boot_loader_id                                 @controllers.CompilationLibrariesController.boot_loader_mark_as_main(boot_loader_id)


PUT             /bootloader/update_device_list                                              @controllers.CompilationLibrariesController.boot_loader_update_device_list()

#LibraryGroups
POST            /compilation/libraryGroup                                                   @controllers.CompilationLibrariesController.new_LibraryGroup()
PUT             /compilation/libraryGroup/filter/:page_number                               @controllers.CompilationLibrariesController.get_LibraryGroup_Filter(page_number: Integer)

POST            /compilation/libraryGroup/upload/:version_id                                @controllers.CompilationLibrariesController.upload_Library_To_LibraryGroup(version_id)

POST            /compilation/libraryGroup/version/:libraryGroup_id                          @controllers.CompilationLibrariesController.new_LibraryGroup_Version(libraryGroup_id)
GET             /compilation/libraryGroup/version/:version_id                               @controllers.CompilationLibrariesController.get_LibraryGroup_Version(version_id)

GET             /compilation/libraryGroup/:libraryGroup_id                                  @controllers.CompilationLibrariesController.get_LibraryGroup(libraryGroup_id)
DELETE          /compilation/libraryGroup/:libraryGroup_id                                  @controllers.CompilationLibrariesController.delete_LibraryGroup(libraryGroup_id)
PUT             /compilation/libraryGroup/:libraryGroup_id                                  @controllers.CompilationLibrariesController.editLibraryGroup(libraryGroup_id)

GET             /file/listOfFiles/:version_id                                               @controllers.CompilationLibrariesController.get_LibraryGroup_Version_Libraries(version_id)
#Single Library
POST            /compilation/library                                                        @controllers.CompilationLibrariesController.new_SingleLibrary()
PUT             /compilation/library/filter/:page_number                                    @controllers.CompilationLibrariesController.get_SingleLibrary_Filter(page_number: Integer)
POST            /compilation/library/version/:library_id                                    @controllers.CompilationLibrariesController.new_SingleLibrary_Version(library_id)

GET             /compilation/library/:library_id                                            @controllers.CompilationLibrariesController.get_SingleLibrary(library_id)
PUT             /compilation/library/:library_id                                            @controllers.CompilationLibrariesController.edit_SingleLibrary(library_id)
DELETE          /compilation/library/:library_id                                            @controllers.CompilationLibrariesController.delete_SingleLibrary(library_id)
POST            /compilation/library/upload/:version_id                                     @controllers.CompilationLibrariesController.upload_SingleLibrary_Version(version_id)

#File // Skryto ve swaggeru
GET             /file/fileRecord/:file_record_id                                            @controllers.CompilationLibrariesController.fileRecord(file_record_id)


#Compilation Server
POST            /compilation_server                                                         @controllers.CompilationLibrariesController.create_Compilation_Server()
PUT             /compilation_server/:server_id                                              @controllers.CompilationLibrariesController.edit_Compilation_Server(server_id)
GET             /compilation_server                                                         @controllers.CompilationLibrariesController.get_All_Compilation_Server()
DELETE          /compilation_server/:server_id                                              @controllers.CompilationLibrariesController.delete_Compilation_Server(server_id)


### GRIDS ############ GRIDS ############### GRIDS ################ GRIDS ######################################################################################################
################################################################################################################################################################################

#M Project
GET             /m_project/interface_collection/:m_project_id                          @controllers.GridController.get_M_Project_Interface_collection(m_project_id)

POST            /m_project/:project_id                                                 @controllers.GridController.new_M_Project(project_id)
GET             /m_project/:m_project_id                                               @controllers.GridController.get_M_Project(m_project_id)
PUT             /m_project/:m_project_id                                               @controllers.GridController.edit_M_Project(m_project_id)
DELETE          /m_project/:m_project_id                                               @controllers.GridController.remove_M_Project(m_project_id)

#M Program
POST            /m_program/:m_project_id                                               @controllers.GridController.new_M_Program(m_project_id)
GET             /m_program/:m_progrm_id                                                @controllers.GridController.get_M_Program(m_progrm_id)
PUT             /m_program/:m_progrm_id                                                @controllers.GridController.edit_M_Program(m_progrm_id)
DELETE          /m_program/:m_progrm_id                                                @controllers.GridController.remove_M_Program(m_progrm_id)

POST            /m_program_version/:m_program_id                                       @controllers.GridController.new_M_Program_version(m_program_id)
DELETE          /m_program_version/:m_program_id                                       @controllers.GridController.remove_M_Program_version(m_program_id)

# Terminals Aps
GET             /m_program/app/token/:qr_token                                         @controllers.GridController.get_M_Program_byQR_Token_forMobile(qr_token)
GET             /m_program/app/all_m_programs                                          @controllers.GridController.get_M_Project_all_forTerminal()
GET             /m_program/app/url/:instance_id/:m_program_id/:version_object_id       @controllers.GridController.get_conection_url(instance_id, m_program_id, version_object_id)

PUT             /websocket/terminal/identificator                                      @controllers.GridController.get_identificator()
PUT             /websocket/terminal/identificator/:terminal_id                         @controllers.GridController.check_identifiactor(terminal_id)



### TOOLS ############ TOOLS ############### TOOLS ################ TOOLS ######################################################################################################
################################################################################################################################################################################

#SWAGGER API
GET            /api-docs                                    @utilities.swagger.ApiHelpController.getResources
GET            /api-docs/:version                           @utilities.swagger.swagger_diff_tools.Swagger_diff_Controller.getResources_version(version)




# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                 controllers.Assets.at(path="/public", file)
GET           /assets/*file                                 controllers.Assets.versioned(path="/public", file: Asset)




### PUBLIC - ADMIN ############ PUBLIC  - ADMIN ############### PUBLIC  - ADMIN ################ PUBLIC  - ADMIN ################################################################
###################################################################################f#############################################################################################

# Basic Page Requests

GET             /                                               @controllers.DashboardController.index()
GET             /admin/login                                    @controllers.DashboardController.login()
GET             /admin/bugs                                     @controllers.DashboardController.show_all_logs()
GET             /admin/websocket/summary                        @controllers.DashboardController.show_web_socket_stats()
GET             /admin/websocket/detail/:instance_id            @controllers.DashboardController.show_instance_detail(instance_id)
GET             /admin/show_readme                              @controllers.DashboardController.show_readme()
GET             /admin/show_diff_on_Api/                        @controllers.DashboardController.show_diff_on_Api(old_api: String?="",new_api: String?="")
GET             /admin/board_settings                           @controllers.DashboardController.basic_board_management()
GET             /admin/bootloader_settings/:type_of_board_id    @controllers.DashboardController.bootloader_management(type_of_board_id)
GET             /admin/external_servers                         @controllers.DashboardController.external_servers()
GET             /admin/user_summary/                            @controllers.DashboardController.user_summary(email: String?="")
GET             /admin/user_summary/:mail                       @controllers.DashboardController.user_summary(mail)
GET             /admin/permission/permission_summary            @controllers.DashboardController.permissions_summary()
GET             /admin/permission/role/:role_id                 @controllers.DashboardController.role(role_id)
GET             /admin/blocko_objects                           @controllers.DashboardController.blocko_objects()
GET             /admin/blocko_management                        @controllers.DashboardController.blocko_management()
GET             /admin/public_code                              @controllers.DashboardController.public_code()
GET             /admin/general_tariffs                          @controllers.DashboardController.general_tariffs_list()
GET             /admin/general_tariffs/:general_tariff_id       @controllers.DashboardController.general_tariff_edit(general_tariff_id)
GET             /admin/general_tariff_extension/:extension_id   @controllers.DashboardController.general_tariff_extension_edit(extension_id)

# Tariff
POST            /admin/tariff                                   @controllers.Finance_Controller.tariff_general_create()
PUT             /admin/tariff                                   @controllers.Finance_Controller.tariff_general_edit()
PUT             /admin/tariff/deactive/:general_tariff_id       @controllers.Finance_Controller.tariff_general_deactivate(general_tariff_id)
PUT             /admin/tariff/active/:general_tariff_id         @controllers.Finance_Controller.tariff_general_activate(general_tariff_id)


POST            /admin/label/tariff                             @controllers.Finance_Controller.tariff_general_label_tariff_create()
POST            /admin/label/extension                          @controllers.Finance_Controller.tariff_general_label_extension_create()
PUT             /admin/label                                    @controllers.Finance_Controller.tariff_general_label_edit()
PUT             /admin/label/up/:label_id                       @controllers.Finance_Controller.tariff_general_label_edit_up(label_id)
PUT             /admin/label/down/:label_id                     @controllers.Finance_Controller.tariff_general_label_edit_down(label_id)
DELETE          /admin/label/:label_id                          @controllers.Finance_Controller.tariff_general_label_remove(label_id)

POST            /admin/extension                                @controllers.Finance_Controller.tariff_general_extension_create()
PUT             /admin/extension                                @controllers.Finance_Controller.tariff_general_extension_edit()
PUT             /admin/extension/up/:extension_id               @controllers.Finance_Controller.tariff_general_extension_edit_up(extension_id)
PUT             /admin/extension/down/:extension_id             @controllers.Finance_Controller.tariff_general_extension_edit_down(extension_id)
PUT             /admin/extension/deactive/:extension_id         @controllers.Finance_Controller.tariff_general_extension_deactivate(extension_id)
PUT             /admin/extension/active/:extension_id           @controllers.Finance_Controller.tariff_general_extension_activate(extension_id)
DELETE          /admin/extension/:extension_id                  @controllers.Finance_Controller.tariff_general_extension_delete(extension_id)


GET             /javascriptRoutes                               @controllers.DashboardController.javascriptRoutes()

# BUGS SERVISE PAGE

GET             /admin/bugs/deleteAll                      @controllers.DashboardController.loggy_remove_all_bugs()
GET             /admin/bug/remove/:id                      @controllers.DashboardController.loggy_remove_bug(id: String)
GET             /admin/bug/report/:id                      @controllers.DashboardController.loggy_report_bug_to_youtrack(id: String)

# WEBSOCKET SERVISE PAGE
GET             /admin/instance/ping/:id                   @controllers.DashboardController.ping_homer_instance(id: String)

GET             /admin/homer_server/ping/:id               @controllers.DashboardController.ping_homer_server(id)
GET             /admin/homer_server/disconnect/:id         @controllers.DashboardController.disconnect_blocko_server(id)

GET             /admin/compilator_server/ping/:id          @controllers.DashboardController.ping_compilation_server(id)
GET             /admin/compilator_server/disconnect/:id    @controllers.DashboardController.disconnect_compilation_server(id)

GET             /admin/terminal/ping/:id                   @controllers.DashboardController.ping_terminal(id)
GET             /admin/terminal/disconnect/:id             @controllers.DashboardController.disconnect_terminal(id)

GET             /admin/becki/ping/:id                      @controllers.DashboardController.ping_becki(id)
GET             /admin/becki/disconnect/:id/:token         @controllers.DashboardController.disconnect_becki(id, token)

GET             /admin/terminal/log_out/:id                @controllers.DashboardController.terminal_log_out_user(id)



GET             /public/*file                               @controllers.Assets.versioned(path="/public", file: Asset)