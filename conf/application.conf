
api.version: "2.0.0"// Version of Tyrion

# Server basic Settings ------------------------------------------------------------------------------------------------
server {

  mode = "DEVELOPER"              # {"DEVELOPER", "STAGE", "PRODUCTION"} Pokud production = používá se jiné nastavení

  developer   = "localhost:9000"           // DEVELOPER
  test_server = "192.168.65.31:9000"       // DEVELOPER
  production  = "tyrion.byzance.cz"        // PRODUCTION
  stage       = "tyrion.stage.byzance.cz"  // STAGE

  web_socket_timout = 5               // In seconds
}



logger {

  youtrackUrl = "http://youtrack.byzance.cz"
  youtrackProject = "TYRION"
  youtrackId = "d33199ae-2f26-4588-8886-9273b4efc61a"
  youtrackSecret = "KTEWU11Gwf3F"
  youtrackScopeId = "aa50528b-ba3f-4381-bb4d-7144c4e76f4b"
  youtrackUsername = "Tyrion-server"
  youtrackPassword = "82asnvuzEBtdUhHY"

  youtrackApiKey = "perm:VHlyaW9uLXNlcnZlcg==.dHlyaW9u.H3u6DTgOcNDsrAGGNyPg9fKb98bHkI"

  developer = "/conf/logback/logback.xml"
  production = "/conf/logback/logback_prod.xml"

  logged_groups = ["global", "test"]


  // Examples - For more detail please visit MarkDown Documentation
  groups {

    test          = ["TRACE::YELLOW"  , "Model_HardwareRegistrationEntity", "Controller_Hardware", "Model_HardwareBatch"]
    global        = ["DEBUG::YELLOW"  , "Server", "_BaseController", ]
    cache         = ["TRACE::YELLOW"  , "ServerCache", "_BaseController"]

    login         = ["TRACE::YELLOW"  , "Controller_Security", "Authentication"]
    websocket     = ["TRACE::YELLOW"  , "Controller_WebSocket", "WS_Portal", "WS_Homer", "WS_Compiler", "WS_Interface", "WS_ConfirmationThread"]

    project       = ["TRACE::YELLOW"  , "Controller_Project", "Model_Project", "Model_Invitation"]

    azure         = ["TRACE::YELLOW"  , "Model_Blob"]
    compilation   = ["TRACE::YELLOW"  , "Controller_Code", "Model_CProgram", "Model_Compilation", "Model_Blob"]
    instance      = ["TRACE::YELLOW"  , "Model_HomerInstance"]
    hardware      = ["TRACE::YELLOW"  , "Model_Hardware", "Model_HardwareRegistration"]
    hw_authority  = ["TRACE::YELLOW"  , "Hardware_Registration_Authority", "Batch_Registration_Authority"]


    grid          = ["TRACE::YELLOW"  , "Controller_Grid", "Model_Widget", "Model_WidgetVersion"]
    blocko        = ["TRACE::YELLOW"  , "Controller_Blocko", "Model_Block", "Model_BlockVersion", "Model_Instance", "Model_InstanceSnapshot"]

    scheduler     = ["TRACE::BLUE"    , "SchedulerController", "Job_LogAzureUpload", "Job_OldNotificationRemoval", "Job_RequestStatsUpdate", "Job_SpendingCredit", "Job_StuckCompilationCheck", "Job_UnauthenticatedPersonRemoval", "Job_UploadBlockoToCloud", "Job_UpdateServer", "Job_CheckCompilationLibraries"]
    admin         = ["TRACE::RED"     , "Controller_Admin"]

    homer         = ["TRACE::BLUE"    , "WS_Homer", "Synchronize_Homer_Synchronize_Settings", "Synchronize_Homer_Instance_after_connection", "Synchronize_Homer_Hardware_after_connection", "Synchronize_Homer_Unresolved_Updates", "Model_HomerServer"]
    compilation   = ["TRACE::BLUE"     , "Controller_WebSocket", "WS_Compiler", "WS_Message", "Model_CompilationServer", "Model_CProgram","Model_CompilationServer" ]
    becki         = ["TRACE::BLUE"    , "WS_Portal", "WS_PortalSingle", "WS_Message", "Notification_Tester", "NotificationHandler"]

    security      = ["TRACE::GREEN"   , "Authentication", "Socials", "TokenCache", "Controller_Security", "Controller_Permission", "Model_Permission", "YouTrack"]
    notification  = ["TRACE::PURPLE"  , "NotificationHandler", "Controller_Notification", "Model_Notification", "Notification_Tester", "NotificationActionHandler"]
    update        = ["TRACE::PURPLE"  , "Model_Hardware", "Model_CProgramUpdatePlan", "Model_ActualizationProcedure" , "Model_BootLoader"]
    picture       = ["TRACE::PURPLE"  , "Controller_Board", "Model_Person", "Controller_Person", "Model_Blob", "Model_TypeOfBoard"]

    financial     = ["TRACE::GREEN"   , "Fakturoid", "Controller_Finance", "GoPay", "Job_SpendingCredit", "GoPay_PaymentCheck", "Fakturoid_InvoiceCheck", "FinancialPermission", "Model_Product", "Model_ProductExtension", "Model_Customer", "Model_Employee"]
  }
}

swagger {

  filter = "utilities.swagger.SwaggerFilter"

  api {
    basepatht: "http://localhost:9000"

    info = {
      contact: "Tyrion Team leader:: alexandr.tyls@byzance.cz, \n\n tyrion@byzance.cz, support@byzance.cz",
      description: "Aggregate API for communicating with the server Tyrion. Please carefully check each version. Some APIs require special permissions. Some are designed for only certain types of mobile devices. For more information write to Tyrion Team tyrion@byzance.cz",
      title: Tyrion Api,

      termsOfService: Terms Of Service,
      license: Terms Of Service,
      licenseUrl: "http://google.com"
    }
  }
}

mandrillApiKey = -oA2YdBZVG2bNW5cKIZnWA

Becki{

  developer {
    mainUrl = "localhost:8080"            // Základní adresa
  }

  test_server {
    mainUrl = "192.168.65.31"             // Základní adresa - Test Serveru
  }


  production{
    mainUrl = "portal.byzance.cz"         // Základní adresa
  }

  stage{
    mainUrl = "portal.stage.byzance.cz"   // Základní adresa
  }

  redirectOk = "login"                      // Když se přihlášení přes sociální síť zadaří
  redirectFail = "login-failed"             // Když se přihlášení přes sociální síť NEzadaří
  accountAuthorizedSuccessful = "login"     // Když uživatel skrz email potvrdí registraci
  accountAuthorizedFailed = "login-failed"  // Když uživatel skrz email potvrdí registraci ale něco se nepovedlo
  passwordReset = "password-restart"        // Když uživatel Apinou požádá o restart hesla, kam ho link z emailu po ověření přepošle a co předá frontendu???
  invitationToCollaborate = "create-user/"  // Když je uživateli poslán email, že byl pozván ke spolupráci na projektu a zaregistrován

}

blob {
  developer {
    url = "https://byzancedeveloperblob.blob.core.windows.net/"
    secret = "DefaultEndpointsProtocol=https;AccountName=byzancedeveloperblob;AccountKey=WSDDkL0lRVmbGKzNDOuHHkI71zJb4M916zB+AEC0yio3ke2ZKugErbDAGAZ71+F3hgkOvuiTfbSYGImyagTF4w==;EndpointSuffix=core.windows.net"
  }
  stage {
    url = "https://blobstagetyrion.blob.core.windows.net/"
    secret = "DefaultEndpointsProtocol=https;AccountName=blobstagetyrion;AccountKey=5eBmclwyAryMYNCPtCtgc0W+8Jn4XBEBDehh4/jkzs10yCHWkU8UQz+GWJ/g50umWYk42O7Azxb/qS3Zr14+Rg=="
  }
  production {
    url = "TODO"
    secret = "TODO"
  }
}

documentDB {

  developer {
    url = "https://nosqlstagebyzance.documents.azure.com:443/"
    secret = "RK3GGvRxEIxGJIYBP8GAvbuDjbvzIP9RnVsP8Qrk8rXfFtv6BZaLfNpgvrOdDhZfTxeO9AA8t4wTSJeIZAfP2w=="
    databaseName = "DeveloperDocumentDB"

    RUsReserved {
      Model_Boad = 1;
    }
  }

  stage {
    url = "https://nosqlstagebyzance.documents.azure.com:443/"
    secret = "RK3GGvRxEIxGJIYBP8GAvbuDjbvzIP9RnVsP8Qrk8rXfFtv6BZaLfNpgvrOdDhZfTxeO9AA8t4wTSJeIZAfP2w=="
    databaseName = "StageDocumentDB"

    RUsReserved {
      Model_Boad = 1;
    }
  }

  production {
    url = "TODO"
    secret = "TODO"
    databaseName = "TODO"

    RUsReserved {
      Model_Boad = 1;
    }
  }
}

GitHub {

  releasesUrl = "https://api.github.com/repos/ByzanceIoT/tyrion/releases"
  apiKey = "4d89903b259510a1257a67d396bd4aaf10cdde6a"

  production {
    apiKey = 67e2214c157611191894
    clientSecret = 7136691bece9ab1ad711204fc22c458a8ca7a35f
    url = "https://api.github.com/user"
    callBack = "/login/github/oauth_callback"
  }

  stage {
    apiKey = 01c18785758ea12c07ee
    clientSecret = 5a9f90dd426be3f96889e3d0d827e24c6c539e5a
    url = "https://api.github.com/user"
    callBack = "/login/github/oauth_callback"
  }

  developer{
    apiKey = 4afa319159255de36432
    clientSecret = cfab320ef60231a6bbad4b8ed8e5f6ba1ad9f6b8
    url = "https://api.github.com/user"
    callBack = "/login/github/oauth_callback"
  }

}

Facebook{

  production{
    apiKey = 550327521801914
    clientSecret = 13e2fe4160a547368d230fb4f5296527
    url = "https://graph.facebook.com/v2.8/me"
    callBack = "/login/facebook/oauth_callback"
  }

  stage {
    apiKey = 550327521801914
    clientSecret = 13e2fe4160a547368d230fb4f5296527
    url = "https://graph.facebook.com/v2.8/me"
    callBack = "/login/facebook/oauth_callback"
  }

  developer{
    apiKey = 238413143258549
    clientSecret = 83a7bdb63897105c033589bec49ded1a
    url = "https://graph.facebook.com/v2.8/me"
    callBack = "/login/facebook/oauth_callback"
  }

}

Financial {

  alpha_ending = 1521068400000

  # !!!important!!! due to scheduler cron expresions
  # allowable values = 1-4, 12, 24, 48
  production {
    spendDailyPeriod = 1
  }
  stage {
    spendDailyPeriod = 1
  }
  developer {
    spendDailyPeriod = 1
  }

  # prices are Long numbers ($1 = 1000)

  extensions {
    project {
      name = "Project"
      description = "This is an extension for project."
    }
    database {
      name = "Database"
      description = "This is an extension for database."
    }
    log {
      name = "Logging"
      description = "This is an extension for log."
    }
    rest_api {
      name = "RestAPI"
      description = "This is an extension for RestAPI."
    }
    support {
      name = "Support"
      description = "This is an extension for Support."
    }
    instance {
      name = "Instance"
      description = "This is an extension for Instance."
    }
    homer_server {
      name = "Homer Server"
      description = "This is an extension for Homer Server."
    }
    participant {
      name = "Project paricipant"
      description = "This is an extension for project participants."
    }
  }
}

# External Services Settings -------------------------------------------------------------------------------------------

Fakturoid {

  production{
    VelkeTODO = "!!"
  }

  developer {
    apiKey = d6aed8509cbb5fcd3d3533bb2ab79880d4764c46
    url = "https://app.fakturoid.cz/api/v2/accounts/mediacheckdev"
    callBack = "/fakturoid/callback"
    userAgent = "mediacheck (tomas.zaruba@byzance.cz)"
    secret_combo = "tomas.zaruba@byzance.cz:9593bee69be49771a9840afed7f530b208e92044"
  }

  stage {
    apiKey = d6aed8509cbb5fcd3d3533bb2ab79880d4764c46
    url = "https://app.fakturoid.cz/api/v2/accounts/mediacheckdev"
    callBack = "/fakturoid/callback"
    userAgent = "mediacheck (tomas.zaruba@byzance.cz)"
    secret_combo = "tomas.zaruba@byzance.cz:9593bee69be49771a9840afed7f530b208e92044"
  }
}


PrintNode {

  production{
    apiKey = 6aa35f3ae351e4664417ac894d99dbd4c35a0b95
    url = "https://api.printnode.com"
  }

  developer {
    apiKey = 6aa35f3ae351e4664417ac894d99dbd4c35a0b95
    url = "https://api.printnode.com"
  }

  stage {
    apiKey = 6aa35f3ae351e4664417ac894d99dbd4c35a0b95
    url = "https://api.printnode.com"
  }
}


# GO PAY----------------------------------------------------------------------------------------------------------------

GOPay{

  production{
    api_url = "https://gate.gopay.cz/api"
    client_id = 13e2fe4160a547368d230fb4f5296527
    client_credentials = "https://graph.facebook.com/v2.5/me"
    return_url = "https://tyrion.byzance.cz/go_pay/return"
    notification_url = "https://tyrion.byzance.cz/go_pay/notification"
    go_id = "45646546546545645456"
  }

  developer{
    api_url = "https://gw.sandbox.gopay.com/api"
    client_id = 1078479787
    client_secret = 9yCpGL7R
    secure_key = HPrtGeztEmbL7dWCGSaxCvMD

    return_url = "http://localhost:9000/go_pay/return"
    notification_url = "http://localhost:9000/go_pay/notification"
    go_id = 8449088054
  }

  stage{
    api_url = "https://gw.sandbox.gopay.com/api"
    client_id = 1078479787
    client_secret = 9yCpGL7R
    secure_key = HPrtGeztEmbL7dWCGSaxCvMD
    return_url = "https://stage.tyrion.byzance.cz/go_pay/return"
    notification_url = "https://stage.tyrion.byzance.cz/go_pay/notification"
    go_id = 8449088054
  }

}

Slack {
  servers = "https://hooks.slack.com/services/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"
  hardware = "https://hooks.slack.com/services/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"
}


Grid_App {

  production{
    mainUrl = "app.byzance.cz"
  }

  stage{
    mainUrl = "app.stage.byzance.cz"
  }

  localhost{
    // Definuje se IP adresou počítače
  }

}

# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "changeme"

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  enabled += "play.modules.swagger.SwaggerModule"

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
#play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {

  parser.maxMemoryBuffer = 256K
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  errorHandler = "utilities.errors.ErrorHandler"

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  akka: {
    requestTimeout = 10s
  }
  http {
    idleTimeout = 10s
  }

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
    enabledCipherSuites = [
      "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
      "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
      "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_RSA_WITH_AES_128_CBC_SHA",
      "TLS_RSA_WITH_AES_256_CBC_SHA"
    ]
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.
#
play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  # enabled += "filters.DefaultFilter"
  enabled += play.filters.cors.CORSFilter
  enabled += play.filters.hosts.AllowedHostsFilter

  # Disabled filters remove elements from the enabled list.
  enabled += filters.DefaultFilter

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    # Tyrion check all http headers for validations - in our case - all are alowed
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = ["GET", "POST", "DELETE", "PUT", "OPTIONS"]
    exposedHeaders = ["Content-Type", "Content-Length", "Byzance-Api-Version"]
    allowedHttpHeaders = ["Accept", "Content-Type", "Content-Length", "content-type", "X-Auth-Token", "Becki-Version", "becki-version"]


  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    xssProtection = null
    contentTypeOptions = null
    permittedCrossDomainPolicies = null
    contentSecurityPolicy = null
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = ["localhost", "http://localhost", "http://localhost:8080", "127.0.0.1:9000", "localhost:9000", "192.168.65.31:9000", "tyrion.stage.byzance.cz", "tyrion.production.byzance.cz", "portal.byzance.cz", "portal.stage.byzance.cz"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

ebean.default = ["models.*", "utilities.model.*"]

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  default.driver = org.postgresql.Driver
  default.url="jdbc:postgresql://:5432/byzance"
  default.username = postgres
  default.password = admin

  // Pro produkční databázi
  //default.url="jdbc:postgresql://bitnami-postgresql-d811.cloudapp.net:5432/byzanceERP"
  //default.username=postgres
  //default.password=oW1USmfY

  //Pro Stage databázi
  //default.url="jdbc:postgresql://db.stage.byzance.cz:5432/byzance"
  //default.username=tyrion
  //default.password="nZvLkpqNG=a?37GFEiHq"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}


play.editor="http://localhost:63342/api/file/?file=%s&line=%s"
