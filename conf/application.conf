
api.version: "2.2.15"// Version of Tyrion

# Server basic Settings ------------------------------------------------------------------------------------------------
server {

  mode = "DEVELOPER"                           # {"DEVELOPER", "STAGE", "PRODUCTION"} Pokud production = používá se jiné nastavení

  mode = ${?SERVERMODE}

  developer   = "localhost:9000"           // DEVELOPER
  test_server = "192.168.65.31:9000"       // DEVELOPER
  production  = "tyrion.byzance.cz"        // PRODUCTION
  stage       = "tyrion.stage.byzance.cz"  // STAGE

  web_socket_timout = 5               // In seconds
}

logger {

  youtrackUrl = "http://youtrack.byzance.cz"
  youtrackProject = "TYRION"
  youtrackId = "d33199ae-2f26-4588-8886-9273b4efc61a"
  youtrackSecret = "KTEWU11Gwf3F"
  youtrackScopeId = "aa50528b-ba3f-4381-bb4d-7144c4e76f4b"
  youtrackUsername = "Tyrion-server"
  youtrackPassword = "82asnvuzEBtdUhHY"

  youtrackApiKey = "perm:VHlyaW9uLXNlcnZlcg==.dHlyaW9u.H3u6DTgOcNDsrAGGNyPg9fKb98bHkI"

  developer = "/conf/logback/logback.xml"
  production = "/conf/logback/logback_prod.xml"

  logged_groups = ["global", "jobs_git"]


  // Examples - For more detail please visit MarkDown Documentation
  groups {

    test          = ["TRACE::YELLOW"  , "SelfDeployedThreadRegister", "DigitalOceanThreadRegister", "Model_CProgramVersion", "Controller_Hardware", "WS_Compiler", "DigitalOceanTyrionService", "Controller_WebSocket", "Model_Blob"]
    global        = ["DEBUG::RED"     , "Server", "_BaseController"]
    model         = ["TRACE::YELLOW"  , "BaseModel"]
    cache         = ["TRACE::YELLOW"  , "CacheService", "CacheFinder", "CacheMongoFinder", "CacheQuery"]
    permission    = ["TRACE::YELLOW"  , "PermissionService", "PermissionSerializer", "PermissionFilter", "Controller_Permission", "PermittedAction", "Model_Permission", "Model_Role"]
    server_reg    = ["TRACE::YELLOW"  , "DigitalOceanThreadRegister", "SelfDeployedThreadRegister", "DigitalOceanTyrionService"]

    login         = ["TRACE::YELLOW"  , "Controller_Security", "Authentication"]
    websocket     = ["TRACE::YELLOW"  , "Controller_WebSocket", "WS_Portal", "WS_Homer", "WS_Compiler", "WS_Interface", "WS_ConfirmationThread"]

    project       = ["TRACE::YELLOW"  , "Controller_Project", "Model_Project", "Model_Invitation"]

    azure         = ["TRACE::YELLOW"  , "Model_Blob"]
    compilation   = ["TRACE::YELLOW"  , "Controller_Code", "Model_CProgram", "Model_Compilation", "Model_Blob"]
    instance      = ["TRACE::YELLOW"  , "Model_Instance", "Model_InstanceSnapshot", "Controller_Blocko"]
    hardware      = ["TRACE::YELLOW"  , "Model_Hardware", "Model_HardwareRegistration", "Controller_Hardware", "Model_HardwareUpdate", "Model_HardwareType", "Model_BootLoader"]
    hw_authority  = ["TRACE::YELLOW"  , "Hardware_Registration_Authority", "Batch_Registration_Authority"]

    grid          = ["TRACE::YELLOW"  , "Controller_Grid", "Model_Widget", "Model_WidgetVersion"]
    blocko        = ["TRACE::YELLOW"  , "Controller_Blocko", "Model_Block", "Model_BlockVersion", "Model_Instance", "Model_InstanceSnapshot"]

    scheduler     = ["TRACE::BLUE"    , "SchedulerController", "Job_LogAzureUpload", "Job_OldNotificationRemoval", "Job_RequestStatsUpdate", "Job_Financial", "Job_StuckCompilationCheck", "Job_UnauthenticatedPersonRemoval", "Job_UploadBlockoToCloud", "Job_UpdateServer", "Job_CheckCompilationLibraries"]
    admin         = ["TRACE::RED"     , "Controller_Admin"]
    bootloader    = ["TRACE::RED"     , "Job_CheckBootloaderLibraries"]
    jobs_git      = ["TRACE::RED"     , "Job_CheckCompilationLibraries", "Job_CheckBootloaderLibraries"]


    homer         = ["TRACE::BLUE"    , "WS_Homer", "Synchronize_Homer_Synchronize_Settings", "Synchronize_Homer_Instance_after_connection", "Synchronize_Homer_Hardware_after_connection", "Synchronize_Homer_Unresolved_Updates", "Model_HomerServer"]
    compilation   = ["TRACE::BLUE"    , "Controller_WebSocket", "WS_Compiler", "WS_Message", "Model_CompilationServer", "Model_CProgram","Model_CompilationServer" ]
    becki         = ["TRACE::BLUE"    , "WS_Portal", "WS_PortalSingle", "WS_Message", "Notification_Tester", "NotificationHandler"]

    security      = ["TRACE::GREEN"   , "Authentication", "Socials", "TokenCache", "Controller_Security", "Controller_Permission", "Model_Permission", "YouTrack"]
    notification  = ["TRACE::PURPLE"  , "RefreshTouch_echo_handler", "NotificationHandler", "Controller_Notification", "Model_Notification", "Notification_Tester", "NotificationActionHandler", "WS_Portal", "WS_PortalSingle", "WS_Message_Online_Change_status"]
    update        = ["TRACE::PURPLE"  , "Model_Hardware", "Model_CProgramUpdatePlan", "Model_ActualizationProcedure" , "Model_BootLoader"]
    picture       = ["TRACE::PURPLE"  , "Controller_Board", "Model_Person", "Controller_Person", "Model_Blob", "Model_TypeOfBoard"]

    financial     = ["TRACE::GREEN"   , "Fakturoid", "Controller_Finance", "GoPay", "Job_Financial", "GoPay_PaymentCheck", "Fakturoid_InvoiceCheck", "FinancialPermission", "Model_Product", "Model_ProductExtension", "Model_Customer", "Model_Employee"]

    gsm           = ["TRACE::YELLOW"  , "Controller_GSM", "Model_GSM", "Job_ThingsMobile_SimData_Synchronize", "Job_ThingsMobile_SimListOnly_Synchronize", "Controller_Things_Mobile"]
  }
}

compilation_settings {

  obsolete_lib_version: ["v1.0.5-alpha","v1.0.6-alpha","v1.0.7-alpha","v1.0.8-alpha","v1.0.9-alpha","v1.1.0-alpha","v1.1.1-alpha",
    "v1.1.2-alpha", "v1.1.3-alpha", "v1.1.4-alpha", "v1.1.5-alpha", "v1.1.6-beta", "v1.1.7-alpha", "v1.1.8-alpha", "v1.1.9-alpha",
    "v1.1.10-alpha", "v1.1.11-alpha", "v1.1.12-alpha", "v1.1.13-alpha", "v1.1.14-alpha", "v1.1.15-beta", "v1.1.16", "v1.1.17-alpha"
    "v1.1.18-alpha"]

}

swagger {

  filter = "utilities.swagger.SwaggerFilter"

  api {
    basepatht: "http://localhost:9000"

    info = {
      contact: "Tyrion Team leader:: alexandr.tyls@byzance.cz, \n\n tyrion@byzance.cz, support@byzance.cz",
      description: "Aggregate API for communicating with the server Tyrion. Please carefully check each version. Some APIs require special permissions. Some are designed for only certain types of mobile devices. For more information write to Tyrion Team tyrion@byzance.cz",
      title: Tyrion Api,

      termsOfService: Terms Of Service,
      license: Terms Of Service,
      licenseUrl: "http://google.com"
    }
  }
}


mobile_things {
  token: "9f8879bc-a700-4588-8d3c-ef3864bcfd2b"
  username: "tomas.zaruba@byzance.cz"
}

digitalOcean {
  allowed_server_types: ["s-1vcpu-1gb", "s-2vcpu-2gb", "s-2vcpu-4gb", "s-4vcpu-8gb", "s-6vcpu-16gb", "s-8vcpu-32gb", "s-16vcpu-64gb", "s-32vcpu-192gb"]
  api_key: "2521a027f6120a471fa1187060cc56b58e6a42dbd3e56406606488d9e2d7c07f"
}

mandrillApiKey = -oA2YdBZVG2bNW5cKIZnWA

Becki{

  developer {
    mainUrl = "localhost:8080"            // Základní adresa
  }

  test_server {
    mainUrl = "192.168.65.31"             // Základní adresa - Test Serveru
  }


  production{
    mainUrl = "portal.byzance.cz"         // Základní adresa
  }

  stage{
    mainUrl = "portal.stage.byzance.cz"   // Základní adresa
  }

  redirectOk = "login"                      // Když se přihlášení přes sociální síť zadaří
  redirectFail = "login-failed"             // Když se přihlášení přes sociální síť NEzadaří
  accountAuthorizedSuccessful = "login"     // Když uživatel skrz email potvrdí registraci
  accountAuthorizedFailed = "login-failed"  // Když uživatel skrz email potvrdí registraci ale něco se nepovedlo
  passwordReset = "password-restart"        // Když uživatel Apinou požádá o restart hesla, kam ho link z emailu po ověření přepošle a co předá frontendu???
  invitationToCollaborate = "create-user/"  // Když je uživateli poslán email, že byl pozván ke spolupráci na projektu a zaregistrován

}

blob {
  developer {
    url = "https://byzancedeveloperblob.blob.core.windows.net/"
    secret = "DefaultEndpointsProtocol=https;AccountName=byzancedeveloperblob;AccountKey=WSDDkL0lRVmbGKzNDOuHHkI71zJb4M916zB+AEC0yio3ke2ZKugErbDAGAZ71+F3hgkOvuiTfbSYGImyagTF4w==;EndpointSuffix=core.windows.net"
  }
  stage {
    url = "https://blobstagetyrion.blob.core.windows.net/"
    secret = "DefaultEndpointsProtocol=https;AccountName=blobstagetyrion;AccountKey=5eBmclwyAryMYNCPtCtgc0W+8Jn4XBEBDehh4/jkzs10yCHWkU8UQz+GWJ/g50umWYk42O7Azxb/qS3Zr14+Rg=="
  }
  production {
    url = "TODO"
    secret = "TODO"
  }
}

Intercom {
  hmacToken = "MQj0fFX7IuPHP6YBHvXaAgGWNk5Uec00NmQp4p04"
  token = "dG9rOjY4MGI3MjU1Xzk2MzRfNDFiZl9iYmUxXzQ5ZmI4YTM2MzI4NToxOjA="
}
documentDB {

  developer {
    url = "https://nosqlstagebyzance.documents.azure.com:443/"
    secret = "RK3GGvRxEIxGJIYBP8GAvbuDjbvzIP9RnVsP8Qrk8rXfFtv6BZaLfNpgvrOdDhZfTxeO9AA8t4wTSJeIZAfP2w=="
    databaseName = "DeveloperDocumentDB"

    RUsReserved {
      Model_Boad = 1;
    }
  }

  stage {
    url = "https://nosqlstagebyzance.documents.azure.com:443/"
    secret = "RK3GGvRxEIxGJIYBP8GAvbuDjbvzIP9RnVsP8Qrk8rXfFtv6BZaLfNpgvrOdDhZfTxeO9AA8t4wTSJeIZAfP2w=="
    databaseName = "StageDocumentDB"

    RUsReserved {
      Model_Boad = 1;
    }
  }

  production {
    url = "TODO"
    secret = "TODO"
    databaseName = "TODO"

    RUsReserved {
      Model_Boad = 1;
    }
  }
}

GitHub {

  releasesUrl = "https://api.github.com/repos/ByzanceIoT/tyrion/releases"
  apiKey = "4d89903b259510a1257a67d396bd4aaf10cdde6a"

  production {
    apiKey = 67e2214c157611191894
    clientSecret = 7136691bece9ab1ad711204fc22c458a8ca7a35f
    url = "https://api.github.com/user"
    callBack = "/login/github/oauth_callback"
  }

  stage {
    apiKey = 01c18785758ea12c07ee
    clientSecret = 5a9f90dd426be3f96889e3d0d827e24c6c539e5a
    url = "https://api.github.com/user"
    callBack = "/login/github/oauth_callback"
  }

  developer{
    apiKey = 4afa319159255de36432
    clientSecret = cfab320ef60231a6bbad4b8ed8e5f6ba1ad9f6b8
    url = "https://api.github.com/user"
    callBack = "/login/github/oauth_callback"
  }

}

Facebook{

  production{
    apiKey = 550327521801914
    clientSecret = 13e2fe4160a547368d230fb4f5296527
    url = "https://graph.facebook.com/v2.8/me"
    callBack = "/login/facebook/oauth_callback"
  }

  stage {
    apiKey = 550327521801914
    clientSecret = 13e2fe4160a547368d230fb4f5296527
    url = "https://graph.facebook.com/v2.8/me"
    callBack = "/login/facebook/oauth_callback"
  }

  developer{
    apiKey = 238413143258549
    clientSecret = 83a7bdb63897105c033589bec49ded1a
    url = "https://graph.facebook.com/v2.8/me"
    callBack = "/login/facebook/oauth_callback"
  }

}

Financial {

  alpha_ending = 2521068400000

  # !!!important!!! due to scheduler cron expresions
  # allowable values = 1-4, 12, 24, 48
  production {
    spendDailyPeriod = 1
  }
  stage {
    spendDailyPeriod = 1
  }
  developer {
    spendDailyPeriod = 1
  }

  # prices are Long numbers ($1 = 1000)

  extensions {
    project {
      name = "Project"
      description = "This is an extension for project."
    }
    database {
      name = "Database"
      description = "This is an extension for database."
    }
    log {
      name = "Logging"
      description = "This is an extension for log."
    }
    rest_api {
      name = "RestAPI"
      description = "This is an extension for RestAPI."
    }
    support {
      name = "Support"
      description = "This is an extension for Support."
    }
    instance {
      name = "Instance"
      description = "This is an extension for Instance."
    }
    homer_server {
      name = "Homer Server"
      description = "This is an extension for Homer Server."
    }
    participant {
      name = "Project paricipant"
      description = "This is an extension for project participants."
    }
  }
}

# External Services Settings -------------------------------------------------------------------------------------------

Fakturoid {

  production{
    VelkeTODO = "!!"
  }

  developer {
    apiKey = d6aed8509cbb5fcd3d3533bb2ab79880d4764c46
    url = "https://app.fakturoid.cz/api/v2/accounts/byzanceitsolutions2dev"
    callBack = "/fakturoid/callback"
    userAgent = "byzance (jana.novakova@byzance.cz)"
    secret_combo = "jana.novakova@byzance.cz:9291e03f80b498aa1a6f03f4e77267b5e02f5f8d"
  }

  stage {
    apiKey = d6aed8509cbb5fcd3d3533bb2ab79880d4764c46
    url = "https://app.fakturoid.cz/api/v2/accounts/byzanceitsolutions2dev"
    callBack = "/fakturoid/callback"
    userAgent = "byzance (jana.novakova@byzance.cz)"
    secret_combo = "jana.novakova@byzance.cz:9291e03f80b498aa1a6f03f4e77267b5e02f5f8d"
  }
}


PrintNode {

  production{
    apiKey = 6aa35f3ae351e4664417ac894d99dbd4c35a0b95
    url = "https://api.printnode.com"
  }

  developer {
    apiKey = 6aa35f3ae351e4664417ac894d99dbd4c35a0b95
    url = "https://api.printnode.com"
  }

  stage {
    apiKey = 6aa35f3ae351e4664417ac894d99dbd4c35a0b95
    url = "https://api.printnode.com"
  }
}


# GO PAY----------------------------------------------------------------------------------------------------------------

GOPay{

  production{
    api_url = "https://gate.gopay.cz/api"
    client_id = 13e2fe4160a547368d230fb4f5296527
    client_credentials = "https://graph.facebook.com/v2.5/me"
    return_url = "https://tyrion.byzance.cz/go_pay/return"
    notification_url = "https://tyrion.byzance.cz/go_pay/notification"
    go_id = "45646546546545645456"
  }

  developer{
    api_url = "https://gw.sandbox.gopay.com/api"
    client_id = 1078479787
    client_secret = 9yCpGL7R
    secure_key = HPrtGeztEmbL7dWCGSaxCvMD

    return_url = "http://localhost:9000/go_pay/return"
    notification_url = "http://localhost:9000/go_pay/notification"
    go_id = 8449088054
  }

  stage{
    api_url = "https://gw.sandbox.gopay.com/api"
    client_id = 1078479787
    client_secret = 9yCpGL7R
    secure_key = HPrtGeztEmbL7dWCGSaxCvMD
    return_url = "https://stage.tyrion.byzance.cz/go_pay/return"
    notification_url = "https://stage.tyrion.byzance.cz/go_pay/notification"
    go_id = 8449088054
  }

}

Slack {
  servers = "https://hooks.slack.com/services/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"
  hardware = "https://hooks.slack.com/services/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"
  homer = "https://hooks.slack.com/services/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"
}


Grid_App {

  production{
    mainUrl = "app.byzance.cz"
  }

  stage{
    mainUrl = "app.stage.byzance.cz"
  }

  localhost{
    // Definuje se IP adresou počítače
  }

}

# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

## Play settings
# ~~~~~
play {

  modules {
    enabled += "play.modules.swagger.SwaggerModule"
  }

  http {

    secret {
      key = "changeme"
      key = ${?SECRETKEY}
    }

    actionCreator = "filters.ActionCreator"
    errorHandler = "utilities.errors.ErrorHandler"

    parser {
      maxMemoryBuffer = 4MB
      maxDiskBuffer = 500MB
      Picture2Mb.maxMemoryBuffer = 2MB
    }

    idleTimeout = 25 seconds

    server {
      request-timeout = 30s
      idle-timeout = 20s
    }
  }

  server {
    websocket {
      # Maximum allowable frame payload length. Setting this value to your application's
      # requirement may reduce denial of service attacks using long data frames.
      frame.maxLength = 256k
    }
  }

  ws {
    akka: {
      requestTimeout = 10s
    }
    http {
      idleTimeout = 10s
    }

    ## WS SSL
    # https://www.playframework.com/documentation/latest/WsSSL
    # ~~~~~
    ssl {
      # Configuring HTTPS with Play WS does not require programming.  You can
      # set up both trustManager and keyManager for mutual authentication, and
      # turn on JSSE debugging in development with a reload.
      #debug.handshake = true
      #trustManager = {
      #  stores = [
      #    { type = "JKS", path = "exampletrust.jks" }
      #  ]
      #}
      enabledCipherSuites = [
        "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
        "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
        "TLS_RSA_WITH_AES_128_CBC_SHA",
        "TLS_RSA_WITH_AES_256_CBC_SHA"
      ]
    }
  }

  filters {

    # Enabled filters are run automatically against Play.
    # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.

    enabled += play.filters.cors.CORSFilter
    enabled += filters.DefaultFilter

    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
      # Filter paths by a whitelist of path prefixes
      #pathPrefixes = ["/some/path", ...]

      # The allowed origins. If null, all origins are allowed.
      # Tyrion check all http headers for validations - in our case - all are alowed
      allowedOrigins = null

      # The allowed HTTP methods. If null, all methods are allowed
      allowedHttpMethods = ["GET", "POST", "DELETE", "PUT", "OPTIONS"]
      exposedHeaders = ["Content-Type", "Content-Length", "Byzance-Api-Version"]
      allowedHttpHeaders = ["Accept", "Content-Type", "Content-Length", "content-type", "X-Auth-Token", "Becki-Version", "becki-version"]
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
      xssProtection = null
      contentTypeOptions = null
      permittedCrossDomainPolicies = null
      contentSecurityPolicy = null
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    hosts {
      # Allow requests to example.com, its subdomains, and localhost:9000.
      allowed = ["."]
    }
  }

  evolutions {
    enabled = true
    autoApply = true
    autocommit = false
  }

  db {
    pool = "hikaricp"

    # Play uses HikariCP as the default connection pool.  You can override
    # settings by changing the prototype:
    prototype {

      pool = "hikaricp"

      hikaricp {
        maximumPoolSize = 15
        maxLifetime = 3 minutes
        leakDetectionThreshold = 30000
      }
    }
  }
}

MongoDB {

  developer {
    # Mongo Compas logim:    mongodb+srv://tyrion:UGoYBIZUwUhvth0q@byzancecluster-4qtus.gcp.mongodb.net/admin

    url = "mongodb://tyrion:UGoYBIZUwUhvth0q@byzancecluster-shard-00-00-4qtus.gcp.mongodb.net:27017,byzancecluster-shard-00-01-4qtus.gcp.mongodb.net:27017,byzancecluster-shard-00-02-4qtus.gcp.mongodb.net:27017/test?ssl=true&replicaSet=ByzanceCluster-shard-0&authSource=admin&retryWrites=true"
    main_database_name = "Tyrion"
  }

  stage {
    url = ""
    main_database_name = ""
  }

}

ebean.default = ["models.*", "utilities.model.*"]

## JDBC Datasource
db {
  default.driver = org.postgresql.Driver
  default.url="jdbc:postgresql://:5432/byzance"
  default.username = postgres
  default.password = admin

  // Pro produkční databázi
  //default.url="jdbc:postgresql://bitnami-postgresql-d811.cloudapp.net:5432/byzanceERP"
  //default.username=postgres
  //default.password=oW1USmfY

  //Pro Stage databázi
  //default.url="jdbc:postgresql://db.stage.byzance.cz:5432/byzance"
  //default.username=tyrion
  //default.password="nZvLkpqNG=a?37GFEiHq"

  default.url = ${?DATABASEURL}
  default.username = ${?DATABASEUSR}
  default.password = ${?DATABASEPASS}

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}


play.editor="http://localhost:63342/api/file/?file=%s&line=%s"
